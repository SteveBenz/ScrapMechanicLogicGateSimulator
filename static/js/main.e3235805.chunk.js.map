{"version":3,"sources":["TickCounter.tsx","ViewModel.tsx","Buttons.tsx","App.tsx","reportWebVitals.ts","index.ts","Model.ts","Simulator.ts"],"names":["TickCounter","props","textRef","lastWidthUsed","_handleTick","text","simulator","currentTick","toString","width","x","right","state","this","onTick","offTick","y","top","ref","t","fill","fontSize","React","_assets","Interactable","attachedModel","group","handleStateChanged","setState","model","onStateChanged","console","debug","constructor","name","offStateChanged","undefined","eventArgs","onClick","evt","e","shiftKey","Error","stopDrag","onLinkStart","onMouseUp","pos","target","absolutePosition","setPosition","handleOnClick","bind","vonMouseUp","handleOnMouseUp","c","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","groupContent","height","strokeWidth","stroke","isSelected","currentState","Component","InteractableWithSingleBitSavedState","Model","concat","points","savedState","closed","LogicGate","image","kind","Input","radius","Timer","rectHeight","tickStorage","length","map","value","index","drawingWidth","drawingHeight","LinkArrow","_handleStateChanged","source","sourceX","sourceY","targetX","targetY","Math","abs","sign","yTrim","xTrim","prevState","pointerLength","pointerWidth","pressedScalingFactor","ToolBarButton","timeoutHandle","toolTipId","_handleTimeout","element","document","getElementById","style","visibility","clientHeight","left","buttonWidth","clientWidth","_handleMouseEnter","isHovering","startToolTipTimer","_handleMouseLeave","isPressed","offsetY","clearToolTipTimer","_handleMouseDown","_handleMouseUp","handleClick","buttonHeight","onMouseEnter","onMouseLeave","onMouseDown","scaleX","scaleY","getContent","isEnabled","setTimeout","clearTimeout","StartStopButton","isRunning","onRunStateChanged","handleRunStateChanged","lineCap","stopRunning","startRunning","SingleStepButton","advanceOne","LogicGateButton","prototype","offsetX","Array","onBeginDrag","event","ViewModel","selected","twiddle","PaintButton","paint","PutOnLiftButton","interactables","reload","TakeOffLiftButton","DeleteButton","remove","CopyLinkButton","box","createElement","position","window","location","origin","pathname","serializeToCompressedQueryStringFragment","focus","select","successful","execCommand","alert","err","error","SaveToFileButton","file","File","JSON","stringify","serialize","type","FileSaver","saveAs","LoadFromFileButton","fileInputElement","fileElem","addEventListener","handleFileGiven","click","files","reader","FileReader","onload","json","result","serialized","parse","load","readAsText","ReloadButton","gameReload","App","stage","maxSensibleDropY","handleInteractablesReset","oldInteractables","offMoved","handleInteractableMoved","links","i","onMoved","inputs","j","push","handleInteractableAdded","interactable","handleInteractableRemoved","filter","l","handleResize","windowInnerWidth","innerWidth","windowInnerHeight","innerHeight","handleKeyPress","xy","getPointerPosition","key","newInteractable","add","putOnLift","getLinks","linkSource","onInteractableAdded","onInteractableRemoved","onInteractablesReset","container","tabIndex","linkTargetX","linkTargetY","addInput","createByDragPrototype","id","handleMouseUpInInteractable","handleLinkStart","handleInteractableClicked","pointer","canvasHeight","canvasWidth","numRows","hSpaceBetweenButtons","buttonRowHeight","buttonRowY","n","vSpaceBetweenButtons","buttonRowX","handleMouseUpInStage","onMouseMove","handleMouseMove","handleMouseLeave","handleMouseDown","getViewModelForModel","link","handleNewInteractableDrag","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryString","search","Simulator","decompressQueryStringFragment","onComplete","Konva","Image","fromURL","img","Object","keys","render","makeItSo","_x","_y","events","_inputs","_prevState","_currentState","EventEmitter","_emitMoved","newValue","_emitStateChanged","newInput","inputLimit","existingIndex","indexOf","splice","indexInTarget","calculate","deadInput","_direction","setPrevState","handler","on","off","emit","_savedState","setCurrentState","LogicGateKindSequence","_kind","direction","calculatedState","numActivatedInputs","reduce","a","b","_tickStorage","_nextTickTimeoutId","_pauseInterval","_events","export","deserialize","interactablesInputs","pair","setInputs","_emitInteractablesReset","_emitTick","jsonSerialized","compressed","pako","deflate","sharableString","Buffer","from","encodeURIComponent","_handleTickTimeout","newRunState","_advanceOne","EventNames","interactableAdded","didRemove","removeInput","interactableRemoved","apply","tick","base64","decodeURIComponent","compressedData","serializedString","inflate","to"],"mappings":"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","file":"static/js/main.e3235805.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Simulator } from \"./Simulator\";\r\nimport { Text } from 'react-konva';\r\nimport Konva from 'konva';\r\n\r\nexport interface TickCounterProps {\r\n    simulator: Simulator;\r\n    right: number;\r\n    top: number;\r\n}\r\n\r\n/**\r\n * Implements the tick counter, the trickiest bit being that it wants to render it in the top-right.\r\n * This isn't done in a very react-like way because we need to set the 'x' position relative to the\r\n * width of the text, and we don't know the width of the text until the DOM renders it.  What we really\r\n * want, in any case, is a text element that's right-aligned, and that's just not in Konva as far as I\r\n * can see.  Probably because Konva can do it easily enough.  See the code in @see _handleTick.\r\n */\r\nexport class TickCounter extends React.Component<TickCounterProps> {\r\n    private textRef: Konva.Text | undefined;\r\n    private lastWidthUsed: number;\r\n\r\n    constructor(props: TickCounterProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTick: props.simulator.currentTick,\r\n        };\r\n\r\n        // This value really doesn't matter, if it's ever visible, it's for a blink and no more.\r\n        // The property itself is here to handle resize when the simulator is not ticking.\r\n        // In that case, props.right gets updated by React, causing a render to happen, but\r\n        // in that case, componentDidMount does not get called -- it only gets called once when\r\n        // the object gets first drawn, not every time it renders.\r\n        this.lastWidthUsed = 20;\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.simulator.onTick(this._handleTick);\r\n        this._handleTick();\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        this.props.simulator.offTick(this._handleTick);\r\n    }\r\n\r\n    private _handleTick = (): void => {\r\n        if (this.textRef) {\r\n            this.textRef.text(this.props.simulator.currentTick.toString());\r\n            this.lastWidthUsed = this.textRef.width();\r\n            this.textRef.x(this.props.right - this.textRef.width());\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Text y={this.props.top}\r\n                  x={this.props.right - this.lastWidthUsed}\r\n                  ref={(t: Konva.Text): void => { this.textRef = t; }}\r\n                  fill='red'\r\n                  fontSize={30}/>\r\n        );\r\n    }\r\n}\r\n","import Konva from 'konva';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport React from 'react';\r\nimport { Image, Group, Rect, Circle, Line, Arrow} from 'react-konva';\r\nimport * as Model from './Model';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const _assets: any = {};\r\n\r\n// https://www.cssscript.com/lightweight-context-menu-javascript-library-justcontext-js/\r\n// might automate the context menu for me.\r\n\r\nexport interface IEventArgsInteractable {\r\n    model: Model.Interactable;\r\n    evt: MouseEvent;\r\n}\r\n\r\ninterface IInteractableProps {\r\n    model: Model.Interactable;\r\n    onClick?: (eventArgs: IEventArgsInteractable) => void;\r\n    onLinkStart?: (eventArgs: IEventArgsInteractable) => void;\r\n    onMouseUp?: (eventArgs: IEventArgsInteractable) => void;\r\n    key: string;\r\n    isSelected: boolean;\r\n}\r\n\r\n// In somebody's mind, Record<string,never> is better than interface{}... Takes all kinds I guess.\r\n\r\ntype IInteractableState = Record<string,never>\r\n\r\nexport class Interactable<TProps extends IInteractableProps, TState extends IInteractableState> extends React.Component<TProps, TState> {\r\n    /**\r\n     * @summary This is the model (which we get from props) that was last attached to (listening for events, such\r\n     * as the state changing).  It has to be handled really carefully, at least if you want to abide by the rules\r\n     * set forth.  It generally reflects the state of the prop the last time the render() method was run.  Note that\r\n     * on the first render this is not set, and instead we wait for the componentDidMount event.  After that, it gets\r\n     * updated at render time.  The difference is because we can't accept any setState calls until the component is\r\n     * mounted.\r\n     * \r\n     * @see https://blog.bitsrc.io/react-16-lifecycle-methods-how-and-when-to-use-them-f4ad31fb2282\r\n     */\r\n    private attachedModel: Model.Interactable | undefined;\r\n\r\n    private group: Konva.Group | null | undefined;\r\n\r\n    public componentDidMount(): void {\r\n        // after this point, the model is drawn and is reacting to events.\r\n        if (!this.attachedModel) {\r\n            this.attachedModel = this.props.model;\r\n            this.attachedModel.onStateChanged(this.handleStateChanged);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        console.debug(\"componentDidUnmount(\"+this.constructor.name+\")\");\r\n        if (this.attachedModel) {\r\n            this.attachedModel.offStateChanged(this.handleStateChanged);\r\n            this.attachedModel = undefined;\r\n        }\r\n    }\r\n\r\n    private handleOnClick(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        if (this.props.onClick) {\r\n            this.props.onClick({\r\n                evt: eventArgs.evt,\r\n                model: this.props.model,\r\n            });\r\n        }\r\n    }\r\n\r\n    private handleStateChanged = (): void => {\r\n        this.setState({});\r\n    }\r\n\r\n    private handleDragStart(e: KonvaEventObject<MouseEvent>): void {\r\n        // The gesture for dragging is left mouse button, and there seems no way to\r\n        // argue with Konva about it, except this.  We want to use left-mouse-button\r\n        // dragging to move a pointer, so if we see the shift key is not down, we\r\n        // cancel the drag and tell our parent about the link-start event.  We can't\r\n        // help anymore from here, as we don't get useful events.\r\n        if (!e.evt.shiftKey) {\r\n            if (!this.group) {\r\n                throw new Error('group did not get set in render');\r\n            }\r\n\r\n            this.group.stopDrag();\r\n\r\n            if (this.props.onLinkStart) {\r\n                this.props.onLinkStart({\r\n                    evt: e.evt,\r\n                    model: this.props.model\r\n                });\r\n            }\r\n        }\r\n        // Else it's a real drag event, let that go.\r\n    }\r\n\r\n    private handleOnMouseUp(e: KonvaEventObject<MouseEvent>): void {\r\n        if (this.props.onMouseUp) {\r\n            this.props.onMouseUp({\r\n                evt: e.evt,\r\n                model: this.props.model\r\n            });\r\n        }\r\n    }\r\n\r\n    private handleDragEnd(): void {\r\n        // Since we change the model during the dragMove, we don't really need\r\n        // this event, but if we don't have it, Konva gets nervous.\r\n    }\r\n\r\n    private handleDragMove(e: KonvaEventObject<MouseEvent>) {\r\n        // The documentation gives no clue at all how to do this.  But there's a comment later:\r\n        // var scale = stage.scaleX();\r\n        // var new_pos = event.target.absolutePosition();\r\n        // new_pos.x = (new_pos.x - stage.x()) / scale;\r\n        // new_pos.y = (new_pos.y - stage.y()) / scale;\r\n        // draggedNode.move_to(new_pos);\r\n        //\r\n        // Gonna assume the stage isn't scaled.  (And might you be subject to the layer being scaled as well?)\r\n\r\n        const pos = e.target.absolutePosition();\r\n        this.props.model.setPosition(pos.x, pos.y);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.props.model !== this.attachedModel && this.attachedModel !== undefined) {\r\n            // the property has changed and this isn't the first time we're redering (so the DOM exists)\r\n            this.attachedModel.offStateChanged(this.handleStateChanged);\r\n            this.attachedModel = this.props.model;\r\n            this.attachedModel.onStateChanged(this.handleStateChanged);\r\n        }\r\n\r\n        // onContextMenu={this.handleContextMenu}\r\n        return <Group onClick={this.handleOnClick.bind(this)}\r\n                      vonMouseUp={this.handleOnMouseUp.bind(this)}\r\n                      ref={(c) => this.group = c}\r\n                      draggable\r\n                      x={this.props.model.x}\r\n                      y={this.props.model.y}\r\n                      onDragStart={this.handleDragStart.bind(this)}\r\n                      onDragMove={this.handleDragMove.bind(this)}\r\n                      onDragEnd={this.handleDragEnd.bind(this)}>\r\n                {this.groupContent()}\r\n            </Group>\r\n    }\r\n\r\n    protected groupContent(): Array<JSX.Element> {\r\n        return [<Rect key='surround' height={64} width={64} strokeWidth={3} stroke={this.props.isSelected ? 'green' : 'blue'} fill={this.props.model.currentState ? 'white' : 'grey'} />]\r\n    }\r\n}\r\n\r\nexport class InteractableWithSingleBitSavedState<TProps extends IInteractableProps, TState extends IInteractableState> extends Interactable<TProps, TState> {\r\n    protected groupContent(): Array<JSX.Element> {\r\n        if (this.props.model instanceof Model.InteractableWithSingleBitSavedState) {\r\n            const size=16;\r\n            return super.groupContent()\r\n                .concat(\r\n                <Line key='saveStateIndicator'\r\n                      points={[63-size, 0, 63, 0, 63, size]}\r\n                      fill={this.props.model.savedState ? 'blue' : 'transparent'}\r\n                      stroke='blue'\r\n                      strokeWidth={3}\r\n                      closed={true} />);\r\n        }\r\n        else {\r\n            return super.groupContent();\r\n        }\r\n    }\r\n}\r\n\r\ninterface ILogicGateProps extends IInteractableProps {\r\n    model: Model.LogicGate;\r\n}\r\n\r\nexport class LogicGate extends InteractableWithSingleBitSavedState<ILogicGateProps, IInteractableState> {\r\n    constructor(props: ILogicGateProps) {\r\n        super(props);\r\n        console.debug(\"constructor(LogicGate)\");\r\n    }\r\n\r\n    protected groupContent(): Array<JSX.Element> {\r\n        return super.groupContent().concat([\r\n            <Image key='image' x={0} y={0} image={_assets[this.props.model.kind].image()} />]);\r\n    }\r\n}\r\n\r\ninterface IInputProps extends IInteractableProps {\r\n    model: Model.Input;\r\n}\r\n\r\nexport class Input extends InteractableWithSingleBitSavedState<IInputProps, IInteractableState> {\r\n    constructor(props: IInputProps) {\r\n        super(props);\r\n        console.debug(\"constructor(Input)\");\r\n    }\r\n\r\n    protected groupContent(): Array<JSX.Element> {\r\n        return super.groupContent().concat([\r\n            <Circle key='image' radius={22} x={32} y={32} strokeWidth={8} stroke='black' />]);\r\n    }\r\n}\r\n\r\nexport interface ITimerProps extends IInteractableProps {\r\n    model: Model.Timer;\r\n}\r\n\r\ntype ITimerState = IInteractableState\r\n\r\nexport class Timer extends Interactable<ITimerProps, ITimerState> {\r\n    constructor(props: ITimerProps) {\r\n        super(props);\r\n        console.debug(\"constructor(Timer)\");\r\n    }\r\n\r\n    groupContent(): Array<JSX.Element> {\r\n        const drawingHeight = 64;\r\n        const drawingWidth = 64;\r\n        const horizontalOffset = 12;\r\n        const verticalOffset = 6;\r\n        const rectHeight = (drawingHeight - 2*verticalOffset) / this.props.model.tickStorage.length;\r\n\r\n        return super.groupContent().concat(\r\n            this.props.model.tickStorage.map((value: boolean, index: number) =>\r\n            <Rect key='image'\r\n                  x={horizontalOffset}\r\n                  width={drawingWidth - 2*horizontalOffset}\r\n                  y={drawingHeight - verticalOffset - rectHeight - index*(drawingHeight-2*verticalOffset)/this.props.model.tickStorage.length}\r\n                  height={rectHeight}\r\n                  strokeWidth={1}\r\n                  stroke='darkgrey'\r\n                  fill={value ? 'blue' : 'white'}\r\n                   />));\r\n    }\r\n}\r\n\r\nexport interface ILinkArrowProps {\r\n    source: Model.Interactable;\r\n    target: Model.Interactable;\r\n}\r\n\r\nexport class LinkArrow extends React.Component<ILinkArrowProps> {\r\n    private attachedModel: Model.Interactable | undefined;\r\n\r\n    public constructor(props: ILinkArrowProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        // after this point, the model is drawn and is reacting to events.\r\n        if (!this.attachedModel) {\r\n            this.attachedModel = this.props.source;\r\n            this.attachedModel.onStateChanged(this._handleStateChanged);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.props.source.offStateChanged(this._handleStateChanged);\r\n        this.attachedModel = undefined;\r\n    }\r\n\r\n    private _handleStateChanged = (): void => {\r\n        this.setState({});\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.props.source !== this.attachedModel && this.attachedModel !== undefined) {\r\n            // the property has changed and this isn't the first time we're redering (so the DOM exists)\r\n            this.attachedModel.offStateChanged(this._handleStateChanged);\r\n            this.attachedModel = this.props.source;\r\n            this.attachedModel.onStateChanged(this._handleStateChanged);\r\n        }\r\n\r\n        let sourceX = this.props.source.x+32;\r\n        let sourceY = this.props.source.y+32;\r\n        let targetX = this.props.target.x+32;\r\n        let targetY = this.props.target.y+32;\r\n\r\n        if (Math.abs(targetY-sourceY) < Math.abs(targetX-sourceX)) {\r\n            // The line is less than 45 degrees up, so we'll trim the x's and scale the y's\r\n            const sign = (targetX > sourceX) ? 1 : -1;\r\n            const yTrim = 32*(targetY - sourceY)/(targetX-sourceX);\r\n            sourceX += sign*32;\r\n            targetX -= sign*32;\r\n            sourceY += sign*yTrim;\r\n            targetY -= sign*yTrim;\r\n        }\r\n        else {\r\n            const sign = (targetY > sourceY) ? 1 : -1;\r\n            const xTrim = 32*(targetX - sourceX)/(targetY-sourceY);\r\n            sourceX += sign*xTrim;\r\n            targetX -= sign*xTrim;\r\n            sourceY += sign*32;\r\n            targetY -= sign*32;\r\n        }\r\n\r\n        return <Arrow\r\n            x={sourceX}\r\n            y={sourceY}\r\n            points={[0,0, targetX-sourceX, targetY-sourceY]}\r\n            fill={this.props.source.prevState ? 'darkblue' : 'teal'}\r\n            stroke={this.props.source.prevState ? 'darkblue' : 'teal'}\r\n            strokeWidth={4}\r\n            pointerLength={10}\r\n            pointerWidth={10}/>;\r\n    }\r\n}\r\n\r\nexport function loadAssets(onComplete: () => void): void\r\n{\r\n    for (const kind of ['and', 'or', 'xor', 'nand', 'nor', 'xnor', 'paint']) {\r\n        Konva.Image.fromURL('/' + kind + '-black.png', (img: string) => {\r\n            _assets[kind] = img;\r\n            if (Object.keys(_assets).length === 7) {\r\n                onComplete();\r\n            }\r\n          });\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Image, Line, Rect, Group, Circle, Text } from \"react-konva\";\r\nimport { Simulator, ISerializedSimulator } from \"./Simulator\";\r\nimport * as ViewModel from \"./ViewModel\";\r\nimport * as Model from \"./Model\";\r\nimport { Interactable } from \"./Model\";\r\nimport { KonvaEventObject } from \"konva/types/Node\";\r\nimport FileSaver from 'file-saver';\r\n\r\ninterface IToolBarButtonProps {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface IToolBarButtonState {\r\n    isHovering: boolean;\r\n    isEnabled: boolean; //  <- todo: get rid of bad state-derived-from-props\r\n    isPressed: boolean;\r\n}\r\n\r\nconst buttonWidth = 64;\r\nconst buttonHeight = 64;\r\nconst pressedScalingFactor = 1.05;\r\n\r\nabstract class ToolBarButton<TProps extends IToolBarButtonProps,TState extends IToolBarButtonState> extends React.Component<TProps, TState> {\r\n    private timeoutHandle: NodeJS.Timeout | undefined;\r\n\r\n    public constructor(props: TProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return <Group x={this.props.x - (this.state.isPressed ? buttonWidth*((pressedScalingFactor - 1)/2) : 0)}\r\n                      y={this.props.y - (this.state.isPressed ? buttonHeight*((pressedScalingFactor - 1)/2) : 0)}\r\n                      onMouseEnter={this._handleMouseEnter}\r\n                      onMouseLeave={this._handleMouseLeave}\r\n                      onMouseDown={this._handleMouseDown}\r\n                      onMouseUp={this._handleMouseUp}\r\n                      scaleX={this.state.isPressed ? pressedScalingFactor : 1}\r\n                      scaleY={this.state.isPressed ? pressedScalingFactor : 1}>\r\n                {this.getContent()}\r\n                <Rect x={0} y={0} height={64} width={64}\r\n                      strokeWidth={2} stroke={this.state.isHovering ? 'black' : 'grey'}\r\n                      fill={this.state.isEnabled ? 'transparent' : '#80808080'} />\r\n            </Group>;\r\n    }\r\n\r\n    protected abstract getContent(): JSX.Element | Array<JSX.Element>;\r\n    protected abstract handleClick(): void;\r\n\r\n    protected handleDragStart: ((eventArgs: KonvaEventObject<MouseEvent>) => void) | undefined = undefined;\r\n    protected readonly toolTipId: string | undefined;\r\n\r\n    public componentWillUnmount() {\r\n        this.clearToolTipTimer();\r\n    }\r\n\r\n    private startToolTipTimer() {\r\n        if (!this.timeoutHandle && this.toolTipId && document.getElementById(this.toolTipId)) {\r\n            this.timeoutHandle = setTimeout(this._handleTimeout, 1000);\r\n        }        \r\n    }\r\n\r\n    private clearToolTipTimer() {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n            this.timeoutHandle = undefined;\r\n        }\r\n\r\n        if (!this.toolTipId) {\r\n            return;\r\n        }\r\n\r\n        const element: HTMLElement | null = document.getElementById(this.toolTipId);\r\n        if (!element) {\r\n            throw new Error(\"toolTipId is defined, but not in the docuemnt\");\r\n        }\r\n\r\n        element.style.visibility = 'hidden';\r\n    }\r\n\r\n    private _handleTimeout: () => void = () => {\r\n        this.timeoutHandle = undefined;\r\n        if (!this.toolTipId) {\r\n            return;\r\n        }\r\n\r\n        const element: HTMLElement | null = document.getElementById(this.toolTipId);\r\n        if (!element) {\r\n            throw new Error(\"toolTipId is defined, but not in the docuemnt\");\r\n        }\r\n\r\n        element.style.visibility = 'visible';\r\n        element.style.top = (this.props.y - element.clientHeight - 5) + 'px';\r\n        let left:number = this.props.x + buttonWidth/2 - element.clientWidth/2;\r\n        if (left < 0) {\r\n            left = 10;\r\n        }\r\n        element.style.top = (this.props.y - element.clientHeight - 5) + 'px';\r\n        element.style.left = left + 'px';\r\n    }\r\n\r\n    private _handleMouseEnter: () => void = () => {\r\n        this.setState({ isHovering: true });\r\n        this.startToolTipTimer();\r\n    }\r\n\r\n    private _handleMouseLeave: (_: KonvaEventObject<MouseEvent>) => void = (eventArgs) => {\r\n        // If the cursor is moving roughly upward, call it a drag.\r\n        if (this.handleDragStart && this.state.isPressed && eventArgs.evt.offsetY < this.props.y+32) {\r\n            this.handleDragStart(eventArgs);\r\n        }\r\n\r\n        this.setState({ isHovering: false, isPressed: false });\r\n        this.clearToolTipTimer();\r\n    }\r\n\r\n    private _handleMouseDown: () => void = () => {\r\n        this.setState({ isPressed: true });\r\n        this.clearToolTipTimer();\r\n    }\r\n\r\n    private _handleMouseUp: () => void = () => {\r\n        this.setState({ isPressed: false });\r\n        this.handleClick();\r\n        this.startToolTipTimer();\r\n    }\r\n}\r\n\r\ninterface IStartStopButtonProps extends IToolBarButtonProps {\r\n    model: Simulator,\r\n}\r\n\r\ninterface IStartStopButtonState extends IToolBarButtonState {\r\n    isRunning: boolean,\r\n}\r\n\r\nexport class StartStopButton extends ToolBarButton<IStartStopButtonProps, IStartStopButtonState> {\r\n    public constructor(props: IStartStopButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isHovering: false,\r\n            isEnabled: true,\r\n            isPressed: false,\r\n            isRunning: this.props.model.isRunning,\r\n        }\r\n\r\n        this.props.model.onRunStateChanged(this.handleRunStateChanged.bind(this));\r\n    }\r\n\r\n    toolTipId = \"playPauseTip\";\r\n\r\n    private handleRunStateChanged(): void {\r\n        this.setState({ isRunning: this.props.model.isRunning });\r\n    }\r\n\r\n    protected getContent(): JSX.Element | Array<JSX.Element> {\r\n        return this.props.model.isRunning ?\r\n                [\r\n                    <Line key='1' points={[32-5, 32-12, 32-5, 32+12]} lineCap='butt' strokeWidth={5} stroke='red'/>,\r\n                    <Line key='2' points={[32+5, 32-12, 32+5, 32+12]} lineCap='butt' strokeWidth={5} stroke='red'/>\r\n                ] : [   <Line key='3'  points={[32-16, 32-16, 32+12, 32, 32-16, 32+16]}\r\n                      strokeWidth={4}\r\n                      stroke='green'\r\n                      fill='green'\r\n                      closed={true}/>\r\n                ];\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        if (this.props.model.isRunning) {\r\n            this.props.model.stopRunning();\r\n        } else {\r\n            this.props.model.startRunning();\r\n        }\r\n    }\r\n}\r\n\r\ninterface ISingleStepButtonProps extends IToolBarButtonProps {\r\n    model: Simulator,\r\n}\r\n\r\nexport class SingleStepButton extends ToolBarButton<ISingleStepButtonProps, IToolBarButtonState> {\r\n    public constructor(props: ISingleStepButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isHovering: false,\r\n            isEnabled: true,\r\n            isPressed: false,\r\n        }\r\n\r\n        this.props.model.onRunStateChanged(() => this.setState({ isEnabled: !this.props.model.isRunning }));\r\n    }\r\n\r\n    toolTipId = \"singleStepTip\";\r\n\r\n    protected getContent(): JSX.Element | Array<JSX.Element> {\r\n        return <Line points={[32+12, 32, 32-16, 32+16, 32-16, 32-16, 32+12, 32, 32+12, 32-16, 32+12, 32+16]}\r\n        strokeWidth={4}\r\n        stroke={this.state.isEnabled ? '#008000ff' : '#305030ff'}\r\n        closed={false}/>\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        this.props.model.advanceOne();\r\n    }\r\n}\r\n\r\nexport interface IDragNewInteractableDragEventArgs {\r\n    prototype: Model.Interactable;\r\n    event: KonvaEventObject<MouseEvent>;\r\n}\r\n\r\ninterface ILogicGateButtonProps extends IToolBarButtonProps {\r\n    kind: Model.LogicGateTypes | 'timer' | 'input';\r\n    selected: Model.Interactable | undefined;\r\n    onBeginDrag: (eventArgs: IDragNewInteractableDragEventArgs) => void;\r\n}\r\n\r\nexport class LogicGateButton extends ToolBarButton<ILogicGateButtonProps, IToolBarButtonState> {\r\n    constructor(props: ILogicGateButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        };\r\n    }\r\n\r\n    toolTipId = this.props.kind === 'input'\r\n        ? 'inputTip'\r\n        : (this.props.kind === 'timer' \r\n            ? 'timerTip'\r\n            : 'logicGateTip');\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        switch(this.props.kind) {\r\n            case 'input':\r\n                return <Circle radius={22} x={32} y={32} strokeWidth={8} stroke={this.state.isEnabled ? 'black' : '#00000080'} />;\r\n            case 'timer':\r\n                const drawingHeight = 64;\r\n                const drawingWidth = 64;\r\n                const horizontalOffset = 12;\r\n                const verticalOffset = 6;\r\n                const tickStorage = [true, true, true, true, true, false, false, false, false, false];\r\n                const rectHeight = (drawingHeight - 2*verticalOffset) / tickStorage.length;\r\n\r\n                return tickStorage.map((value: boolean, index: number) =>\r\n                <Rect key={index}\r\n                      x={horizontalOffset}\r\n                      width={drawingWidth - 2*horizontalOffset}\r\n                      y={drawingHeight - verticalOffset - rectHeight - index*(drawingHeight-2*verticalOffset)/tickStorage.length}\r\n                      height={rectHeight}\r\n                      strokeWidth={1}\r\n                      stroke='darkgrey'\r\n                      fill={value ? 'blue' : 'white'}\r\n                       />);\r\n            default:\r\n                return <Image x={0} y={0} image={ViewModel._assets[this.props.kind].image()} />;\r\n        }\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        if (!this.props.selected) {\r\n            return;\r\n        }\r\n\r\n        if (this.props.kind === 'input' && this.props.selected instanceof Model.Input) {\r\n            this.props.selected.twiddle(1);\r\n        } else if (this.props.kind === 'timer' && this.props.selected instanceof Model.Timer) {\r\n            // no action\r\n        } else if (this.props.kind !== 'timer' && this.props.kind !== 'input' && this.props.selected instanceof Model.LogicGate) {\r\n            this.props.selected.kind = this.props.kind;\r\n        } else {\r\n            // TODO: Convert the interactable\r\n        }\r\n    }\r\n\r\n    protected handleDragStart = (eventArgs: KonvaEventObject<MouseEvent>): void => {\r\n        let prototype: Model.Interactable;\r\n        switch(this.props.kind) {\r\n            case 'timer':\r\n                prototype = new Model.Timer({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, kind: this.props.kind, tickStorage: new Array<boolean>(10).fill(false) });\r\n                break;\r\n            case 'input':\r\n                prototype = new Model.Input({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, savedState: false, kind: this.props.kind});\r\n                break;\r\n            default:\r\n                prototype = new Model.LogicGate({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, savedState: false, kind: this.props.kind});\r\n                break;\r\n        }\r\n\r\n        this.props.onBeginDrag({\r\n            prototype: prototype,\r\n            event: eventArgs});\r\n    }\r\n}\r\n\r\ninterface IPaintButtonProps extends IToolBarButtonProps {\r\n    selected: Model.Interactable | undefined;\r\n}\r\n\r\nexport class PaintButton extends ToolBarButton<IPaintButtonProps, IToolBarButtonState> {\r\n    constructor(props: IPaintButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    toolTipId = 'paintTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Image x={0} y={0} image={ViewModel._assets['paint'].image()} />;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        if (this.props.selected instanceof Model.InteractableWithSingleBitSavedState) {\r\n            this.props.selected.paint();\r\n        }\r\n    }\r\n}\r\n\r\ninterface ILiftButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class PutOnLiftButton extends ToolBarButton<ILiftButtonProps, IToolBarButtonState> {\r\n    constructor(props: ILiftButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    toolTipId = 'putOnLiftTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return [ <Line key='base'\r\n                       points={[52, 48,  12, 48,  12, 28,  32, 28,  32, 12,  16, 12,  48, 12,  32,12,  32, 28,  52, 28,  52, 48 ]}\r\n                       strokeWidth={4}\r\n                       stroke='black'\r\n                       closed={true}/>,\r\n                <Line key='arrow'\r\n                      points = {[18, 42,  32, 32,  46, 42,  18, 42]}\r\n                      strokeWidth={1}\r\n                      stroke='blue'\r\n                      closed={true}\r\n                      fill='blue'/>];\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        for (const i of this.props.simulator.interactables) {\r\n            i.reload();\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class TakeOffLiftButton extends ToolBarButton<ILiftButtonProps, IToolBarButtonState> {\r\n    constructor(props: ILiftButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return [ <Line key='base'\r\n                       points={[52, 48,  12, 48,  12, 28,  32, 28,  32, 12,  16, 12,  48, 12,  32,12,  32, 28,  52, 28,  52, 48 ]}\r\n                       strokeWidth={4}\r\n                       stroke='black'\r\n                       closed={true}/>,\r\n                  <Line key='arrow'\r\n                        points = {[18, 32,  32, 42,  46, 32,  18, 32]}\r\n                        strokeWidth={1}\r\n                        stroke='blue'\r\n                        closed={true}\r\n                        fill='blue'/>];\r\n    }\r\n\r\n    toolTipId = 'takeOffLiftTip';\r\n\r\n    protected handleClick(): void {\r\n        for (const i of this.props.simulator.interactables) {\r\n            i.paint();\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IDeleteButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n    selected: Interactable | undefined;\r\n}\r\n\r\nexport class DeleteButton extends ToolBarButton<IDeleteButtonProps, IToolBarButtonState> {\r\n    constructor(props: IDeleteButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: this.props.selected !== undefined,\r\n            isHovering: false,\r\n            isPressed: false\r\n        }\r\n    }\r\n\r\n    toolTipId = 'deleteTip';\r\n\r\n    static getDerivedStateFromProps(props: IDeleteButtonProps, state: IToolBarButtonState): IToolBarButtonState {\r\n        return {\r\n            isEnabled: props.selected !== undefined,\r\n            isHovering: state.isHovering,\r\n            isPressed: state.isPressed,\r\n        }\r\n    }\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#128465;\" x={10} y={8} fontSize={64} fill='black'/>;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        if (this.props.selected) {\r\n            this.props.simulator.remove(this.props.selected);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ICopyLinkButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class CopyLinkButton extends ToolBarButton<ICopyLinkButtonProps, IToolBarButtonState> {\r\n    constructor(props: ICopyLinkButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#128279;\" x={6} y={14} fontSize={42} fill='black'/>;\r\n    }\r\n\r\n    toolTipId = 'shareLinkTip';\r\n\r\n    protected handleClick(): void {\r\n\r\n        // TODO: Doing this for-real seems to require being served by HTTPS, so re-test it then.  This is certainly\r\n        //   bad because it keeps recreating the textarea.  But it also is probably useless as there's a\r\n        //   navigator.clipboard function that would do this more easily.\r\n        //\r\n        // https://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript\r\n        const box = document.createElement(\"textarea\");\r\n        if (!box) {\r\n            throw new Error(\"textarea is missing in index.html\");\r\n        }\r\n\r\n        // Avoid scrolling to bottom\r\n        box.style.top = \"0\";\r\n        box.style.left = \"0\";\r\n        box.style.position = \"fixed\";\r\n\r\n        box.value = window.location.origin + window.location.pathname + '?' + this.props.simulator.serializeToCompressedQueryStringFragment();\r\n        box.focus();\r\n        box.select();\r\n        try {\r\n            const successful = document.execCommand('copy');\r\n            const msg = successful ? 'successful' : 'unsuccessful';\r\n            alert('Fallback: Copying text command was ' + msg);\r\n        } catch (err) {\r\n            console.error('Fallback: Oops, unable to copy', err);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface ISaveToFileButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class SaveToFileButton extends ToolBarButton<ISaveToFileButtonProps, IToolBarButtonState> {\r\n    constructor(props: ISaveToFileButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    toolTipId = 'saveTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#128190;\" x={6} y={14} fontSize={42} fill='black'/>;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        const file = new File([JSON.stringify(this.props.simulator.serialize(), null, 4)], \"logicgatesim.json\", {type: \"text/plain;charset=utf-8\"});\r\n        FileSaver.saveAs(file);\r\n    }\r\n}\r\n\r\ninterface ILoadFromFileButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class LoadFromFileButton extends ToolBarButton<ILoadFromFileButtonProps, IToolBarButtonState> {\r\n    private readonly fileInputElement: HTMLInputElement;\r\n\r\n    constructor(props: ILoadFromFileButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n\r\n        const fileElem = document.getElementById(\"fileElem\") as HTMLInputElement;\r\n        if (!fileElem) {\r\n            throw new Error(\"index.html is busted - fileElem <input> is missing\");\r\n        }\r\n\r\n        this.fileInputElement = fileElem;\r\n\r\n        this.fileInputElement.addEventListener('change', this.handleFileGiven.bind(this), false)\r\n    }\r\n   \r\n    toolTipId = 'loadTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#128193;\" x={6} y={14} fontSize={42} fill='black'/>;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        const fileElem = document.getElementById(\"fileElem\");\r\n        if (!fileElem) {\r\n            throw new Error(\"fileElem is missing in index.html\");\r\n        }\r\n        fileElem.click();\r\n    }\r\n\r\n    // This function tied to the 'change' event of the file dialog in index.html\r\n    handleFileGiven(): void {\r\n        if (!this.fileInputElement.files || this.fileInputElement.files.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // hacky - no message when file load fails.\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            const json: string = reader.result as string;\r\n            const serialized: ISerializedSimulator = JSON.parse(json) as ISerializedSimulator;\r\n            this.props.simulator.load(serialized);\r\n        };\r\n        reader.readAsText(this.fileInputElement.files[0]);\r\n    }\r\n}\r\n\r\n\r\ninterface IReloadButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class ReloadButton extends ToolBarButton<IReloadButtonProps, IToolBarButtonState> {\r\n    constructor(props: IReloadButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    toolTipId = 'reloadTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#8645;\" x={16} y={14} fontSize={42} fill='black'/>;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        this.props.simulator.gameReload();\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Arrow, Line, Rect } from \"react-konva\";\nimport { Simulator, IEventArgsInteractableAdded, IEventArgsInteractableRemoved, IInteractableLink, ISerializedSimulator, IEventArgsInteractablesReset } from \"./Simulator\";\nimport * as TC from \"./TickCounter\";\nimport * as ViewModel from \"./ViewModel\";\nimport * as Model from \"./Model\";\nimport Konva from 'konva';\nimport { Vector2d } from \"konva/types/types\";\nimport { Interactable } from \"./Model\";\nimport { CopyLinkButton, DeleteButton, IDragNewInteractableDragEventArgs, LoadFromFileButton, LogicGateButton, PaintButton, PutOnLiftButton, ReloadButton, SaveToFileButton, SingleStepButton, StartStopButton, TakeOffLiftButton } from \"./Buttons\";\nimport { KonvaEventObject } from \"konva/types/Node\";\n\ninterface AppProps {\n    simulator: Simulator;\n}\n\ninterface AppState {\n    interactables: Array<Interactable>;\n    links: Array<IInteractableLink>;\n    selected?: Interactable;\n    linkSource?: Interactable;\n    linkTargetX?: number;\n    linkTargetY?: number;\n    createByDragPrototype?: Interactable;\n    windowInnerHeight: number;\n    windowInnerWidth: number;\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n    private stage: Konva.Stage | undefined;\n    private maxSensibleDropY = 0; // Set in render\n\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            interactables: props.simulator.interactables,\n            links: props.simulator.getLinks(),\n            selected: undefined,\n            linkSource: undefined,\n            windowInnerHeight: window.innerHeight,\n            windowInnerWidth: window.innerWidth\n        };\n\n        for (const i of this.props.simulator.interactables) {\n            i.onMoved(this.handleInteractableMoved);\n        }\n\n        this.props.simulator.onInteractableAdded( this.handleInteractableAdded );\n        this.props.simulator.onInteractableRemoved( this.handleInteractableRemoved );\n        this.props.simulator.onInteractablesReset( this.handleInteractablesReset );\n    }\n\n    handleInteractablesReset = (e: IEventArgsInteractablesReset): void => {\n        for (const i of e.oldInteractables) {\n            i.offMoved(this.handleInteractableMoved);\n        }\n\n        const links: Array<IInteractableLink> = [];\n        for (const i of this.props.simulator.interactables) {\n            i.onMoved(this.handleInteractableMoved);\n            for (const j of i.inputs) {\n                links.push({source: j, target: i});\n            }\n        }        \n\n        this.setState({\n            interactables: this.props.simulator.interactables,\n            selected: undefined,\n            links: links\n        });\n    }\n\n    handleInteractableAdded = (e: IEventArgsInteractableAdded): void => {\n        e.interactable.onMoved(this.handleInteractableMoved.bind(this));\n        this.setState({\n            interactables: this.props.simulator.interactables,\n            selected: e.interactable,\n        });\n    };\n\n    handleInteractableRemoved = (e: IEventArgsInteractableRemoved): void => {\n        e.interactable.offMoved(this.handleInteractableMoved.bind(this));\n        this.setState({\n            interactables: this.props.simulator.interactables,\n            selected: undefined,\n            links: this.state.links.filter(l => l.target !== e.interactable && l.source !== e.interactable)\n        });\n    };\n\n    handleInteractableMoved = (): void => {\n        this.setState({interactables: this.props.simulator.interactables});\n    }\n\n    public componentDidMount(): void {\n        if (!this.stage) {\n            throw new Error(\"stage was not set?\");\n        }\n\n        const container = this.stage.container();\n        container.tabIndex = 1;\n        container.focus();\n        container.addEventListener(\"keypress\", this.handleKeyPress);\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    handleResize = ():void => {\n        this.setState({\n            windowInnerWidth: window.innerWidth,\n            windowInnerHeight: window.innerHeight\n        });\n    }\n\n    handleKeyPress = (e: KeyboardEvent):void => {\n        const xy: Vector2d | null | undefined = this.stage?.getPointerPosition();\n        if (!xy) {\n            throw new Error(\"stage was not set?\");\n        }\n\n        if (e.key === \"g\") {\n            this.props.simulator.startRunning();\n        } else if (e.key === \"s\") {\n            this.props.simulator.stopRunning();\n        } else if (e.key === \"n\") {\n            this.props.simulator.advanceOne();\n        } else if (e.key === \"l\") {\n            const newInteractable = new Model.LogicGate({\n                kind: 'and',\n                x: xy.x,\n                y: xy.y,\n                savedState: false\n            });\n            this.props.simulator.add(newInteractable);\n        } else if (e.key === \"i\") {\n            const newInteractable = new Model.Input({\n                kind: 'input',\n                x: xy.x,\n                y: xy.y,\n                savedState: false\n            });\n            this.props.simulator.add(newInteractable);\n        } else if (e.key === \"t\") {\n            const newInteractable = new Model.Timer({\n                kind: 'timer',\n                x: xy.x,\n                y: xy.y,\n                tickStorage: new Array<boolean>(10).fill(false)\n            });\n            this.props.simulator.add(newInteractable);\n        } else if (e.key === '[' && this.state.selected) {\n            this.state.selected.twiddle(-1);\n        } else if (e.key === ']' && this.state.selected) {\n            this.state.selected.twiddle(1);\n        } else if (e.key === 'x' && this.state.selected) {\n            this.props.simulator.remove(this.state.selected);\n        } else if (e.key === '4') {\n            for (const i of this.state.interactables) {\n                i.reload();\n            }\n        } else if (e.key === '$') {\n            for (const i of this.state.interactables) {\n                i.putOnLift();\n            }\n        } else if (e.key === 'p' && this.state.selected) {\n            this.state.selected.paint();\n        }\n\n        console.debug(\"App.handleKeyPress(\" + e.key + \")\");\n    };\n\n    handleInteractableClicked(e: ViewModel.IEventArgsInteractable): void {\n        this.setState({\n            selected: e.model,\n        });\n    }\n\n    handleLinkStart(e: ViewModel.IEventArgsInteractable): void {\n        const model = e.model;\n        this.setState({\n            linkSource: model,\n            linkTargetX: e.evt.x,\n            linkTargetY: e.evt.y\n        })\n    }\n\n    handleMouseUpInStage(e: KonvaEventObject<MouseEvent>): void {\n        // This handles mouseUp events from the field, \n        if (this.state.linkSource) {\n            let target = undefined;\n            for (const i of this.state.interactables) {\n                // TODO: the Interactable viewmodel should decide the in-bounds calculation\n                if (i.x <= e.evt.x && e.evt.x < i.x+64\n                 && i.y <= e.evt.y && e.evt.y < i.y+64) {\n                     target = i;\n                     break;\n                 }\n            }\n\n            if (target && target !== this.state.linkSource && target.addInput(this.state.linkSource)) {\n                this.setState({links: this.props.simulator.getLinks(), linkSource: undefined, createByDragPrototype: undefined});\n            }\n        }\n        else if (this.state.createByDragPrototype && this.state.createByDragPrototype.y < this.maxSensibleDropY) {\n            this.props.simulator.add(this.state.createByDragPrototype);\n        }\n        this.setState({linkSource: undefined, createByDragPrototype: undefined});\n    }\n\n    handleMouseUpInInteractable(): void {\n        // TODO: Why am I here??\n        // // This handles mouseUp events from the field, \n        // if (this.state.linkSource) {\n        //     const source = this.state.linkSource;\n        //     const target = e.model;\n        //     this.setState({linkSource: undefined});\n        //     if (source !== target) {\n        //         const wasChanged = target.addInput(source);\n        //         this.setState({links: this.props.simulator.getLinks()});\n        //     }\n        // }\n        console.debug(\"App.handleMouseUpInInteractable\");\n    }\n\n    handleMouseMove(e: KonvaEventObject<MouseEvent>): void {\n        // console.debug(\"mouseMove: x=\" + e.evt.x + \" pageX=\" + e.evt.pageX + \" clientX=\" + e.evt.clientX + \" offsetX=\" + e.evt.offsetX + \" screenX=\" + e.evt.screenX + \" movementX=\" + e.evt.movementX);\n        if (this.state.linkSource) {\n            this.setState({\n                linkTargetX: e.evt.offsetX,\n                linkTargetY: e.evt.offsetY\n            })\n        }\n        else if (this.state.createByDragPrototype) {\n            this.state.createByDragPrototype.setPosition(e.evt.offsetX, e.evt.offsetY);\n\n            this.setState({ createByDragPrototype: this.state.createByDragPrototype });\n        }\n    }\n\n    handleMouseDown(e: KonvaEventObject<MouseEvent>): void {\n        if (!(e.target instanceof ViewModel.Interactable) && this.state.selected) {\n            this.setState({selected: undefined});\n        }\n    }\n\n    handleNewInteractableDrag(e: IDragNewInteractableDragEventArgs): void {\n        this.setState({\n            createByDragPrototype: e.prototype\n        })\n    }\n\n    private handleMouseLeave(): void {\n        this.setState({linkSource: undefined, createByDragPrototype: undefined});\n    }\n\n    getViewModelForModel(model: Model.Interactable, id: string): JSX.Element {\n        if (model instanceof Model.LogicGate) {\n            return (\n                <ViewModel.LogicGate\n                    model={model}\n                    key={id}\n                    isSelected={model === this.state.selected}\n                    onMouseUp={this.handleMouseUpInInteractable.bind(this)}\n                    onLinkStart={this.handleLinkStart.bind(this)}\n                    onClick={this.handleInteractableClicked.bind(this)}\n                />\n            );\n        }\n        else if (model instanceof Model.Input) {\n                return <ViewModel.Input\n                    model={model}\n                    key={id}\n                    isSelected={model === this.state.selected}\n                    onMouseUp={this.handleMouseUpInInteractable.bind(this)}\n                    onLinkStart={this.handleLinkStart.bind(this)}\n                    onClick={this.handleInteractableClicked.bind(this)}/>\n        }\n        else if (model instanceof Model.Timer) {\n            return <ViewModel.Timer\n                model={model}\n                key={id}\n                isSelected={model === this.state.selected}\n                onMouseUp={this.handleMouseUpInInteractable.bind(this)}\n                onLinkStart={this.handleLinkStart.bind(this)}\n                onClick={this.handleInteractableClicked.bind(this)}/>\n        }\n        else {\n            throw new Error(\"unexpected model object type\");\n        }\n    }\n\n    render(): JSX.Element {\n        let pointer: Array<JSX.Element> | JSX.Element = [];\n        const hSpaceBetweenButtons = 15; // the horizontal between each button (and the edges)\n        const vSpaceBetweenButtons = 8;\n        const buttonWidth = 64;\n        const buttonHeight = 64;\n        const maximumButtonsPerRow = 9;\n        const canvasHeight = window.innerHeight*.9;\n        const canvasWidth = window.innerWidth-17; // Would love to know where the 17 comes from...\n        const numRows = canvasWidth < hSpaceBetweenButtons + 2*maximumButtonsPerRow*(buttonWidth+hSpaceBetweenButtons) ? 2 : 1;\n        const buttonRowHeight = numRows*(buttonWidth+vSpaceBetweenButtons) + vSpaceBetweenButtons;\n        const buttonRowY = (n: number) => canvasHeight - buttonRowHeight + vSpaceBetweenButtons + (n >= maximumButtonsPerRow && numRows > 1 ? (vSpaceBetweenButtons + buttonHeight) : 0);\n        const buttonRowX = (n: number) => hSpaceBetweenButtons + (hSpaceBetweenButtons + buttonWidth) * (n >= maximumButtonsPerRow && numRows > 1 ? n - maximumButtonsPerRow : n);\n\n        this.maxSensibleDropY = buttonRowY(0)-32;\n\n        if (this.state.linkSource) {\n            pointer = <Arrow\n                x={this.state.linkSource.x+32}\n                y={this.state.linkSource.y+32}\n                points={[0,0, this.state.linkTargetX!-(this.state.linkSource.x+32), this.state.linkTargetY!-(this.state.linkSource.y+32)]}\n                fill='lightgrey'\n                stroke='lightgrey'\n                strokeWidth={4}\n                pointerLength={10}\n                pointerWidth={10}/>;\n        }\n        return (\n            <Stage\n                width={canvasWidth-4}\n                height={canvasHeight}\n                ref={(c: Konva.Stage) => {this.stage = c;}}\n                onMouseUp={this.handleMouseUpInStage.bind(this)}\n                onMouseMove={this.handleMouseMove.bind(this)}\n                onMouseLeave={this.handleMouseLeave.bind(this)}\n            >\n                <Layer>\n                    <Rect id='background' x={0} y={0} width={canvasWidth} height={canvasHeight - buttonRowHeight} onMouseDown={this.handleMouseDown.bind(this)} strokeWidth={0} fill='GhostWhite' />\n                    <TC.TickCounter simulator={this.props.simulator} right={canvasWidth - 20} top={5} />\n                    {this.state.interactables.map((model: Interactable, index: number) =>\n                        this.getViewModelForModel(model, index.toString())\n                    )}\n                    {this.state.createByDragPrototype\n                        ? this.getViewModelForModel(this.state.createByDragPrototype, 'dragproto')\n                        : []}\n                    {pointer}\n                    {this.state.links.map((link: IInteractableLink, index:number) => <ViewModel.LinkArrow key={index} source={link.source} target={link.target}/>)}\n                </Layer>\n                <Layer>\n                    <Rect x={0} y={canvasHeight-buttonRowHeight} height={buttonRowHeight} width={canvasWidth} fill='papayawhip' />\n                    <Line points={[0, canvasHeight-buttonRowHeight, canvasWidth, canvasHeight-buttonRowHeight]} stroke='grey' strokeWidth={3}/>\n                    <LogicGateButton x={buttonRowX(0)} y={buttonRowY(0)} selected={this.state.selected} kind='and' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\n                    <LogicGateButton x={buttonRowX(1)} y={buttonRowY(1)} selected={this.state.selected} kind='or' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\n                    <LogicGateButton x={buttonRowX(2)} y={buttonRowY(2)} selected={this.state.selected} kind='xor' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\n                    <LogicGateButton x={buttonRowX(3)} y={buttonRowY(3)} selected={this.state.selected} kind='nand' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\n                    <LogicGateButton x={buttonRowX(4)} y={buttonRowY(4)} selected={this.state.selected} kind='nor' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\n                    <LogicGateButton x={buttonRowX(5)} y={buttonRowY(5)} selected={this.state.selected} kind='xnor' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\n                    <LogicGateButton x={buttonRowX(6)} y={buttonRowY(6)} selected={this.state.selected} kind='input' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\n                    <LogicGateButton x={buttonRowX(7)} y={buttonRowY(7)} selected={this.state.selected} kind='timer' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\n                    <DeleteButton x={buttonRowX(8)} y={buttonRowY(8)} simulator={this.props.simulator} selected={this.state.selected}/>\n                    <StartStopButton x={buttonRowX(9)} y={buttonRowY(9)} model={this.props.simulator}/>\n                    <SingleStepButton x={buttonRowX(10)} y={buttonRowY(10)} model={this.props.simulator}/>\n                    <ReloadButton x={buttonRowX(11)} y={buttonRowY(11)} simulator={this.props.simulator}/>\n                    <PaintButton x={buttonRowX(12)} y={buttonRowY(12)} selected={this.state.selected}/>\n                    <PutOnLiftButton x={buttonRowX(13)} y={buttonRowY(13)} simulator={this.props.simulator}/>\n                    <TakeOffLiftButton x={buttonRowX(14)} y={buttonRowY(14)} simulator={this.props.simulator}/>\n                    <CopyLinkButton x={buttonRowX(15)} y={buttonRowY(15)} simulator={this.props.simulator}/>\n                    <LoadFromFileButton x={buttonRowX(16)} y={buttonRowY(16)} simulator={this.props.simulator}/>\n                    <SaveToFileButton x={buttonRowX(17)} y={buttonRowY(17)} simulator={this.props.simulator}/>\n                </Layer>\n            </Stage>\n        );\n    }\n}\n\nexport function makeItSo(): void {\n    // TODO - get rid of this.  One way to go would be to find a way to convert all the PNG's to SVG's.\n    const queryString: string | undefined = window.location.search;\n    let serialized: ISerializedSimulator | undefined = undefined;\n    if (queryString) {\n        serialized = Simulator.decompressQueryStringFragment(queryString);\n    }\n\n    ViewModel.loadAssets(() => {\n        render(<App simulator={new Simulator(serialized)} />, document.getElementById(\"root\"));\n    });\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport {makeItSo} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconsole.debug(\"In index\");\nmakeItSo();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { EventEmitter } from 'events';\r\n\r\nexport interface ISerializedInteractable {\r\n    x: number;\r\n    y: number;\r\n    kind: LogicGateTypes | 'input' | 'timer';\r\n}\r\n\r\nexport interface IEventArgsInteractable {\r\n    source: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractableMoved extends IEventArgsInteractable {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport class Interactable {\r\n    private _x: number;\r\n    private _y: number;\r\n    private readonly events: EventEmitter;\r\n    private _inputs: Array<Interactable>;\r\n\r\n    private _prevState: boolean;\r\n    private _currentState: boolean;\r\n\r\n    constructor(props: ISerializedInteractable) {\r\n        this.events = new EventEmitter();\r\n        this._prevState = false;\r\n        this._currentState = false;\r\n        this._inputs = [];\r\n        this._x = props.x;\r\n        this._y = props.y;\r\n    }\r\n\r\n    static deserialize(serialized: ISerializedInteractable): Interactable {\r\n        switch (serialized.kind) {\r\n            case 'input':\r\n                return new Input(serialized as ISerializedInput);\r\n            case 'timer':\r\n                return new Timer(serialized as ISerializedTimer);\r\n            default:\r\n                return new LogicGate(serialized as ISerializedLogicGate);\r\n        }\r\n    }\r\n\r\n    public getPosition(): { x: number, y: number } {\r\n        return { x: this._x, y: this._y };\r\n    }\r\n\r\n    public get x(): number { return this._x; }\r\n    public get y(): number { return this._y; }\r\n\r\n    public setPosition(x: number, y: number): void {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._emitMoved(x, y);\r\n    }\r\n\r\n    public get currentState(): boolean { return this._currentState; }\r\n\r\n    protected setCurrentState(newValue: boolean): void {\r\n        if (this._currentState !== newValue) {\r\n            this._currentState = newValue;\r\n            this._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public get prevState(): boolean { return this._prevState; }\r\n    protected setPrevState(newValue: boolean): void {\r\n        if (this._prevState !== newValue) {\r\n            this._prevState = newValue;\r\n            this._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public export(): ISerializedInteractable {\r\n        return {\r\n            x: this._x,\r\n            y: this._y,\r\n            kind: 'input'\r\n        }\r\n    }\r\n\r\n    addInput(newInput: Interactable): boolean {\r\n        if (this.inputLimit === 0) {\r\n            // Can't draw a connection *to* an input.\r\n            return false;\r\n        }\r\n\r\n        const existingIndex: number = this.inputs.indexOf(newInput);\r\n        if (existingIndex >= 0) {\r\n            // if the connection is already there - undo it\r\n            this._inputs.splice(existingIndex, 1);\r\n        } else {\r\n            // If the connection already goes the other way, reverse it (this part just deletes the old arrow)\r\n            const indexInTarget: number = newInput.inputs.indexOf(this);\r\n            if (indexInTarget >= 0) {\r\n                newInput._inputs.splice(indexInTarget, 1);\r\n                newInput.calculate();\r\n            }\r\n\r\n            // If we allow only one input and we already have an input, toss it.\r\n            if (this.inputLimit === 1) {\r\n                this._inputs = [];\r\n            }\r\n\r\n            // Add the new link\r\n            this._inputs.push(newInput);\r\n        }\r\n\r\n        this.calculate();\r\n        this.paint();\r\n        newInput.paint();\r\n        return true;\r\n    }\r\n\r\n    removeInput(deadInput: Interactable): boolean {\r\n        const index: number = this.inputs.indexOf(deadInput);\r\n        if (index < 0) {\r\n            return false;\r\n        } else {\r\n            this._inputs.splice(index, 1);\r\n            this.calculate();\r\n            this.paint();\r\n            return true;\r\n        }\r\n    }\r\n\r\n    get inputs(): Array<Interactable> {\r\n        return [...this._inputs];\r\n    }\r\n\r\n    setInputs(inputs: Array<Interactable>): void {\r\n        this._inputs = [...inputs];\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    twiddle(_direction: -1 | 1): void {\r\n        // No actio for twiddle in a timer.\r\n    }\r\n\r\n    /** Causes the calculated state to become the state that other interactables will see. */\r\n    public apply(): void {\r\n        this.setPrevState(this.currentState);\r\n    }\r\n\r\n    /** Sets currentState based on the previous state of its inputs. */\r\n    public calculate(): void {/* no action */}\r\n\r\n    public reload(): void {/* no action */}\r\n\r\n    public putOnLift(): void {/* no action */}\r\n\r\n    public paint(): void {/* no action */}\r\n\r\n    public onMoved(handler: (eventArgs: IEventArgsInteractableMoved) => void): void {\r\n        this.events.on('moved', handler);\r\n    }\r\n\r\n    public offMoved(handler: (eventArgs: IEventArgsInteractableMoved) => void): void {\r\n        this.events.off('moved', handler);\r\n    }\r\n\r\n    public onStateChanged(handler: (eventArgs: IEventArgsInteractable) => void): void {\r\n        this.events.on('stateChanged', handler);\r\n    }\r\n\r\n    public offStateChanged(handler: (eventArgs: IEventArgsInteractable) => void): void {\r\n        this.events.off('stateChanged', handler);\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 'unlimited';\r\n    }\r\n\r\n    protected _emitMoved(x: number, y: number): void {\r\n        this.events.emit('moved', { source: this, x, y } as IEventArgsInteractableMoved);\r\n    }\r\n\r\n    protected _emitStateChanged(): void {\r\n        this.events.emit('stateChanged', { source: this } as IEventArgsInteractable);\r\n    }\r\n}\r\n\r\nexport interface ISerializedInteractableWithSingleBitSavedState extends ISerializedInteractable {\r\n    savedState: boolean;\r\n}\r\n\r\n\r\nexport class InteractableWithSingleBitSavedState extends Interactable {\r\n    private _savedState: boolean;\r\n\r\n    constructor(props: ISerializedInteractableWithSingleBitSavedState) {\r\n        super(props);\r\n\r\n        this._savedState = props.savedState;\r\n    }\r\n\r\n    public export(): ISerializedInteractableWithSingleBitSavedState {\r\n        return {\r\n            ...super.export(),\r\n            savedState: this._savedState\r\n        };\r\n    }\r\n\r\n    public get savedState(): boolean {\r\n        return this._savedState;\r\n    }\r\n\r\n    public paint(): void {\r\n        if (this._savedState !== this.currentState) {\r\n            this._savedState = this.currentState;\r\n            super._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public reload(): void {\r\n        this.setCurrentState(this.savedState);\r\n        this.setPrevState(false);\r\n    }\r\n}\r\n\r\nexport type LogicGateTypes = 'and' | 'or' | 'xor' | 'nand' | 'nor' | 'xnor';\r\n\r\nconst LogicGateKindSequence: Array<LogicGateTypes> = ['and', 'or', 'xor', 'nand', 'nor', 'xnor'];\r\n\r\nexport type ISerializedLogicGate = ISerializedInteractableWithSingleBitSavedState\r\n\r\nexport class LogicGate extends InteractableWithSingleBitSavedState {\r\n    private _kind: LogicGateTypes;\r\n\r\n    constructor(props: ISerializedLogicGate) {\r\n        super(props);\r\n        if (props.kind === 'timer' || props.kind === 'input') {\r\n            throw new Error(\"Caller should prevent this\");\r\n        }\r\n\r\n        this._kind = props.kind;\r\n    }\r\n\r\n    public get kind(): LogicGateTypes {\r\n        return this._kind;\r\n    }\r\n\r\n    public set kind(newValue: LogicGateTypes) {\r\n        this._kind = newValue;\r\n        this._emitStateChanged();\r\n        this.paint();\r\n    }\r\n\r\n    public twiddle(direction: -1 | 1): void {\r\n        let index = LogicGateKindSequence.indexOf(this._kind);\r\n        index = index + direction;\r\n        if (index < 0) {\r\n            index += LogicGateKindSequence.length;\r\n        }\r\n        else if (index >= LogicGateKindSequence.length) {\r\n            index -= LogicGateKindSequence.length;\r\n        }\r\n\r\n        this.kind = LogicGateKindSequence[index];\r\n        this.calculate();\r\n        this.paint();\r\n    }\r\n\r\n    public calculate(): void {\r\n        // This becomes the sum of all the inputs where the previous state is true\r\n        const numActivatedInputs = this.inputs.reduce((a, b) => a + (b.prevState ? 1 : 0), 0);\r\n        let calculatedState: boolean;\r\n        switch(this.kind) {\r\n            case 'and':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs === this.inputs.length;\r\n                break;\r\n            case 'or':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs > 0;\r\n                break;\r\n            case 'xor':\r\n                calculatedState = numActivatedInputs % 2 === 1;\r\n                break;\r\n            case 'nand':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs !== this.inputs.length;\r\n                break;\r\n            case 'nor':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs === 0;\r\n                break;\r\n            case 'xnor':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs % 2 === 0;\r\n                break;\r\n        }\r\n        this.setCurrentState(calculatedState);\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        this.setCurrentState(this.inputs.length > 0 && (this.kind === 'nand' || this.kind === 'nor' || this.kind === 'xnor'));\r\n        this.setPrevState(false);\r\n        this.paint();\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 'unlimited';\r\n    }\r\n\r\n    export(): ISerializedLogicGate {\r\n        return {\r\n            ...super.export(),\r\n            kind: this._kind\r\n        };\r\n    }\r\n}\r\n\r\nexport type ISerializedInput = ISerializedInteractableWithSingleBitSavedState;\r\n\r\nexport class Input extends InteractableWithSingleBitSavedState {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    twiddle(_direction: -1 | 1): void {\r\n        this.setCurrentState(!this.currentState);\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 0;\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        this.setCurrentState(false);\r\n        this.setPrevState(false);\r\n        this.paint();\r\n    }\r\n}\r\n\r\ninterface ISerializedTimer extends ISerializedInteractable {\r\n    tickStorage: Array<boolean>;\r\n}\r\n\r\nexport class Timer extends Interactable {\r\n    private readonly _tickStorage: Array<boolean>;\r\n\r\n    public constructor(serialized: ISerializedTimer) {\r\n        super(serialized);\r\n        this._tickStorage = [ ...serialized.tickStorage ];\r\n    }\r\n\r\n    public get tickStorage(): Array<boolean> {\r\n        return [...this._tickStorage];\r\n    }\r\n\r\n    public export(): ISerializedTimer {\r\n        return {\r\n            ...super.export(),\r\n            kind: 'timer',\r\n            tickStorage: this._tickStorage,\r\n        };\r\n    }\r\n\r\n    public calculate(): void {\r\n        this.setCurrentState(this._tickStorage[this._tickStorage.length-1]);\r\n        this._tickStorage[0] = this.inputs.length > 0 && this.inputs[0].prevState;\r\n    }\r\n\r\n    public apply(): void {\r\n        this.setPrevState(this.currentState);\r\n        // Advance everything in the array\r\n        for (let i = 0; i < this._tickStorage.length-1; ++i) {\r\n            this._tickStorage[this._tickStorage.length-1-i] = this._tickStorage[this._tickStorage.length-2-i];\r\n        }\r\n        this.setCurrentState(this._tickStorage[this._tickStorage.length]);\r\n        // tickStorage[0] will be set by calculate - it's not possible to set it here because\r\n        // it has to come from its input, which hasn't finished its apply cycle yet.\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 1;\r\n    }\r\n}\r\n\r\n","import { EventEmitter } from 'events';\r\nimport pako from 'pako';\r\nimport { Interactable, ISerializedInteractable } from './Model';\r\n\r\n\r\nexport interface IEventArgsSimulator {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport interface IEventArgsTick extends IEventArgsSimulator {\r\n    tick: number;\r\n}\r\n\r\nexport interface IEventArgsInteractableAdded extends IEventArgsSimulator {\r\n    interactable: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractableRemoved extends IEventArgsSimulator {\r\n    interactable: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractablesReset extends IEventArgsSimulator {\r\n    oldInteractables: Array<Interactable>;\r\n}\r\n\r\nexport interface IEventArgsSimulatorRunStateChanged extends IEventArgsSimulator {\r\n    newRunState: boolean;\r\n}\r\n\r\nexport interface IInteractableLink {\r\n    source: Interactable;\r\n    target: Interactable;\r\n}\r\n\r\nexport interface ISerializedSimulator {\r\n    interactables: Array<ISerializedInteractable>;\r\n    links: Array<{source: number, target: number}>;\r\n}\r\n\r\nexport class Simulator {\r\n    private _nextTickTimeoutId: NodeJS.Timeout | undefined;\r\n    private _pauseInterval: number;\r\n    private readonly _events: EventEmitter;\r\n\r\n    public currentTick: number; // TODO: make it readonly to outside callers\r\n    public isRunning: boolean; // TODO: make it readonly to outside callers\r\n    public interactables: Array<Interactable>;\r\n\r\n    constructor(serialized?: ISerializedSimulator | undefined) {\r\n        this._events = new EventEmitter();\r\n        this.currentTick = 0;\r\n        this.isRunning = false;\r\n        this._nextTickTimeoutId = undefined;\r\n        this._pauseInterval = 250;\r\n        this.interactables = [];\r\n        if (serialized) {\r\n            this.load(serialized);\r\n        }\r\n    }\r\n\r\n    public serialize(): ISerializedSimulator {\r\n        const links: Array<IInteractableLink> = this.getLinks();\r\n        return {\r\n            interactables: this.interactables.map(i => i.export()),\r\n            links: links.map(i => { return {\r\n                source: this.interactables.indexOf(i.source),\r\n                target: this.interactables.indexOf(i.target)\r\n            }})\r\n        }\r\n    }\r\n\r\n    public load(serialized: ISerializedSimulator): void {\r\n        const oldInteractables = this.interactables;\r\n        this.interactables = serialized.interactables.map(i => Interactable.deserialize(i));\r\n        const interactablesInputs = new Array<Array<Interactable>>(this.interactables.length);\r\n        for (let i = 0; i < this.interactables.length; ++i) {\r\n            interactablesInputs[i] = new Array<Interactable>();\r\n        }\r\n        for (const pair of serialized.links) {\r\n            interactablesInputs[pair.target].push(this.interactables[pair.source]);\r\n        }\r\n        for (let i = 0; i < this.interactables.length; ++i) {\r\n            this.interactables[i].setInputs(interactablesInputs[i]);\r\n        }\r\n\r\n        this._emitInteractablesReset( { simulator: this, oldInteractables: oldInteractables });\r\n\r\n        this.stopRunning();\r\n    }\r\n\r\n    public gameReload(): void {\r\n        for (const i of this.interactables) {\r\n            i.reload();\r\n        }\r\n\r\n        this.currentTick = 0;\r\n        this._emitTick();\r\n    }\r\n\r\n    public serializeToCompressedQueryStringFragment(): string {\r\n        const jsonSerialized: string = JSON.stringify(this.serialize());\r\n        const compressed: Uint8Array = pako.deflate(jsonSerialized);\r\n        const sharableString: string = Buffer.from(compressed).toString('base64');\r\n        return encodeURIComponent(sharableString);\r\n    }\r\n\r\n    public static decompressQueryStringFragment(queryString: string): ISerializedSimulator {\r\n        const base64: string = decodeURIComponent(queryString);\r\n        const compressedData: Uint8Array = Buffer.from(base64, 'base64');\r\n\r\n        const serializedString: string = pako.inflate(compressedData, { to: 'string' });\r\n        return JSON.parse(serializedString);\r\n    }\r\n\r\n    public startRunning(): void {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this._nextTickTimeoutId = setTimeout(this._handleTickTimeout.bind(this), this._pauseInterval);\r\n\r\n        this._events.emit('runStateChanged', { simulator: this, newRunState: this.isRunning });\r\n    }\r\n\r\n    public stopRunning(): void {\r\n        if (!this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this.isRunning = false;\r\n        if (this._nextTickTimeoutId) {\r\n            clearTimeout(this._nextTickTimeoutId);\r\n        }\r\n\r\n        this._nextTickTimeoutId = undefined;\r\n\r\n        this._events.emit('runStateChanged', { simulator: this, newRunState: this.isRunning });\r\n    }\r\n\r\n    public advanceOne(): void {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this._advanceOne();\r\n    }\r\n\r\n    public add(interactable: Interactable): void {\r\n        this.interactables.push(interactable);\r\n        this._events.emit(EventNames.interactableAdded, { simulator: this, interactable: interactable } as IEventArgsInteractableAdded);\r\n    }\r\n\r\n    public remove(interactable: Interactable): boolean {\r\n        let didRemove = false;\r\n        for (let i = this.interactables.length-1; i >= 0; --i) {\r\n            if (this.interactables[i] === interactable) {\r\n                didRemove = true;\r\n                this.interactables.splice(i ,1);\r\n            }\r\n        }\r\n        for (const i of this.interactables) {\r\n            i.removeInput(interactable);\r\n        }\r\n\r\n        if (didRemove)\r\n        {\r\n            this._events.emit(EventNames.interactableRemoved, { simulator: this, interactable: interactable } as IEventArgsInteractableRemoved);\r\n        }\r\n\r\n        return didRemove;\r\n    }\r\n\r\n    public getLinks(): Array<IInteractableLink> {\r\n        return this.interactables\r\n            .map(target => target.inputs\r\n                .map(function(source) {return {source: source, target: target}}))\r\n            .reduce((a,b) => a.concat(b), []);\r\n    }\r\n\r\n    private _advanceOne(): void {\r\n        ++this.currentTick;\r\n        this._emitTick();\r\n\r\n        for (const i of this.interactables) {\r\n            i.apply();\r\n        }\r\n        for (const i of this.interactables) {\r\n            i.calculate();\r\n        }\r\n    }\r\n\r\n    public onTick(handler: (eventArgs: IEventArgsTick) => void): void {\r\n        this._events.on(EventNames.tick, handler);\r\n    }\r\n\r\n    public offTick(handler: (eventArgs: IEventArgsTick) => void): void {\r\n        this._events.off(EventNames.tick, handler);\r\n    }\r\n\r\n    private _emitTick() {\r\n        this._events.emit(EventNames.tick, { simulator: this, tick: this.currentTick } as IEventArgsTick);\r\n    }\r\n\r\n    public onInteractableAdded(handler: (EventTarget: IEventArgsInteractableAdded) => void): void {\r\n        this._events.on(EventNames.interactableAdded, handler);\r\n    }\r\n\r\n    public offInteractableAdded(handler: (EventTarget: IEventArgsInteractableAdded) => void): void {\r\n        this._events.off(EventNames.interactableAdded, handler);\r\n    }\r\n\r\n    public onInteractableRemoved(handler: (EventTarget: IEventArgsInteractableRemoved) => void): void {\r\n        this._events.on(EventNames.interactableRemoved, handler);\r\n    }\r\n\r\n    public offInteractableRemoved(handler: (EventTarget: IEventArgsInteractableRemoved) => void): void {\r\n        this._events.off(EventNames.interactableRemoved, handler);\r\n    }\r\n\r\n    public onRunStateChanged(handler: (EventTarget: IEventArgsSimulatorRunStateChanged) => void): void {\r\n        this._events.on('runStateChanged', handler);\r\n    }\r\n\r\n    public offRunStateChanged(handler: (EventTarget: IEventArgsSimulatorRunStateChanged) => void): void {\r\n        this._events.off('runStateChanged', handler);\r\n    }\r\n\r\n    public onInteractablesReset(handler: (EventTarget: IEventArgsInteractablesReset) => void): void {\r\n        this._events.on('interactablesReset', handler);\r\n    }\r\n\r\n    public offInteractablesReset(handler: (EventTarget: IEventArgsInteractablesReset) => void): void {\r\n        this._events.off('interactablesReset', handler);\r\n    }\r\n\r\n    private _emitInteractablesReset(eventArgs: IEventArgsInteractablesReset )\r\n    {\r\n        this._events.emit('interactablesReset', eventArgs);\r\n    }\r\n\r\n    private _handleTickTimeout(): void {\r\n        this._advanceOne();\r\n        this._nextTickTimeoutId = setTimeout(this._handleTickTimeout.bind(this), this._pauseInterval);\r\n    }\r\n}\r\n\r\nconst EventNames = {\r\n    // This is emitted whenever the clock is actually advanced.  State calculated in\r\n    // 'pretick' should now become the current state.\r\n    tick: 'tick',\r\n\r\n    // A new component has been added to the model (argument is the new item)\r\n    interactableAdded: 'interactableAdded',\r\n\r\n    // A component has been removed from the model (argument is the removed item)\r\n    interactableRemoved: 'interactableRemoved',\r\n};\r\n"],"sourceRoot":""}