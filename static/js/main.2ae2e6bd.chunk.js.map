{"version":3,"sources":["TickCounter.tsx","ViewModel.tsx","FloatingErrorMessage.tsx","Buttons.tsx","App.tsx","reportWebVitals.ts","index.ts","Model.ts","Simulator.ts"],"names":["TickCounter","props","textRef","lastWidthUsed","_handleTick","text","simulator","currentTick","toString","width","x","right","state","this","onTick","offTick","y","top","ref","t","fill","fontSize","React","_assets","Interactable","attachedModel","group","handleStateChanged","setState","model","onStateChanged","console","debug","constructor","name","offStateChanged","undefined","eventArgs","onClick","evt","e","shiftKey","Error","stopDrag","onLinkStart","onMouseUp","onMoveCompleted","pos","target","absolutePosition","setPosition","handleOnClick","bind","vonMouseUp","handleOnMouseUp","c","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","groupContent","height","strokeWidth","stroke","isSelected","currentState","Component","InteractableWithSingleBitSavedState","Model","concat","points","savedState","closed","LogicGate","image","kind","Input","radius","Timer","rectHeight","tickStorage","length","map","value","index","drawingWidth","drawingHeight","LinkArrow","_handleStateChanged","source","sourceX","sourceY","targetX","targetY","Math","abs","sign","yTrim","xTrim","prevState","pointerLength","pointerWidth","timeout","show","message","error","document","getElementById","innerText","classList","add","clearTimeout","setTimeout","remove","pressedScalingFactor","ToolBarButton","timeoutHandle","toolTipId","_handleTimeout","element","style","visibility","clientHeight","left","buttonWidth","clientWidth","_handleMouseEnter","isHovering","startToolTipTimer","_handleMouseLeave","isPressed","offsetY","clearToolTipTimer","_handleMouseDown","_handleMouseUp","handleClick","buttonHeight","onMouseEnter","onMouseLeave","onMouseDown","scaleX","scaleY","getContent","isEnabled","StartStopButton","isRunning","onRunStateChanged","handleRunStateChanged","lineCap","stopRunning","startRunning","SingleStepButton","advanceOne","LogicGateButton","prototype","offsetX","Array","onBeginDrag","event","ViewModel","selected","twiddle","FloatingErrorMessage","PaintButton","paint","PutOnLiftButton","putOnLift","TakeOffLiftButton","takeOffLift","DeleteButton","CopyLinkButton","navigator","clipboard","alert","url","window","location","origin","pathname","serializeToCompressedQueryStringFragment","writeText","SaveToFileButton","file","File","JSON","stringify","serialize","type","FileSaver","saveAs","LoadFromFileButton","fileInputElement","fileElem","addEventListener","handleFileGiven","click","files","reader","FileReader","onload","jsonContent","fileContents","result","parse","err","load","readAsText","ReloadButton","gameReload","App","stage","maxSensibleDropY","maxSensibleDropX","considerResizeOnNextRender","handleInteractablesReset","oldInteractables","offMoved","handleInteractableMoved","links","interactables","i","onMoved","inputs","j","push","handleInteractableAdded","interactable","handleInteractableRemoved","filter","l","handleResize","windowInnerWidth","innerWidth","windowInnerHeight","innerHeight","handleKeyPress","xy","getPointerPosition","key","newInteractable","handleMoveCompleted","getLinks","linkSource","onInteractableAdded","onInteractableRemoved","onInteractablesReset","container","tabIndex","focus","linkTargetX","linkTargetY","addInput","createByDragPrototype","id","handleLinkStart","handleInteractableClicked","pointer","canvasHeight","canvasWidth","numRows","hSpaceBetweenButtons","buttonRowHeight","buttonRowY","n","vSpaceBetweenButtons","buttonRowX","fitToSize","handleMouseUpInStage","onMouseMove","handleMouseMove","handleMouseLeave","handleMouseDown","getViewModelForModel","link","handleNewInteractableDrag","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryString","search","serialized","Simulator","decompressQueryStringFragment","onComplete","Konva","Image","fromURL","img","Object","keys","render","makeItSo","hasOwnProperty","obj","prop","deserializeInteractable","_x","_y","events","_inputs","_prevState","_currentState","EventEmitter","_emitMoved","newValue","_emitStateChanged","newInput","inputLimit","existingIndex","indexOf","splice","indexInTarget","calculate","deadInput","_direction","setPrevState","handler","on","off","emit","validateAndDeserializeInteractableWithSavedState","validateAndNormalizeInput","rawTickStorage","timerTickStorage","isArray","every","validateAndNormalizeTimer","deserializeLogicGate","defaultSavedState","_savedState","setCurrentState","LogicGateKindSequence","_kind","direction","calculatedState","numActivatedInputs","reduce","a","b","_tickStorage","_nextTickTimeoutId","_pauseInterval","_events","allInteractables","export","buildSerializedWithInputs","validateAndDeserialize","serializedInteractable","deserializedInteractable","serializedInputIndex","_emitInteractablesReset","padX","padY","maxX","previousValue","currentValue","max","maxY","minX","min","minY","newX","newY","reload","_emitTick","jsonSerialized","compressed","pako","deflate","sharableString","Buffer","from","encodeURIComponent","_handleTickTimeout","newRunState","_advanceOne","EventNames","interactableAdded","didRemove","removeInput","interactableRemoved","apply","tick","base64","decodeURIComponent","compressedData","serializedString","inflate","to"],"mappings":"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","file":"static/js/main.2ae2e6bd.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Simulator } from \"./Simulator\";\r\nimport { Text } from 'react-konva';\r\nimport Konva from 'konva';\r\n\r\nexport interface TickCounterProps {\r\n    simulator: Simulator;\r\n    right: number;\r\n    top: number;\r\n}\r\n\r\n/**\r\n * Implements the tick counter, the trickiest bit being that it wants to render it in the top-right.\r\n * This isn't done in a very react-like way because we need to set the 'x' position relative to the\r\n * width of the text, and we don't know the width of the text until the DOM renders it.  What we really\r\n * want, in any case, is a text element that's right-aligned, and that's just not in Konva as far as I\r\n * can see.  Probably because Konva can do it easily enough.  See the code in @see _handleTick.\r\n */\r\nexport class TickCounter extends React.Component<TickCounterProps> {\r\n    private textRef: Konva.Text | undefined;\r\n    private lastWidthUsed: number;\r\n\r\n    constructor(props: TickCounterProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTick: props.simulator.currentTick,\r\n        };\r\n\r\n        // This value really doesn't matter, if it's ever visible, it's for a blink and no more.\r\n        // The property itself is here to handle resize when the simulator is not ticking.\r\n        // In that case, props.right gets updated by React, causing a render to happen, but\r\n        // in that case, componentDidMount does not get called -- it only gets called once when\r\n        // the object gets first drawn, not every time it renders.\r\n        this.lastWidthUsed = 20;\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.simulator.onTick(this._handleTick);\r\n        this._handleTick();\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        this.props.simulator.offTick(this._handleTick);\r\n    }\r\n\r\n    private _handleTick = (): void => {\r\n        if (this.textRef) {\r\n            this.textRef.text(this.props.simulator.currentTick.toString());\r\n            this.lastWidthUsed = this.textRef.width();\r\n            this.textRef.x(this.props.right - this.textRef.width());\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Text y={this.props.top}\r\n                  x={this.props.right - this.lastWidthUsed}\r\n                  ref={(t: Konva.Text): void => { this.textRef = t; }}\r\n                  fill='red'\r\n                  fontSize={30}/>\r\n        );\r\n    }\r\n}\r\n","import Konva from 'konva';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport React from 'react';\r\nimport { Image, Group, Rect, Circle, Line, Arrow} from 'react-konva';\r\nimport * as Model from './Model';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const _assets: any = {};\r\n\r\n// https://www.cssscript.com/lightweight-context-menu-javascript-library-justcontext-js/\r\n// might automate the context menu for me.\r\n\r\nexport interface IEventArgsInteractable {\r\n    model: Model.Interactable;\r\n    evt: MouseEvent;\r\n}\r\n\r\ninterface IInteractableProps {\r\n    model: Model.Interactable;\r\n    onClick?: (eventArgs: IEventArgsInteractable) => void;\r\n    onLinkStart?: (eventArgs: IEventArgsInteractable) => void;\r\n    onMouseUp?: (eventArgs: IEventArgsInteractable) => void;\r\n    onMoveCompleted?: (eventArgs: IEventArgsInteractable) => void;\r\n    key: string;\r\n    isSelected: boolean;\r\n}\r\n\r\n// In somebody's mind, Record<string,never> is better than interface{}... Takes all kinds I guess.\r\n\r\ntype IInteractableState = Record<string,never>\r\n\r\nexport class Interactable<TProps extends IInteractableProps, TState extends IInteractableState> extends React.Component<TProps, TState> {\r\n    /**\r\n     * @summary This is the model (which we get from props) that was last attached to (listening for events, such\r\n     * as the state changing).  It has to be handled really carefully, at least if you want to abide by the rules\r\n     * set forth.  It generally reflects the state of the prop the last time the render() method was run.  Note that\r\n     * on the first render this is not set, and instead we wait for the componentDidMount event.  After that, it gets\r\n     * updated at render time.  The difference is because we can't accept any setState calls until the component is\r\n     * mounted.\r\n     * \r\n     * @see https://blog.bitsrc.io/react-16-lifecycle-methods-how-and-when-to-use-them-f4ad31fb2282\r\n     */\r\n    private attachedModel: Model.Interactable | undefined;\r\n\r\n    private group: Konva.Group | null | undefined;\r\n\r\n    public componentDidMount(): void {\r\n        // after this point, the model is drawn and is reacting to events.\r\n        if (!this.attachedModel) {\r\n            this.attachedModel = this.props.model;\r\n            this.attachedModel.onStateChanged(this.handleStateChanged);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        console.debug(\"componentDidUnmount(\"+this.constructor.name+\")\");\r\n        if (this.attachedModel) {\r\n            this.attachedModel.offStateChanged(this.handleStateChanged);\r\n            this.attachedModel = undefined;\r\n        }\r\n    }\r\n\r\n    private handleOnClick(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        if (this.props.onClick) {\r\n            this.props.onClick({\r\n                evt: eventArgs.evt,\r\n                model: this.props.model,\r\n            });\r\n        }\r\n    }\r\n\r\n    private handleStateChanged = (): void => {\r\n        this.setState({});\r\n    }\r\n\r\n    private handleDragStart(e: KonvaEventObject<MouseEvent>): void {\r\n        // The gesture for dragging is left mouse button, and there seems no way to\r\n        // argue with Konva about it, except this.  We want to use left-mouse-button\r\n        // dragging to move a pointer, so if we see the shift key is not down, we\r\n        // cancel the drag and tell our parent about the link-start event.  We can't\r\n        // help anymore from here, as we don't get useful events.\r\n        if (!e.evt.shiftKey) {\r\n            if (!this.group) {\r\n                throw new Error('group did not get set in render');\r\n            }\r\n\r\n            this.group.stopDrag();\r\n\r\n            if (this.props.onLinkStart) {\r\n                this.props.onLinkStart({\r\n                    evt: e.evt,\r\n                    model: this.props.model\r\n                });\r\n            }\r\n        }\r\n        // Else it's a real drag event, let that go.\r\n    }\r\n\r\n    private handleOnMouseUp(e: KonvaEventObject<MouseEvent>): void {\r\n        if (this.props.onMouseUp) {\r\n            this.props.onMouseUp({\r\n                evt: e.evt,\r\n                model: this.props.model\r\n            });\r\n        }\r\n    }\r\n\r\n    private handleDragEnd(e: KonvaEventObject<MouseEvent>): void {\r\n        if (this.props.onMoveCompleted) {\r\n            this.props.onMoveCompleted({ evt: e.evt, model: this.props.model});\r\n        }\r\n    }\r\n\r\n    private handleDragMove(e: KonvaEventObject<MouseEvent>) {\r\n        // The documentation gives no clue at all how to do this.  But there's a comment later:\r\n        // var scale = stage.scaleX();\r\n        // var new_pos = event.target.absolutePosition();\r\n        // new_pos.x = (new_pos.x - stage.x()) / scale;\r\n        // new_pos.y = (new_pos.y - stage.y()) / scale;\r\n        // draggedNode.move_to(new_pos);\r\n        //\r\n        // Gonna assume the stage isn't scaled.  (And might you be subject to the layer being scaled as well?)\r\n\r\n        const pos = e.target.absolutePosition();\r\n        this.props.model.setPosition(pos.x, pos.y);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.props.model !== this.attachedModel && this.attachedModel !== undefined) {\r\n            // the property has changed and this isn't the first time we're redering (so the DOM exists)\r\n            this.attachedModel.offStateChanged(this.handleStateChanged);\r\n            this.attachedModel = this.props.model;\r\n            this.attachedModel.onStateChanged(this.handleStateChanged);\r\n        }\r\n\r\n        // onContextMenu={this.handleContextMenu}\r\n        return <Group onClick={this.handleOnClick.bind(this)}\r\n                      vonMouseUp={this.handleOnMouseUp.bind(this)}\r\n                      ref={(c) => this.group = c}\r\n                      draggable\r\n                      x={this.props.model.x}\r\n                      y={this.props.model.y}\r\n                      onDragStart={this.handleDragStart.bind(this)}\r\n                      onDragMove={this.handleDragMove.bind(this)}\r\n                      onDragEnd={this.handleDragEnd.bind(this)}>\r\n                {this.groupContent()}\r\n            </Group>\r\n    }\r\n\r\n    protected groupContent(): Array<JSX.Element> {\r\n        return [<Rect key='surround' height={64} width={64} strokeWidth={3} stroke={this.props.isSelected ? 'green' : 'blue'} fill={this.props.model.currentState ? 'white' : 'grey'} />]\r\n    }\r\n}\r\n\r\nexport class InteractableWithSingleBitSavedState<TProps extends IInteractableProps, TState extends IInteractableState> extends Interactable<TProps, TState> {\r\n    protected groupContent(): Array<JSX.Element> {\r\n        if (this.props.model instanceof Model.InteractableWithSingleBitSavedState) {\r\n            const size=16;\r\n            return super.groupContent()\r\n                .concat(\r\n                <Line key='saveStateIndicator'\r\n                      points={[63-size, 0, 63, 0, 63, size]}\r\n                      fill={this.props.model.savedState ? 'blue' : 'transparent'}\r\n                      stroke='blue'\r\n                      strokeWidth={3}\r\n                      closed={true} />);\r\n        }\r\n        else {\r\n            return super.groupContent();\r\n        }\r\n    }\r\n}\r\n\r\ninterface ILogicGateProps extends IInteractableProps {\r\n    model: Model.LogicGate;\r\n}\r\n\r\nexport class LogicGate extends InteractableWithSingleBitSavedState<ILogicGateProps, IInteractableState> {\r\n    constructor(props: ILogicGateProps) {\r\n        super(props);\r\n        console.debug(\"constructor(LogicGate)\");\r\n    }\r\n\r\n    protected groupContent(): Array<JSX.Element> {\r\n        return super.groupContent().concat([\r\n            <Image key='image' x={0} y={0} image={_assets[this.props.model.kind].image()} />]);\r\n    }\r\n}\r\n\r\ninterface IInputProps extends IInteractableProps {\r\n    model: Model.Input;\r\n}\r\n\r\nexport class Input extends InteractableWithSingleBitSavedState<IInputProps, IInteractableState> {\r\n    constructor(props: IInputProps) {\r\n        super(props);\r\n        console.debug(\"constructor(Input)\");\r\n    }\r\n\r\n    protected groupContent(): Array<JSX.Element> {\r\n        return super.groupContent().concat([\r\n            <Circle key='image' radius={22} x={32} y={32} strokeWidth={8} stroke='black' />]);\r\n    }\r\n}\r\n\r\nexport interface ITimerProps extends IInteractableProps {\r\n    model: Model.Timer;\r\n}\r\n\r\ntype ITimerState = IInteractableState\r\n\r\nexport class Timer extends Interactable<ITimerProps, ITimerState> {\r\n    constructor(props: ITimerProps) {\r\n        super(props);\r\n        console.debug(\"constructor(Timer)\");\r\n    }\r\n\r\n    groupContent(): Array<JSX.Element> {\r\n        const drawingHeight = 64;\r\n        const drawingWidth = 64;\r\n        const horizontalOffset = 12;\r\n        const verticalOffset = 6;\r\n        const rectHeight = (drawingHeight - 2*verticalOffset) / this.props.model.tickStorage.length;\r\n\r\n        return super.groupContent().concat(\r\n            this.props.model.tickStorage.map((value: boolean, index: number) =>\r\n            <Rect key='image'\r\n                  x={horizontalOffset}\r\n                  width={drawingWidth - 2*horizontalOffset}\r\n                  y={drawingHeight - verticalOffset - rectHeight - index*(drawingHeight-2*verticalOffset)/this.props.model.tickStorage.length}\r\n                  height={rectHeight}\r\n                  strokeWidth={1}\r\n                  stroke='darkgrey'\r\n                  fill={value ? 'blue' : 'white'}\r\n                   />));\r\n    }\r\n}\r\n\r\nexport interface ILinkArrowProps {\r\n    source: Model.Interactable;\r\n    target: Model.Interactable;\r\n}\r\n\r\nexport class LinkArrow extends React.Component<ILinkArrowProps> {\r\n    private attachedModel: Model.Interactable | undefined;\r\n\r\n    public constructor(props: ILinkArrowProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        // after this point, the model is drawn and is reacting to events.\r\n        if (!this.attachedModel) {\r\n            this.attachedModel = this.props.source;\r\n            this.attachedModel.onStateChanged(this._handleStateChanged);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.props.source.offStateChanged(this._handleStateChanged);\r\n        this.attachedModel = undefined;\r\n    }\r\n\r\n    private _handleStateChanged = (): void => {\r\n        this.setState({});\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.props.source !== this.attachedModel && this.attachedModel !== undefined) {\r\n            // the property has changed and this isn't the first time we're redering (so the DOM exists)\r\n            this.attachedModel.offStateChanged(this._handleStateChanged);\r\n            this.attachedModel = this.props.source;\r\n            this.attachedModel.onStateChanged(this._handleStateChanged);\r\n        }\r\n\r\n        let sourceX = this.props.source.x+32;\r\n        let sourceY = this.props.source.y+32;\r\n        let targetX = this.props.target.x+32;\r\n        let targetY = this.props.target.y+32;\r\n\r\n        if (Math.abs(targetY-sourceY) < Math.abs(targetX-sourceX)) {\r\n            // The line is less than 45 degrees up, so we'll trim the x's and scale the y's\r\n            const sign = (targetX > sourceX) ? 1 : -1;\r\n            const yTrim = 32*(targetY - sourceY)/(targetX-sourceX);\r\n            sourceX += sign*32;\r\n            targetX -= sign*32;\r\n            sourceY += sign*yTrim;\r\n            targetY -= sign*yTrim;\r\n        }\r\n        else {\r\n            const sign = (targetY > sourceY) ? 1 : -1;\r\n            const xTrim = 32*(targetX - sourceX)/(targetY-sourceY);\r\n            sourceX += sign*xTrim;\r\n            targetX -= sign*xTrim;\r\n            sourceY += sign*32;\r\n            targetY -= sign*32;\r\n        }\r\n\r\n        return <Arrow\r\n            x={sourceX}\r\n            y={sourceY}\r\n            points={[0,0, targetX-sourceX, targetY-sourceY]}\r\n            fill={this.props.source.prevState ? 'darkblue' : 'teal'}\r\n            stroke={this.props.source.prevState ? 'darkblue' : 'teal'}\r\n            strokeWidth={4}\r\n            pointerLength={10}\r\n            pointerWidth={10}/>;\r\n    }\r\n}\r\n\r\nexport function loadAssets(onComplete: () => void): void\r\n{\r\n    for (const kind of ['and', 'or', 'xor', 'nand', 'nor', 'xnor', 'paint']) {\r\n        // This whole thing is bad and this element is also bad...\r\n        Konva.Image.fromURL('/ScrapMechanicLogicGateSimulator/' + kind + '-black.png', (img: string) => {\r\n            _assets[kind] = img;\r\n            if (Object.keys(_assets).length === 7) {\r\n                onComplete();\r\n            }\r\n          });\r\n    }\r\n}","let timeout: NodeJS.Timeout | undefined;\r\n\r\nexport function show(message: string): void {\r\n    const error = document.getElementById(\"error\");\r\n    if (error === null) {\r\n        throw new Error(\"missing error element\");\r\n    }\r\n\r\n    error.innerText = message;\r\n    error.classList.add('visible');\r\n\r\n    if (timeout) {\r\n        clearTimeout(timeout);\r\n    }\r\n\r\n    timeout = setTimeout(() => {\r\n        error.classList.remove('visible');\r\n        timeout = undefined;\r\n    }, 4000);\r\n}","import * as React from \"react\";\r\nimport { Image, Line, Rect, Group, Circle, Text } from \"react-konva\";\r\nimport { Simulator } from \"./Simulator\";\r\nimport * as ViewModel from \"./ViewModel\";\r\nimport * as Model from \"./Model\";\r\nimport { Interactable } from \"./Model\";\r\nimport { KonvaEventObject } from \"konva/types/Node\";\r\nimport FileSaver from 'file-saver';\r\nimport * as FloatingErrorMessage from \"./FloatingErrorMessage\";\r\n\r\ninterface IToolBarButtonProps {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface IToolBarButtonState {\r\n    isHovering: boolean;\r\n    isEnabled: boolean; //  <- todo: get rid of bad state-derived-from-props\r\n    isPressed: boolean;\r\n}\r\n\r\nconst buttonWidth = 64;\r\nconst buttonHeight = 64;\r\nconst pressedScalingFactor = 1.05;\r\n\r\nabstract class ToolBarButton<TProps extends IToolBarButtonProps,TState extends IToolBarButtonState> extends React.Component<TProps, TState> {\r\n    private timeoutHandle: NodeJS.Timeout | undefined;\r\n\r\n    public constructor(props: TProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return <Group x={this.props.x - (this.state.isPressed ? buttonWidth*((pressedScalingFactor - 1)/2) : 0)}\r\n                      y={this.props.y - (this.state.isPressed ? buttonHeight*((pressedScalingFactor - 1)/2) : 0)}\r\n                      onMouseEnter={this._handleMouseEnter}\r\n                      onMouseLeave={this._handleMouseLeave}\r\n                      onMouseDown={this._handleMouseDown}\r\n                      onMouseUp={this._handleMouseUp}\r\n                      scaleX={this.state.isPressed ? pressedScalingFactor : 1}\r\n                      scaleY={this.state.isPressed ? pressedScalingFactor : 1}>\r\n                {this.getContent()}\r\n                <Rect x={0} y={0} height={64} width={64}\r\n                      strokeWidth={2} stroke={this.state.isHovering ? 'black' : 'grey'}\r\n                      fill={this.state.isEnabled ? 'transparent' : '#80808080'} />\r\n            </Group>;\r\n    }\r\n\r\n    protected abstract getContent(): JSX.Element | Array<JSX.Element>;\r\n    protected abstract handleClick(): void;\r\n\r\n    protected handleDragStart: ((eventArgs: KonvaEventObject<MouseEvent>) => void) | undefined = undefined;\r\n    protected readonly toolTipId: string | undefined;\r\n\r\n    public componentWillUnmount() {\r\n        this.clearToolTipTimer();\r\n    }\r\n\r\n    private startToolTipTimer() {\r\n        if (!this.timeoutHandle && this.toolTipId && document.getElementById(this.toolTipId)) {\r\n            this.timeoutHandle = setTimeout(this._handleTimeout, 1000);\r\n        }        \r\n    }\r\n\r\n    private clearToolTipTimer() {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n            this.timeoutHandle = undefined;\r\n        }\r\n\r\n        if (!this.toolTipId) {\r\n            return;\r\n        }\r\n\r\n        const element: HTMLElement | null = document.getElementById(this.toolTipId);\r\n        if (!element) {\r\n            throw new Error(\"toolTipId is defined, but not in the docuemnt\");\r\n        }\r\n\r\n        element.style.visibility = 'hidden';\r\n    }\r\n\r\n    private _handleTimeout: () => void = () => {\r\n        this.timeoutHandle = undefined;\r\n        if (!this.toolTipId) {\r\n            return;\r\n        }\r\n\r\n        const element: HTMLElement | null = document.getElementById(this.toolTipId);\r\n        if (!element) {\r\n            throw new Error(\"toolTipId is defined, but not in the docuemnt\");\r\n        }\r\n\r\n        element.style.visibility = 'visible';\r\n        element.style.top = (this.props.y - element.clientHeight - 5) + 'px';\r\n        let left:number = this.props.x + buttonWidth/2 - element.clientWidth/2;\r\n        if (left < 0) {\r\n            left = 10;\r\n        }\r\n        element.style.top = (this.props.y - element.clientHeight - 5) + 'px';\r\n        element.style.left = left + 'px';\r\n    }\r\n\r\n    private _handleMouseEnter: () => void = () => {\r\n        this.setState({ isHovering: true });\r\n        this.startToolTipTimer();\r\n    }\r\n\r\n    private _handleMouseLeave: (_: KonvaEventObject<MouseEvent>) => void = (eventArgs) => {\r\n        // If the cursor is moving roughly upward, call it a drag.\r\n        if (this.handleDragStart && this.state.isPressed && eventArgs.evt.offsetY < this.props.y+32) {\r\n            this.handleDragStart(eventArgs);\r\n        }\r\n\r\n        this.setState({ isHovering: false, isPressed: false });\r\n        this.clearToolTipTimer();\r\n    }\r\n\r\n    private _handleMouseDown: () => void = () => {\r\n        this.setState({ isPressed: true });\r\n        this.clearToolTipTimer();\r\n    }\r\n\r\n    private _handleMouseUp: () => void = () => {\r\n        this.setState({ isPressed: false });\r\n        this.handleClick();\r\n        this.startToolTipTimer();\r\n    }\r\n}\r\n\r\ninterface IStartStopButtonProps extends IToolBarButtonProps {\r\n    model: Simulator,\r\n}\r\n\r\ninterface IStartStopButtonState extends IToolBarButtonState {\r\n    isRunning: boolean,\r\n}\r\n\r\nexport class StartStopButton extends ToolBarButton<IStartStopButtonProps, IStartStopButtonState> {\r\n    public constructor(props: IStartStopButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isHovering: false,\r\n            isEnabled: true,\r\n            isPressed: false,\r\n            isRunning: this.props.model.isRunning,\r\n        }\r\n\r\n        this.props.model.onRunStateChanged(this.handleRunStateChanged.bind(this));\r\n    }\r\n\r\n    toolTipId = \"playPauseTip\";\r\n\r\n    private handleRunStateChanged(): void {\r\n        this.setState({ isRunning: this.props.model.isRunning });\r\n    }\r\n\r\n    protected getContent(): JSX.Element | Array<JSX.Element> {\r\n        return this.props.model.isRunning ?\r\n                [\r\n                    <Line key='1' points={[32-5, 32-12, 32-5, 32+12]} lineCap='butt' strokeWidth={5} stroke='red'/>,\r\n                    <Line key='2' points={[32+5, 32-12, 32+5, 32+12]} lineCap='butt' strokeWidth={5} stroke='red'/>\r\n                ] : [   <Line key='3'  points={[32-16, 32-16, 32+12, 32, 32-16, 32+16]}\r\n                      strokeWidth={4}\r\n                      stroke='green'\r\n                      fill='green'\r\n                      closed={true}/>\r\n                ];\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        if (this.props.model.isRunning) {\r\n            this.props.model.stopRunning();\r\n        } else {\r\n            this.props.model.startRunning();\r\n        }\r\n    }\r\n}\r\n\r\ninterface ISingleStepButtonProps extends IToolBarButtonProps {\r\n    model: Simulator,\r\n}\r\n\r\nexport class SingleStepButton extends ToolBarButton<ISingleStepButtonProps, IToolBarButtonState> {\r\n    public constructor(props: ISingleStepButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isHovering: false,\r\n            isEnabled: true,\r\n            isPressed: false,\r\n        }\r\n\r\n        this.props.model.onRunStateChanged(() => this.setState({ isEnabled: !this.props.model.isRunning }));\r\n    }\r\n\r\n    toolTipId = \"singleStepTip\";\r\n\r\n    protected getContent(): JSX.Element | Array<JSX.Element> {\r\n        return <Line points={[32+12, 32, 32-16, 32+16, 32-16, 32-16, 32+12, 32, 32+12, 32-16, 32+12, 32+16]}\r\n        strokeWidth={4}\r\n        stroke={this.state.isEnabled ? '#008000ff' : '#305030ff'}\r\n        closed={false}/>\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        this.props.model.advanceOne();\r\n    }\r\n}\r\n\r\nexport interface IDragNewInteractableDragEventArgs {\r\n    prototype: Model.Interactable;\r\n    event: KonvaEventObject<MouseEvent>;\r\n}\r\n\r\ninterface ILogicGateButtonProps extends IToolBarButtonProps {\r\n    kind: Model.LogicGateTypes | 'timer' | 'input';\r\n    selected: Model.Interactable | undefined;\r\n    onBeginDrag: (eventArgs: IDragNewInteractableDragEventArgs) => void;\r\n}\r\n\r\nexport class LogicGateButton extends ToolBarButton<ILogicGateButtonProps, IToolBarButtonState> {\r\n    constructor(props: ILogicGateButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        };\r\n    }\r\n\r\n    toolTipId = this.props.kind === 'input'\r\n        ? 'inputTip'\r\n        : (this.props.kind === 'timer' \r\n            ? 'timerTip'\r\n            : 'logicGateTip');\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        switch(this.props.kind) {\r\n            case 'input':\r\n                return <Circle radius={22} x={32} y={32} strokeWidth={8} stroke={this.state.isEnabled ? 'black' : '#00000080'} />;\r\n            case 'timer':\r\n                const drawingHeight = 64;\r\n                const drawingWidth = 64;\r\n                const horizontalOffset = 12;\r\n                const verticalOffset = 6;\r\n                const tickStorage = [true, true, true, true, true, false, false, false, false, false];\r\n                const rectHeight = (drawingHeight - 2*verticalOffset) / tickStorage.length;\r\n\r\n                return tickStorage.map((value: boolean, index: number) =>\r\n                <Rect key={index}\r\n                      x={horizontalOffset}\r\n                      width={drawingWidth - 2*horizontalOffset}\r\n                      y={drawingHeight - verticalOffset - rectHeight - index*(drawingHeight-2*verticalOffset)/tickStorage.length}\r\n                      height={rectHeight}\r\n                      strokeWidth={1}\r\n                      stroke='darkgrey'\r\n                      fill={value ? 'blue' : 'white'}\r\n                       />);\r\n            default:\r\n                return <Image x={0} y={0} image={ViewModel._assets[this.props.kind].image()} />;\r\n        }\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        if (!this.props.selected) {\r\n            FloatingErrorMessage.show(\"No logic gate is selected (click on one in the field).\")\r\n            return;\r\n        }\r\n\r\n        if (this.props.kind === 'input' && this.props.selected instanceof Model.Input) {\r\n            this.props.selected.twiddle(1);\r\n        } else if (this.props.kind === 'timer' && this.props.selected instanceof Model.Timer) {\r\n            FloatingErrorMessage.show(\"Timers can't be changed like this.\");\r\n            // no action\r\n        } else if (this.props.kind !== 'timer' && this.props.kind !== 'input' && this.props.selected instanceof Model.LogicGate) {\r\n            this.props.selected.kind = this.props.kind;\r\n        } else {\r\n            FloatingErrorMessage.show(\"Can't convert between inputs, timers and gates.  (You have to delete and recreate them).\");\r\n        }\r\n    }\r\n\r\n    protected handleDragStart = (eventArgs: KonvaEventObject<MouseEvent>): void => {\r\n        let prototype: Model.Interactable;\r\n        switch(this.props.kind) {\r\n            case 'timer':\r\n                prototype = new Model.Timer({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, kind: this.props.kind, tickStorage: new Array<boolean>(10).fill(false) });\r\n                break;\r\n            case 'input':\r\n                prototype = new Model.Input({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, savedState: false, kind: this.props.kind});\r\n                break;\r\n            default:\r\n                prototype = new Model.LogicGate({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, savedState: false, kind: this.props.kind});\r\n                break;\r\n        }\r\n\r\n        this.props.onBeginDrag({\r\n            prototype: prototype,\r\n            event: eventArgs});\r\n    }\r\n}\r\n\r\ninterface IPaintButtonProps extends IToolBarButtonProps {\r\n    selected: Model.Interactable | undefined;\r\n}\r\n\r\nexport class PaintButton extends ToolBarButton<IPaintButtonProps, IToolBarButtonState> {\r\n    constructor(props: IPaintButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    toolTipId = 'paintTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Image x={0} y={0} image={ViewModel._assets['paint'].image()} />;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        if (this.props.selected instanceof Model.InteractableWithSingleBitSavedState) {\r\n            this.props.selected.paint();\r\n        }\r\n    }\r\n}\r\n\r\ninterface ILiftButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class PutOnLiftButton extends ToolBarButton<ILiftButtonProps, IToolBarButtonState> {\r\n    constructor(props: ILiftButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    toolTipId = 'putOnLiftTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return [ <Line key='base'\r\n                       points={[52, 48,  12, 48,  12, 28,  32, 28,  32, 12,  16, 12,  48, 12,  32,12,  32, 28,  52, 28,  52, 48 ]}\r\n                       strokeWidth={4}\r\n                       stroke='black'\r\n                       closed={true}/>,\r\n                <Line key='arrow'\r\n                      points = {[18, 42,  32, 32,  46, 42,  18, 42]}\r\n                      strokeWidth={1}\r\n                      stroke='blue'\r\n                      closed={true}\r\n                      fill='blue'/>];\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        this.props.simulator.putOnLift();\r\n    }\r\n}\r\n\r\n\r\nexport class TakeOffLiftButton extends ToolBarButton<ILiftButtonProps, IToolBarButtonState> {\r\n    constructor(props: ILiftButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return [ <Line key='base'\r\n                       points={[52, 48,  12, 48,  12, 28,  32, 28,  32, 12,  16, 12,  48, 12,  32,12,  32, 28,  52, 28,  52, 48 ]}\r\n                       strokeWidth={4}\r\n                       stroke='black'\r\n                       closed={true}/>,\r\n                  <Line key='arrow'\r\n                        points = {[18, 32,  32, 42,  46, 32,  18, 32]}\r\n                        strokeWidth={1}\r\n                        stroke='blue'\r\n                        closed={true}\r\n                        fill='blue'/>];\r\n    }\r\n\r\n    toolTipId = 'takeOffLiftTip';\r\n\r\n    protected handleClick(): void {\r\n        this.props.simulator.takeOffLift();\r\n    }\r\n}\r\n\r\n\r\ninterface IDeleteButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n    selected: Interactable | undefined;\r\n}\r\n\r\nexport class DeleteButton extends ToolBarButton<IDeleteButtonProps, IToolBarButtonState> {\r\n    constructor(props: IDeleteButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: this.props.selected !== undefined,\r\n            isHovering: false,\r\n            isPressed: false\r\n        }\r\n    }\r\n\r\n    toolTipId = 'deleteTip';\r\n\r\n    static getDerivedStateFromProps(props: IDeleteButtonProps, state: IToolBarButtonState): IToolBarButtonState {\r\n        return {\r\n            isEnabled: props.selected !== undefined,\r\n            isHovering: state.isHovering,\r\n            isPressed: state.isPressed,\r\n        }\r\n    }\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#128465;\" x={10} y={8} fontSize={64} fill='black'/>;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        if (!this.props.selected) {\r\n            FloatingErrorMessage.show(\"Nothing is selected (click on a logic gate in the field to specify what should be deleted).\")\r\n            return;\r\n        }\r\n\r\n        this.props.simulator.remove(this.props.selected);\r\n    }\r\n}\r\n\r\ninterface ICopyLinkButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class CopyLinkButton extends ToolBarButton<ICopyLinkButtonProps, IToolBarButtonState> {\r\n    constructor(props: ICopyLinkButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#128279;\" x={6} y={14} fontSize={42} fill='black'/>;\r\n    }\r\n\r\n    toolTipId = 'shareLinkTip';\r\n\r\n    protected async handleClick(): Promise<void> {\r\n        if (!navigator.clipboard) {\r\n            alert(\"Can't copy to clipboard - navigator.clipboard doesn't exist.  Perhaps you're using an older browser?\");\r\n            return;\r\n        }\r\n\r\n        const url: string = window.location.origin + window.location.pathname + '?' + this.props.simulator.serializeToCompressedQueryStringFragment();\r\n        try {\r\n            await navigator.clipboard.writeText(url);\r\n            alert(\"Copied the following URL to the clipboard:\\n\\n\" + url);\r\n        } catch (err) {\r\n            alert('navigator.clipboard.writeText failed!\\n\\n' + err);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface ISaveToFileButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class SaveToFileButton extends ToolBarButton<ISaveToFileButtonProps, IToolBarButtonState> {\r\n    constructor(props: ISaveToFileButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    toolTipId = 'saveTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#128190;\" x={6} y={14} fontSize={42} fill='black'/>;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        const file = new File([JSON.stringify(this.props.simulator.serialize(), null, 4)], \"logicgatesim.json\", {type: \"text/plain;charset=utf-8\"});\r\n        FileSaver.saveAs(file);\r\n    }\r\n}\r\n\r\ninterface ILoadFromFileButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class LoadFromFileButton extends ToolBarButton<ILoadFromFileButtonProps, IToolBarButtonState> {\r\n    private readonly fileInputElement: HTMLInputElement;\r\n\r\n    constructor(props: ILoadFromFileButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n\r\n        const fileElem = document.getElementById(\"fileElem\") as HTMLInputElement;\r\n        if (!fileElem) {\r\n            throw new Error(\"index.html is busted - fileElem <input> is missing\");\r\n        }\r\n\r\n        this.fileInputElement = fileElem;\r\n\r\n        this.fileInputElement.addEventListener('change', this.handleFileGiven.bind(this), false)\r\n    }\r\n   \r\n    toolTipId = 'loadTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#128193;\" x={6} y={14} fontSize={42} fill='black'/>;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        const fileElem = document.getElementById(\"fileElem\");\r\n        if (!fileElem) {\r\n            throw new Error(\"fileElem is missing in index.html\");\r\n        }\r\n        fileElem.click();\r\n    }\r\n\r\n    // This function tied to the 'change' event of the file dialog in index.html\r\n    handleFileGiven(): void {\r\n        if (!this.fileInputElement.files || this.fileInputElement.files.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // hacky - no message when file load fails.\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            const fileContents: string = reader.result as string;\r\n            let jsonContent: unknown;\r\n            try\r\n            {\r\n                jsonContent = JSON.parse(fileContents);\r\n            }\r\n            catch(err) {\r\n                alert(\"Failed to load the file - are you sure this is a file generated from this app?  \" + err);\r\n                return;\r\n            }\r\n\r\n            try\r\n            {\r\n                this.props.simulator.load(jsonContent);\r\n            }\r\n            catch(err) {\r\n                alert(err);\r\n            }\r\n        };\r\n        reader.readAsText(this.fileInputElement.files[0]);\r\n    }\r\n}\r\n\r\n\r\ninterface IReloadButtonProps extends IToolBarButtonProps {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport class ReloadButton extends ToolBarButton<IReloadButtonProps, IToolBarButtonState> {\r\n    constructor(props: IReloadButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n            isEnabled: true,\r\n            isHovering: false,\r\n            isPressed: false,\r\n        }\r\n    }\r\n\r\n    toolTipId = 'reloadTip';\r\n\r\n    protected getContent(): JSX.Element | JSX.Element[] {\r\n        return <Text text=\"&#8645;\" x={16} y={14} fontSize={42} fill='black'/>;\r\n    }\r\n\r\n    protected handleClick(): void {\r\n        this.props.simulator.gameReload();\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Stage, Layer, Arrow, Line, Rect } from \"react-konva\";\r\nimport { Simulator, IEventArgsInteractableAdded, IEventArgsInteractableRemoved, IInteractableLink, IEventArgsInteractablesReset } from \"./Simulator\";\r\nimport * as TC from \"./TickCounter\";\r\nimport * as ViewModel from \"./ViewModel\";\r\nimport * as Model from \"./Model\";\r\nimport Konva from 'konva';\r\nimport { Vector2d } from \"konva/types/types\";\r\nimport { Interactable } from \"./Model\";\r\nimport { CopyLinkButton, DeleteButton, IDragNewInteractableDragEventArgs, LoadFromFileButton, LogicGateButton, PaintButton, PutOnLiftButton, ReloadButton, SaveToFileButton, SingleStepButton, StartStopButton, TakeOffLiftButton } from \"./Buttons\";\r\nimport { KonvaEventObject } from \"konva/types/Node\";\r\n\r\ninterface AppProps {\r\n    simulator: Simulator;\r\n}\r\n\r\ninterface AppState {\r\n    interactables: Array<Interactable>;\r\n    links: Array<IInteractableLink>;\r\n    selected?: Interactable;\r\n    linkSource?: Interactable;\r\n    linkTargetX?: number;\r\n    linkTargetY?: number;\r\n    createByDragPrototype?: Interactable;\r\n    windowInnerHeight: number;\r\n    windowInnerWidth: number;\r\n}\r\n\r\nexport class App extends React.Component<AppProps, AppState> {\r\n    private stage: Konva.Stage | undefined;\r\n    private maxSensibleDropY = 0; // Set in render\r\n    private maxSensibleDropX = 0;\r\n    private considerResizeOnNextRender = true;\r\n\r\n    constructor(props: AppProps) {\r\n        super(props);\r\n        this.state = {\r\n            interactables: props.simulator.interactables,\r\n            links: props.simulator.getLinks(),\r\n            selected: undefined,\r\n            linkSource: undefined,\r\n            windowInnerHeight: window.innerHeight,\r\n            windowInnerWidth: window.innerWidth\r\n        };\r\n\r\n        for (const i of this.props.simulator.interactables) {\r\n            i.onMoved(this.handleInteractableMoved);\r\n        }\r\n\r\n        this.props.simulator.onInteractableAdded( this.handleInteractableAdded );\r\n        this.props.simulator.onInteractableRemoved( this.handleInteractableRemoved );\r\n        this.props.simulator.onInteractablesReset( this.handleInteractablesReset );\r\n    }\r\n\r\n    handleInteractablesReset = (e: IEventArgsInteractablesReset): void => {\r\n        for (const i of e.oldInteractables) {\r\n            i.offMoved(this.handleInteractableMoved);\r\n        }\r\n\r\n        const links: Array<IInteractableLink> = [];\r\n        for (const i of this.props.simulator.interactables) {\r\n            i.onMoved(this.handleInteractableMoved);\r\n            for (const j of i.inputs) {\r\n                links.push({source: j, target: i});\r\n            }\r\n        }        \r\n\r\n        this.setState({\r\n            interactables: this.props.simulator.interactables,\r\n            selected: undefined,\r\n            links: links\r\n        });\r\n        this.considerResizeOnNextRender = true;\r\n    }\r\n\r\n    handleInteractableAdded = (e: IEventArgsInteractableAdded): void => {\r\n        e.interactable.onMoved(this.handleInteractableMoved.bind(this));\r\n        this.setState({\r\n            interactables: this.props.simulator.interactables,\r\n            selected: e.interactable,\r\n        });\r\n    };\r\n\r\n    handleInteractableRemoved = (e: IEventArgsInteractableRemoved): void => {\r\n        e.interactable.offMoved(this.handleInteractableMoved.bind(this));\r\n        this.setState({\r\n            interactables: this.props.simulator.interactables,\r\n            selected: undefined,\r\n            links: this.state.links.filter(l => l.target !== e.interactable && l.source !== e.interactable)\r\n        });\r\n    };\r\n\r\n    handleInteractableMoved = (): void => {\r\n        this.setState({interactables: this.props.simulator.interactables});\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        if (!this.stage) {\r\n            throw new Error(\"stage was not set?\");\r\n        }\r\n\r\n        const container = this.stage.container();\r\n        container.tabIndex = 1;\r\n        container.focus();\r\n        container.addEventListener(\"keypress\", this.handleKeyPress);\r\n        window.addEventListener('resize', this.handleResize);\r\n    }\r\n\r\n    handleResize = ():void => {\r\n        this.setState({\r\n            windowInnerWidth: window.innerWidth,\r\n            windowInnerHeight: window.innerHeight\r\n        });\r\n        this.considerResizeOnNextRender = true;\r\n    }\r\n\r\n    handleKeyPress = (e: KeyboardEvent):void => {\r\n        const xy: Vector2d | null | undefined = this.stage?.getPointerPosition();\r\n        if (!xy) {\r\n            throw new Error(\"stage was not set?\");\r\n        }\r\n\r\n        if (e.key === \"g\") {\r\n            this.props.simulator.startRunning();\r\n        } else if (e.key === \"s\") {\r\n            this.props.simulator.stopRunning();\r\n        } else if (e.key === \"n\") {\r\n            this.props.simulator.advanceOne();\r\n        } else if (e.key === \"l\") {\r\n            const newInteractable = new Model.LogicGate({\r\n                kind: 'and',\r\n                x: xy.x,\r\n                y: xy.y,\r\n                savedState: false\r\n            });\r\n            this.props.simulator.add(newInteractable);\r\n        } else if (e.key === \"i\") {\r\n            const newInteractable = new Model.Input({\r\n                kind: 'input',\r\n                x: xy.x,\r\n                y: xy.y,\r\n                savedState: false\r\n            });\r\n            this.props.simulator.add(newInteractable);\r\n        } else if (e.key === \"t\") {\r\n            const newInteractable = new Model.Timer({\r\n                kind: 'timer',\r\n                x: xy.x,\r\n                y: xy.y,\r\n                tickStorage: new Array<boolean>(10).fill(false)\r\n            });\r\n            this.props.simulator.add(newInteractable);\r\n        } else if (e.key === '[' && this.state.selected) {\r\n            this.state.selected.twiddle(-1);\r\n        } else if (e.key === ']' && this.state.selected) {\r\n            this.state.selected.twiddle(1);\r\n        } else if (e.key === 'x' && this.state.selected) {\r\n            this.props.simulator.remove(this.state.selected);\r\n        } else if (e.key === '4') {\r\n            this.props.simulator.gameReload();\r\n        } else if (e.key === '$') {\r\n            this.props.simulator.putOnLift();\r\n        } else if (e.key === 'p' && this.state.selected) {\r\n            this.state.selected.paint();\r\n        }\r\n\r\n        console.debug(\"App.handleKeyPress(\" + e.key + \")\");\r\n    };\r\n\r\n    handleInteractableClicked(e: ViewModel.IEventArgsInteractable): void {\r\n        this.setState({\r\n            selected: e.model,\r\n        });\r\n    }\r\n\r\n    handleLinkStart(e: ViewModel.IEventArgsInteractable): void {\r\n        const model = e.model;\r\n        this.setState({\r\n            linkSource: model,\r\n            linkTargetX: e.evt.x,\r\n            linkTargetY: e.evt.y\r\n        })\r\n    }\r\n\r\n    handleMouseUpInStage(e: KonvaEventObject<MouseEvent>): void {\r\n        // This handles mouseUp events from the field, \r\n        if (this.state.linkSource) {\r\n            let target = undefined;\r\n            for (const i of this.state.interactables) {\r\n                // TODO: the Interactable viewmodel should decide the in-bounds calculation\r\n                if (i.x <= e.evt.offsetX && e.evt.offsetX < i.x+64\r\n                 && i.y <= e.evt.offsetY && e.evt.offsetY < i.y+64) {\r\n                     target = i;\r\n                     break;\r\n                 }\r\n            }\r\n\r\n            if (target && target !== this.state.linkSource && target.addInput(this.state.linkSource)) {\r\n                this.setState({links: this.props.simulator.getLinks(), linkSource: undefined, createByDragPrototype: undefined});\r\n            }\r\n        }\r\n        else if (this.state.createByDragPrototype && this.state.createByDragPrototype.y < this.maxSensibleDropY) {\r\n            this.props.simulator.add(this.state.createByDragPrototype);\r\n        }\r\n        this.setState({linkSource: undefined, createByDragPrototype: undefined});\r\n    }\r\n\r\n    handleMouseMove(e: KonvaEventObject<MouseEvent>): void {\r\n        // console.debug(\"mouseMove: x=\" + e.evt.x + \" pageX=\" + e.evt.pageX + \" clientX=\" + e.evt.clientX + \" offsetX=\" + e.evt.offsetX + \" screenX=\" + e.evt.screenX + \" movementX=\" + e.evt.movementX);\r\n        if (this.state.linkSource) {\r\n            this.setState({\r\n                linkTargetX: e.evt.offsetX,\r\n                linkTargetY: e.evt.offsetY\r\n            })\r\n        }\r\n        else if (this.state.createByDragPrototype) {\r\n            this.state.createByDragPrototype.setPosition(e.evt.offsetX, e.evt.offsetY);\r\n\r\n            this.setState({ createByDragPrototype: this.state.createByDragPrototype });\r\n        }\r\n    }\r\n\r\n    handleMouseDown(e: KonvaEventObject<MouseEvent>): void {\r\n        if (!(e.target instanceof ViewModel.Interactable) && this.state.selected) {\r\n            this.setState({selected: undefined});\r\n        }\r\n    }\r\n\r\n    handleNewInteractableDrag(e: IDragNewInteractableDragEventArgs): void {\r\n        this.setState({\r\n            createByDragPrototype: e.prototype\r\n        })\r\n    }\r\n\r\n    private handleMouseLeave(): void {\r\n        this.setState({linkSource: undefined, createByDragPrototype: undefined});\r\n    }\r\n\r\n    private handleMoveCompleted = (e: ViewModel.IEventArgsInteractable):void => {\r\n        const buttonWidth = 64;\r\n        const buttonHeight = 64;\r\n        if (e.model.x < - buttonWidth*.75 || e.model.y < -buttonHeight*.75 || e.model.x > this.maxSensibleDropX || e.model.y > this.maxSensibleDropY) {\r\n            this.props.simulator.remove(e.model);\r\n        }\r\n    }\r\n\r\n    getViewModelForModel(model: Model.Interactable, id: string): JSX.Element {\r\n        if (model instanceof Model.LogicGate) {\r\n            return (\r\n                <ViewModel.LogicGate\r\n                    model={model}\r\n                    key={id}\r\n                    isSelected={model === this.state.selected}\r\n                    onLinkStart={this.handleLinkStart.bind(this)}\r\n                    onClick={this.handleInteractableClicked.bind(this)}\r\n                    onMoveCompleted={this.handleMoveCompleted.bind(this)}\r\n                />\r\n            );\r\n        }\r\n        else if (model instanceof Model.Input) {\r\n                return <ViewModel.Input\r\n                    model={model}\r\n                    key={id}\r\n                    isSelected={model === this.state.selected}\r\n                    onMoveCompleted={this.handleMoveCompleted.bind(this)}\r\n                    onLinkStart={this.handleLinkStart.bind(this)}\r\n                    onClick={this.handleInteractableClicked.bind(this)}/>\r\n        }\r\n        else if (model instanceof Model.Timer) {\r\n            return <ViewModel.Timer\r\n                model={model}\r\n                key={id}\r\n                isSelected={model === this.state.selected}\r\n                onMoveCompleted={this.handleMoveCompleted.bind(this)}\r\n                onLinkStart={this.handleLinkStart.bind(this)}\r\n                onClick={this.handleInteractableClicked.bind(this)}/>\r\n        }\r\n        else {\r\n            throw new Error(\"unexpected model object type\");\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        let pointer: Array<JSX.Element> | JSX.Element = [];\r\n        const hSpaceBetweenButtons = 15; // the horizontal between each button (and the edges)\r\n        const vSpaceBetweenButtons = 8;\r\n        const buttonWidth = 64;\r\n        const buttonHeight = 64;\r\n        const maximumButtonsPerRow = 9;\r\n        const canvasHeight = window.innerHeight*.9;\r\n        const canvasWidth = window.innerWidth-57; // Would love to know where the 57 comes from, but with the current styles, it seems to work.\r\n        const numRows = canvasWidth < hSpaceBetweenButtons + 2*maximumButtonsPerRow*(buttonWidth+hSpaceBetweenButtons) ? 2 : 1;\r\n        const buttonRowHeight = numRows*(buttonWidth+vSpaceBetweenButtons) + vSpaceBetweenButtons;\r\n        const buttonRowY = (n: number) => canvasHeight - buttonRowHeight + vSpaceBetweenButtons + (n >= maximumButtonsPerRow && numRows > 1 ? (vSpaceBetweenButtons + buttonHeight) : 0);\r\n        const buttonRowX = (n: number) => hSpaceBetweenButtons + (hSpaceBetweenButtons + buttonWidth) * (n >= maximumButtonsPerRow && numRows > 1 ? n - maximumButtonsPerRow : n);\r\n\r\n        this.maxSensibleDropY = buttonRowY(0)-32;\r\n        this.maxSensibleDropX = canvasWidth - buttonWidth * .25;\r\n\r\n        if (this.considerResizeOnNextRender) {\r\n            this.props.simulator.fitToSize(canvasWidth, buttonRowY(0), 20, 20);\r\n            this.considerResizeOnNextRender = false;\r\n        }\r\n\r\n        if (this.state.linkSource) {\r\n            pointer = <Arrow\r\n                x={this.state.linkSource.x+32}\r\n                y={this.state.linkSource.y+32}\r\n                points={[0,0, this.state.linkTargetX!-(this.state.linkSource.x+32), this.state.linkTargetY!-(this.state.linkSource.y+32)]}\r\n                fill='lightgrey'\r\n                stroke='lightgrey'\r\n                strokeWidth={4}\r\n                pointerLength={10}\r\n                pointerWidth={10}/>;\r\n        }\r\n        return (\r\n            <Stage\r\n                width={canvasWidth-4}\r\n                height={canvasHeight}\r\n                ref={(c: Konva.Stage) => {this.stage = c;}}\r\n                onMouseUp={this.handleMouseUpInStage.bind(this)}\r\n                onMouseMove={this.handleMouseMove.bind(this)}\r\n                onMouseLeave={this.handleMouseLeave.bind(this)}\r\n            >\r\n                <Layer>\r\n                    <Rect id='background' x={0} y={0} width={canvasWidth} height={canvasHeight - buttonRowHeight} onMouseDown={this.handleMouseDown.bind(this)} strokeWidth={0} fill='GhostWhite' />\r\n                    <TC.TickCounter simulator={this.props.simulator} right={canvasWidth - 20} top={5} />\r\n                    {this.state.interactables.map((model: Interactable, index: number) =>\r\n                        this.getViewModelForModel(model, index.toString())\r\n                    )}\r\n                    {this.state.createByDragPrototype\r\n                        ? this.getViewModelForModel(this.state.createByDragPrototype, 'dragproto')\r\n                        : []}\r\n                    {pointer}\r\n                    {this.state.links.map((link: IInteractableLink, index:number) => <ViewModel.LinkArrow key={index} source={link.source} target={link.target}/>)}\r\n                </Layer>\r\n                <Layer>\r\n                    <Rect x={0} y={canvasHeight-buttonRowHeight} height={buttonRowHeight} width={canvasWidth} fill='papayawhip' />\r\n                    <Line points={[0, canvasHeight-buttonRowHeight, canvasWidth, canvasHeight-buttonRowHeight]} stroke='grey' strokeWidth={3}/>\r\n                    <LogicGateButton x={buttonRowX(0)} y={buttonRowY(0)} selected={this.state.selected} kind='and' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\r\n                    <LogicGateButton x={buttonRowX(1)} y={buttonRowY(1)} selected={this.state.selected} kind='or' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\r\n                    <LogicGateButton x={buttonRowX(2)} y={buttonRowY(2)} selected={this.state.selected} kind='xor' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\r\n                    <LogicGateButton x={buttonRowX(3)} y={buttonRowY(3)} selected={this.state.selected} kind='nand' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\r\n                    <LogicGateButton x={buttonRowX(4)} y={buttonRowY(4)} selected={this.state.selected} kind='nor' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\r\n                    <LogicGateButton x={buttonRowX(5)} y={buttonRowY(5)} selected={this.state.selected} kind='xnor' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\r\n                    <LogicGateButton x={buttonRowX(6)} y={buttonRowY(6)} selected={this.state.selected} kind='input' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\r\n                    <LogicGateButton x={buttonRowX(7)} y={buttonRowY(7)} selected={this.state.selected} kind='timer' onBeginDrag={this.handleNewInteractableDrag.bind(this)}/>\r\n                    <DeleteButton x={buttonRowX(8)} y={buttonRowY(8)} simulator={this.props.simulator} selected={this.state.selected}/>\r\n                    <StartStopButton x={buttonRowX(9)} y={buttonRowY(9)} model={this.props.simulator}/>\r\n                    <SingleStepButton x={buttonRowX(10)} y={buttonRowY(10)} model={this.props.simulator}/>\r\n                    <ReloadButton x={buttonRowX(11)} y={buttonRowY(11)} simulator={this.props.simulator}/>\r\n                    <PaintButton x={buttonRowX(12)} y={buttonRowY(12)} selected={this.state.selected}/>\r\n                    <PutOnLiftButton x={buttonRowX(13)} y={buttonRowY(13)} simulator={this.props.simulator}/>\r\n                    <TakeOffLiftButton x={buttonRowX(14)} y={buttonRowY(14)} simulator={this.props.simulator}/>\r\n                    <CopyLinkButton x={buttonRowX(15)} y={buttonRowY(15)} simulator={this.props.simulator}/>\r\n                    <LoadFromFileButton x={buttonRowX(16)} y={buttonRowY(16)} simulator={this.props.simulator}/>\r\n                    <SaveToFileButton x={buttonRowX(17)} y={buttonRowY(17)} simulator={this.props.simulator}/>\r\n                </Layer>\r\n            </Stage>\r\n        );\r\n    }\r\n}\r\n\r\nexport function makeItSo(): void {\r\n    // TODO - get rid of this.  One way to go would be to find a way to convert all the PNG's to SVG's.\r\n    const queryString: string | undefined = window.location.search;\r\n    let serialized: unknown | undefined = undefined;\r\n    if (queryString) {\r\n        try\r\n        {\r\n            serialized = Simulator.decompressQueryStringFragment(queryString);\r\n        }\r\n        catch {\r\n            alert(\"The query string doesn't seem to be something created by this app - was it perhaps truncated?\");\r\n        }\r\n    }\r\n\r\n    ViewModel.loadAssets(() => {\r\n        let simulator: Simulator | undefined;\r\n        try {\r\n            simulator = new Simulator(serialized);\r\n        }\r\n        catch (err) {\r\n            alert(err);\r\n            simulator = new Simulator();\r\n        }\r\n        render(<App simulator={simulator} />, document.getElementById(\"root\"));\r\n    });\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.css';\r\nimport {makeItSo} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconsole.debug(\"In index\");\r\nmakeItSo();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { EventEmitter } from 'events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport function hasOwnProperty<X extends {}, Y extends PropertyKey>\r\n  (obj: X, prop: Y): obj is X & Record<Y, unknown> {\r\n    // source: https://fettblog.eu/typescript-hasownproperty/\r\n    //\r\n    // Seems okay except for having to use the eslint rule on it.\r\n    return obj.hasOwnProperty(prop)\r\n}\r\n\r\n\r\nexport interface ISerializedInteractable {\r\n    x: number;\r\n    y: number;\r\n    kind: LogicGateTypes | 'input' | 'timer';\r\n    inputs: Array<number>;\r\n}\r\n\r\nexport interface IEventArgsInteractable {\r\n    source: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractableMoved extends IEventArgsInteractable {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nfunction deserializeInteractable(serialized: Record<string,unknown>, kind: LogicGateTypes | 'input' | 'timer'): ISerializedInteractable {\r\n    if (!hasOwnProperty(serialized, 'x') || typeof(serialized.x) !== 'number') {\r\n        throw new Error(\"Missing 'x' property or 'x' is not a number\");\r\n    }\r\n\r\n    if (!hasOwnProperty(serialized, 'y') || typeof(serialized.y) !== 'number') {\r\n        throw new Error(\"Missing 'x' property or 'x' is not a number\");\r\n    }\r\n\r\n    return {\r\n        kind: kind,\r\n        x: serialized.x,\r\n        y: serialized.y,\r\n        inputs: []\r\n    }\r\n}\r\n\r\nexport class Interactable {\r\n    private _x: number;\r\n    private _y: number;\r\n    private readonly events: EventEmitter;\r\n    private _inputs: Array<Interactable>;\r\n\r\n    private _prevState: boolean;\r\n    private _currentState: boolean;\r\n\r\n    constructor(props: Omit<ISerializedInteractable, 'inputs'>) {\r\n        this.events = new EventEmitter();\r\n        this._prevState = false;\r\n        this._currentState = false;\r\n        this._inputs = [];\r\n        this._x = props.x;\r\n        this._y = props.y;\r\n    }\r\n\r\n    public static validateAndDeserialize(serialized: unknown): Interactable {\r\n        if (typeof(serialized) !== 'object' || serialized === null) {\r\n            throw new Error(\"Bad format - expected an array of objects at the top level\");\r\n        }\r\n\r\n        if (!hasOwnProperty(serialized, 'kind')) {\r\n            throw new Error(\"Interactable is missing an 'inputs' array\");\r\n        }\r\n\r\n        switch (serialized.kind) {\r\n            case 'input':\r\n            case 'input-on':\r\n            case 'input-off':\r\n                return new Input(validateAndNormalizeInput(serialized, serialized.kind));\r\n            case 'timer':\r\n            case 'timer10':\r\n                    return new Timer(validateAndNormalizeTimer(serialized));\r\n            case 'and':\r\n            case 'or':\r\n            case 'xor':\r\n            case 'nand':\r\n            case 'nor':\r\n            case 'xnor':\r\n                return new LogicGate(deserializeLogicGate(serialized, serialized.kind));\r\n            default:\r\n                throw new Error(\"Interactable has unknown 'kind': \" + serialized.kind);\r\n        }\r\n    }\r\n\r\n    public getPosition(): { x: number, y: number } {\r\n        return { x: this._x, y: this._y };\r\n    }\r\n\r\n    public get x(): number { return this._x; }\r\n    public get y(): number { return this._y; }\r\n\r\n    public setPosition(x: number, y: number): void {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._emitMoved(x, y);\r\n    }\r\n\r\n    public get currentState(): boolean { return this._currentState; }\r\n\r\n    protected setCurrentState(newValue: boolean): void {\r\n        if (this._currentState !== newValue) {\r\n            this._currentState = newValue;\r\n            this._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public get prevState(): boolean { return this._prevState; }\r\n    protected setPrevState(newValue: boolean): void {\r\n        if (this._prevState !== newValue) {\r\n            this._prevState = newValue;\r\n            this._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public export(): ISerializedInteractable {\r\n        return {\r\n            x: this._x,\r\n            y: this._y,\r\n            kind: 'input', // base classes will overwrite this.\r\n            inputs: []\r\n        }\r\n    }\r\n\r\n    addInput(newInput: Interactable): boolean {\r\n        if (this.inputLimit === 0) {\r\n            // Can't draw a connection *to* an input.\r\n            return false;\r\n        }\r\n\r\n        const existingIndex: number = this.inputs.indexOf(newInput);\r\n        if (existingIndex >= 0) {\r\n            // if the connection is already there - undo it\r\n            this._inputs.splice(existingIndex, 1);\r\n        } else {\r\n            // If the connection already goes the other way, reverse it (this part just deletes the old arrow)\r\n            const indexInTarget: number = newInput.inputs.indexOf(this);\r\n            if (indexInTarget >= 0) {\r\n                newInput._inputs.splice(indexInTarget, 1);\r\n                newInput.calculate();\r\n            }\r\n\r\n            // If we allow only one input and we already have an input, toss it.\r\n            if (this.inputLimit === 1) {\r\n                this._inputs = [];\r\n            }\r\n\r\n            // Add the new link\r\n            this._inputs.push(newInput);\r\n        }\r\n\r\n        this.calculate();\r\n        this.paint();\r\n        newInput.paint();\r\n        return true;\r\n    }\r\n\r\n    removeInput(deadInput: Interactable): boolean {\r\n        const index: number = this.inputs.indexOf(deadInput);\r\n        if (index < 0) {\r\n            return false;\r\n        } else {\r\n            this._inputs.splice(index, 1);\r\n            this.calculate();\r\n            this.paint();\r\n            return true;\r\n        }\r\n    }\r\n\r\n    get inputs(): Array<Interactable> {\r\n        return [...this._inputs];\r\n    }\r\n\r\n    setInputs(inputs: Array<Interactable>): void {\r\n        this._inputs = [...inputs];\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    twiddle(_direction: -1 | 1): void {\r\n        // No actio for twiddle in a timer.\r\n    }\r\n\r\n    /** Causes the calculated state to become the state that other interactables will see. */\r\n    public apply(): void {\r\n        this.setPrevState(this.currentState);\r\n    }\r\n\r\n    /** Sets currentState based on the previous state of its inputs. */\r\n    public calculate(): void {/* no action */}\r\n\r\n    public reload(): void {/* no action */}\r\n\r\n    public putOnLift(): void {/* no action */}\r\n\r\n    public paint(): void {/* no action */}\r\n\r\n    public onMoved(handler: (eventArgs: IEventArgsInteractableMoved) => void): void {\r\n        this.events.on('moved', handler);\r\n    }\r\n\r\n    public offMoved(handler: (eventArgs: IEventArgsInteractableMoved) => void): void {\r\n        this.events.off('moved', handler);\r\n    }\r\n\r\n    public onStateChanged(handler: (eventArgs: IEventArgsInteractable) => void): void {\r\n        this.events.on('stateChanged', handler);\r\n    }\r\n\r\n    public offStateChanged(handler: (eventArgs: IEventArgsInteractable) => void): void {\r\n        this.events.off('stateChanged', handler);\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 'unlimited';\r\n    }\r\n\r\n    protected _emitMoved(x: number, y: number): void {\r\n        this.events.emit('moved', { source: this, x, y } as IEventArgsInteractableMoved);\r\n    }\r\n\r\n    protected _emitStateChanged(): void {\r\n        this.events.emit('stateChanged', { source: this } as IEventArgsInteractable);\r\n    }\r\n}\r\n\r\nexport interface ISerializedInteractableWithSingleBitSavedState extends ISerializedInteractable {\r\n    savedState: boolean;\r\n}\r\n\r\nfunction validateAndDeserializeInteractableWithSavedState(serialized: Record<string,unknown>, kind: LogicGateTypes | 'input', defaultSavedState: boolean): ISerializedInteractableWithSingleBitSavedState {\r\n    let savedState: boolean = defaultSavedState;\r\n\r\n    if (hasOwnProperty(serialized, 'savedState')) {\r\n        if (typeof(serialized.savedState) !== 'boolean') {\r\n            throw new Error(\"Interactables of kind '\" + kind + \"' should have a 'savedState' property of type boolean\");\r\n        }\r\n        savedState = serialized.savedState;\r\n    }\r\n\r\n    return {\r\n        ...deserializeInteractable(serialized, kind),\r\n        savedState: savedState\r\n    };\r\n}\r\n\r\n\r\nexport class InteractableWithSingleBitSavedState extends Interactable {\r\n    private _savedState: boolean;\r\n\r\n    constructor(props: Omit<ISerializedInteractableWithSingleBitSavedState, 'inputs'>) {\r\n        super(props);\r\n\r\n        this._savedState = props.savedState;\r\n    }\r\n\r\n    public export(): ISerializedInteractableWithSingleBitSavedState {\r\n        return {\r\n            ...super.export(),\r\n            savedState: this._savedState\r\n        };\r\n    }\r\n\r\n    public get savedState(): boolean {\r\n        return this._savedState;\r\n    }\r\n\r\n    public paint(): void {\r\n        if (this._savedState !== this.currentState) {\r\n            this._savedState = this.currentState;\r\n            super._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public reload(): void {\r\n        this.setCurrentState(this.savedState);\r\n        this.setPrevState(false);\r\n    }\r\n}\r\n\r\nexport type LogicGateTypes = 'and' | 'or' | 'xor' | 'nand' | 'nor' | 'xnor';\r\n\r\nconst LogicGateKindSequence: Array<LogicGateTypes> = ['and', 'or', 'xor', 'nand', 'nor', 'xnor'];\r\n\r\nexport type ISerializedLogicGate = ISerializedInteractableWithSingleBitSavedState\r\n\r\nfunction deserializeLogicGate(serialized: Record<string,unknown>, kind: LogicGateTypes): ISerializedLogicGate {\r\n    return validateAndDeserializeInteractableWithSavedState(serialized, kind, false);\r\n}\r\n\r\nexport class LogicGate extends InteractableWithSingleBitSavedState {\r\n    private _kind: LogicGateTypes;\r\n\r\n    constructor(props: Omit<ISerializedLogicGate, 'inputs'>) {\r\n        super(props);\r\n        if (props.kind === 'timer' || props.kind === 'input') {\r\n            throw new Error(\"Caller should prevent this\");\r\n        }\r\n\r\n        this._kind = props.kind;\r\n    }\r\n\r\n    public get kind(): LogicGateTypes {\r\n        return this._kind;\r\n    }\r\n\r\n    public set kind(newValue: LogicGateTypes) {\r\n        this._kind = newValue;\r\n        this._emitStateChanged();\r\n        this.paint();\r\n    }\r\n\r\n    public twiddle(direction: -1 | 1): void {\r\n        let index = LogicGateKindSequence.indexOf(this._kind);\r\n        index = index + direction;\r\n        if (index < 0) {\r\n            index += LogicGateKindSequence.length;\r\n        }\r\n        else if (index >= LogicGateKindSequence.length) {\r\n            index -= LogicGateKindSequence.length;\r\n        }\r\n\r\n        this.kind = LogicGateKindSequence[index];\r\n        this.calculate();\r\n        this.paint();\r\n    }\r\n\r\n    public calculate(): void {\r\n        // This becomes the sum of all the inputs where the previous state is true\r\n        const numActivatedInputs = this.inputs.reduce((a, b) => a + (b.prevState ? 1 : 0), 0);\r\n        let calculatedState: boolean;\r\n        switch(this.kind) {\r\n            case 'and':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs === this.inputs.length;\r\n                break;\r\n            case 'or':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs > 0;\r\n                break;\r\n            case 'xor':\r\n                calculatedState = numActivatedInputs % 2 === 1;\r\n                break;\r\n            case 'nand':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs !== this.inputs.length;\r\n                break;\r\n            case 'nor':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs === 0;\r\n                break;\r\n            case 'xnor':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs % 2 === 0;\r\n                break;\r\n        }\r\n        this.setCurrentState(calculatedState);\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        this.setCurrentState(this.inputs.length > 0 && (this.kind === 'nand' || this.kind === 'nor' || this.kind === 'xnor'));\r\n        this.setPrevState(false);\r\n        this.paint();\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 'unlimited';\r\n    }\r\n\r\n    export(): ISerializedLogicGate {\r\n        return {\r\n            ...super.export(),\r\n            kind: this._kind\r\n        };\r\n    }\r\n}\r\n\r\nexport type ISerializedInput = ISerializedInteractableWithSingleBitSavedState;\r\n\r\nfunction validateAndNormalizeInput(serialized: Record<string,unknown>, kind: 'input' | 'input-on' | 'input-off'): ISerializedLogicGate {\r\n    return validateAndDeserializeInteractableWithSavedState(serialized, 'input', kind === 'input-on');\r\n}\r\n\r\n\r\nexport class Input extends InteractableWithSingleBitSavedState {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    twiddle(_direction: -1 | 1): void {\r\n        this.setCurrentState(!this.currentState);\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 0;\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        this.setCurrentState(false);\r\n        this.setPrevState(false);\r\n        this.paint();\r\n    }\r\n}\r\n\r\nexport interface ISerializedTimer extends ISerializedInteractable {\r\n    tickStorage: Array<boolean>;\r\n}\r\n\r\nfunction validateAndNormalizeTimer(serialized: Record<string,unknown>): ISerializedTimer {\r\n    let rawTickStorage: unknown;\r\n    if (hasOwnProperty(serialized, 'tickStorage')) {\r\n        rawTickStorage = serialized.tickStorage;\r\n    }\r\n\r\n    if (hasOwnProperty(serialized, 'timerTickStorage')) {\r\n        rawTickStorage = serialized.timerTickStorage;\r\n    }\r\n\r\n    if (rawTickStorage === undefined || !Array.isArray(rawTickStorage) || !rawTickStorage.every(i => typeof(i) === 'boolean')) {\r\n        throw new Error(\"Timer interactables should have a boolean array named 'tickStorage'\");\r\n    }\r\n\r\n    return {\r\n        ...deserializeInteractable(serialized, 'timer'),\r\n        tickStorage: rawTickStorage\r\n    };\r\n}\r\n\r\nexport class Timer extends Interactable {\r\n    private readonly _tickStorage: Array<boolean>;\r\n\r\n    public constructor(serialized: Omit<ISerializedTimer, 'inputs'>) {\r\n        super(serialized);\r\n        this._tickStorage = [ ...serialized.tickStorage ];\r\n    }\r\n\r\n    public get tickStorage(): Array<boolean> {\r\n        return [...this._tickStorage];\r\n    }\r\n\r\n    public export(): ISerializedTimer {\r\n        return {\r\n            ...super.export(),\r\n            kind: 'timer',\r\n            tickStorage: this._tickStorage,\r\n        };\r\n    }\r\n\r\n    public calculate(): void {\r\n        this.setCurrentState(this._tickStorage[this._tickStorage.length-1]);\r\n        this._tickStorage[0] = this.inputs.length > 0 && this.inputs[0].prevState;\r\n    }\r\n\r\n    public apply(): void {\r\n        this.setPrevState(this.currentState);\r\n        // Advance everything in the array\r\n        for (let i = 0; i < this._tickStorage.length-1; ++i) {\r\n            this._tickStorage[this._tickStorage.length-1-i] = this._tickStorage[this._tickStorage.length-2-i];\r\n        }\r\n        this.setCurrentState(this._tickStorage[this._tickStorage.length]);\r\n        // tickStorage[0] will be set by calculate - it's not possible to set it here because\r\n        // it has to come from its input, which hasn't finished its apply cycle yet.\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 1;\r\n    }\r\n}\r\n\r\n","import { EventEmitter } from 'events';\r\nimport pako from 'pako';\r\nimport { hasOwnProperty, Interactable, ISerializedInteractable } from './Model';\r\n\r\n\r\nexport interface IEventArgsSimulator {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport interface IEventArgsTick extends IEventArgsSimulator {\r\n    tick: number;\r\n}\r\n\r\nexport interface IEventArgsInteractableAdded extends IEventArgsSimulator {\r\n    interactable: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractableRemoved extends IEventArgsSimulator {\r\n    interactable: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractablesReset extends IEventArgsSimulator {\r\n    oldInteractables: Array<Interactable>;\r\n}\r\n\r\nexport interface IEventArgsSimulatorRunStateChanged extends IEventArgsSimulator {\r\n    newRunState: boolean;\r\n}\r\n\r\nexport interface IInteractableLink {\r\n    source: Interactable;\r\n    target: Interactable;\r\n}\r\n\r\nexport type ISerializedSimulator = Array<ISerializedInteractable>\r\n\r\nexport class Simulator {\r\n    private _nextTickTimeoutId: NodeJS.Timeout | undefined;\r\n    private _pauseInterval: number;\r\n    private readonly _events: EventEmitter;\r\n\r\n    public currentTick: number; // TODO: make it readonly to outside callers\r\n    public isRunning: boolean; // TODO: make it readonly to outside callers\r\n    public interactables: Array<Interactable>;\r\n\r\n    constructor(serialized?: unknown | undefined) {\r\n        this._events = new EventEmitter();\r\n        this.currentTick = 0;\r\n        this.isRunning = false;\r\n        this._nextTickTimeoutId = undefined;\r\n        this._pauseInterval = 250;\r\n        this.interactables = [];\r\n        if (serialized !== undefined && serialized !== null) {\r\n            this.load(serialized);\r\n        }\r\n    }\r\n\r\n    public serialize(): ISerializedSimulator {\r\n        function buildSerializedWithInputs(interactable: Interactable, allInteractables: Array<Interactable>): ISerializedInteractable {\r\n            const serialized: ISerializedInteractable = interactable.export();\r\n            serialized.inputs = interactable.inputs.map(i => allInteractables.indexOf(i));\r\n            return serialized;\r\n        }\r\n        return this.interactables.map(i => buildSerializedWithInputs(i, this.interactables));\r\n    }\r\n\r\n    public load(serialized: unknown): void {\r\n        if (!Array.isArray(serialized)) {\r\n            throw new Error(\"Bad format - expected an array at the top level\");\r\n        }\r\n\r\n        // interactables that we get here have empty input lists\r\n        const interactables: Array<Interactable> = serialized.map(i => Interactable.validateAndDeserialize(i));\r\n        for (let i = 0; i < interactables.length; ++i) {\r\n            const serializedInteractable:unknown = serialized[i];\r\n            const deserializedInteractable: Interactable = interactables[i];\r\n\r\n            if (typeof(serializedInteractable) !== 'object' || serializedInteractable === null) {\r\n                throw new Error(\"Bad format - expected an array of objects at the top level\");\r\n            }\r\n\r\n            if (!hasOwnProperty(serializedInteractable, 'inputs')) {\r\n                throw new Error(\"Interactable is missing an 'inputs' array\");\r\n            }\r\n\r\n            if (!Array.isArray(serializedInteractable.inputs)) {\r\n                throw new Error(\"Interactable 'inputs' field should be an array of indices\");\r\n            }\r\n\r\n            for (const serializedInputIndex of serializedInteractable.inputs) {\r\n                if (typeof(serializedInputIndex) !== 'number') {\r\n                    throw new Error(\"'inputs' should consist of numbers\");\r\n                }\r\n\r\n                if (serializedInputIndex < 0 || serializedInputIndex >= interactables.length) {\r\n                    throw new Error(\"'inputs' has an index that is out of range\");\r\n                }\r\n\r\n                deserializedInteractable.addInput(interactables[serializedInputIndex]);\r\n            }\r\n        }\r\n\r\n        const oldInteractables = this.interactables;\r\n        this.interactables = interactables;\r\n        this._emitInteractablesReset( { simulator: this, oldInteractables: oldInteractables });\r\n\r\n        this.stopRunning();\r\n    }\r\n\r\n    public fitToSize(width: number, height: number, padX: number, padY: number): void {\r\n        if (this.interactables.every(i => i.x >= 0 && i.x < width-64 && i.y >= 0 && i.y < height-64)) {\r\n            // Seems to fit reasonably well already\r\n            return;\r\n        }\r\n\r\n        const maxX: number = this.interactables.reduce((previousValue, currentValue) => Math.max(previousValue, currentValue.x), 0);\r\n        const maxY: number = this.interactables.reduce((previousValue, currentValue) => Math.max(previousValue, currentValue.y), 0);\r\n        const minX: number = this.interactables.reduce((previousValue, currentValue) => Math.min(previousValue, currentValue.x), 999999);\r\n        const minY: number = this.interactables.reduce((previousValue, currentValue) => Math.min(previousValue, currentValue.y), 999999);\r\n\r\n        for (const i of this.interactables) {\r\n            const newX = padX + (i.x - minX) * (width - 2*padX - 64) / maxX;\r\n            const newY = padY + (i.y - minY) * (height - 2*padY - 64) / maxY;\r\n            i.setPosition(newX, newY);\r\n        }\r\n    }\r\n\r\n    public gameReload(): void {\r\n        for (const i of this.interactables) {\r\n            i.reload();\r\n        }\r\n\r\n        this.currentTick = 0;\r\n        this._emitTick();\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        for (const i of this.interactables) {\r\n            i.putOnLift();\r\n        }\r\n    }\r\n\r\n    public takeOffLift(): void {\r\n        for (const i of this.interactables) {\r\n            i.paint();\r\n        }\r\n    }\r\n\r\n    public serializeToCompressedQueryStringFragment(): string {\r\n        const jsonSerialized: string = JSON.stringify(this.serialize());\r\n        const compressed: Uint8Array = pako.deflate(jsonSerialized);\r\n        const sharableString: string = Buffer.from(compressed).toString('base64');\r\n        return encodeURIComponent(sharableString);\r\n    }\r\n\r\n    public static decompressQueryStringFragment(queryString: string): unknown {\r\n        const base64: string = decodeURIComponent(queryString);\r\n        const compressedData: Uint8Array = Buffer.from(base64, 'base64');\r\n\r\n        const serializedString: string = pako.inflate(compressedData, { to: 'string' });\r\n        return JSON.parse(serializedString);\r\n    }\r\n\r\n    public startRunning(): void {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this._nextTickTimeoutId = setTimeout(this._handleTickTimeout.bind(this), this._pauseInterval);\r\n\r\n        this._events.emit('runStateChanged', { simulator: this, newRunState: this.isRunning });\r\n    }\r\n\r\n    public stopRunning(): void {\r\n        if (!this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this.isRunning = false;\r\n        if (this._nextTickTimeoutId) {\r\n            clearTimeout(this._nextTickTimeoutId);\r\n        }\r\n\r\n        this._nextTickTimeoutId = undefined;\r\n\r\n        this._events.emit('runStateChanged', { simulator: this, newRunState: this.isRunning });\r\n    }\r\n\r\n    public advanceOne(): void {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this._advanceOne();\r\n    }\r\n\r\n    public add(interactable: Interactable): void {\r\n        this.interactables.push(interactable);\r\n        this._events.emit(EventNames.interactableAdded, { simulator: this, interactable: interactable } as IEventArgsInteractableAdded);\r\n    }\r\n\r\n    public remove(interactable: Interactable): boolean {\r\n        let didRemove = false;\r\n        for (let i = this.interactables.length-1; i >= 0; --i) {\r\n            if (this.interactables[i] === interactable) {\r\n                didRemove = true;\r\n                this.interactables.splice(i ,1);\r\n            }\r\n        }\r\n        for (const i of this.interactables) {\r\n            i.removeInput(interactable);\r\n        }\r\n\r\n        if (didRemove)\r\n        {\r\n            this._events.emit(EventNames.interactableRemoved, { simulator: this, interactable: interactable } as IEventArgsInteractableRemoved);\r\n        }\r\n\r\n        return didRemove;\r\n    }\r\n\r\n    public getLinks(): Array<IInteractableLink> {\r\n        return this.interactables\r\n            .map(target => target.inputs\r\n                .map(function(source) {return {source: source, target: target}}))\r\n            .reduce((a,b) => a.concat(b), []);\r\n    }\r\n\r\n    private _advanceOne(): void {\r\n        ++this.currentTick;\r\n        this._emitTick();\r\n\r\n        for (const i of this.interactables) {\r\n            i.apply();\r\n        }\r\n        for (const i of this.interactables) {\r\n            i.calculate();\r\n        }\r\n    }\r\n\r\n    public onTick(handler: (eventArgs: IEventArgsTick) => void): void {\r\n        this._events.on(EventNames.tick, handler);\r\n    }\r\n\r\n    public offTick(handler: (eventArgs: IEventArgsTick) => void): void {\r\n        this._events.off(EventNames.tick, handler);\r\n    }\r\n\r\n    private _emitTick() {\r\n        this._events.emit(EventNames.tick, { simulator: this, tick: this.currentTick } as IEventArgsTick);\r\n    }\r\n\r\n    public onInteractableAdded(handler: (EventTarget: IEventArgsInteractableAdded) => void): void {\r\n        this._events.on(EventNames.interactableAdded, handler);\r\n    }\r\n\r\n    public offInteractableAdded(handler: (EventTarget: IEventArgsInteractableAdded) => void): void {\r\n        this._events.off(EventNames.interactableAdded, handler);\r\n    }\r\n\r\n    public onInteractableRemoved(handler: (EventTarget: IEventArgsInteractableRemoved) => void): void {\r\n        this._events.on(EventNames.interactableRemoved, handler);\r\n    }\r\n\r\n    public offInteractableRemoved(handler: (EventTarget: IEventArgsInteractableRemoved) => void): void {\r\n        this._events.off(EventNames.interactableRemoved, handler);\r\n    }\r\n\r\n    public onRunStateChanged(handler: (EventTarget: IEventArgsSimulatorRunStateChanged) => void): void {\r\n        this._events.on('runStateChanged', handler);\r\n    }\r\n\r\n    public offRunStateChanged(handler: (EventTarget: IEventArgsSimulatorRunStateChanged) => void): void {\r\n        this._events.off('runStateChanged', handler);\r\n    }\r\n\r\n    public onInteractablesReset(handler: (EventTarget: IEventArgsInteractablesReset) => void): void {\r\n        this._events.on('interactablesReset', handler);\r\n    }\r\n\r\n    public offInteractablesReset(handler: (EventTarget: IEventArgsInteractablesReset) => void): void {\r\n        this._events.off('interactablesReset', handler);\r\n    }\r\n\r\n    private _emitInteractablesReset(eventArgs: IEventArgsInteractablesReset )\r\n    {\r\n        this._events.emit('interactablesReset', eventArgs);\r\n    }\r\n\r\n    private _handleTickTimeout(): void {\r\n        this._advanceOne();\r\n        this._nextTickTimeoutId = setTimeout(this._handleTickTimeout.bind(this), this._pauseInterval);\r\n    }\r\n}\r\n\r\nconst EventNames = {\r\n    // This is emitted whenever the clock is actually advanced.  State calculated in\r\n    // 'pretick' should now become the current state.\r\n    tick: 'tick',\r\n\r\n    // A new component has been added to the model (argument is the new item)\r\n    interactableAdded: 'interactableAdded',\r\n\r\n    // A component has been removed from the model (argument is the removed item)\r\n    interactableRemoved: 'interactableRemoved',\r\n};\r\n"],"sourceRoot":""}