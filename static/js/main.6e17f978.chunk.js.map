{"version":3,"sources":["TickCounter.tsx","FloatingErrorMessage.tsx","Buttons.tsx","ViewModel.tsx","App.tsx","reportWebVitals.ts","index.ts","Model.ts","Simulator.ts"],"names":["TickCounter","props","React","currentTick","setCurrentTick","width","setWidth","textRef","handleTick","simulator","current","text","toString","onTick","offTick","y","top","x","right","ref","fill","fontSize","timeout","show","message","error","document","getElementById","Error","innerText","classList","add","clearTimeout","setTimeout","remove","undefined","pressedScalingFactor","ToolTip","toolTipId","timeoutHandle","_handleTimeout","element","style","visibility","left","Math","max","buttonWidth","clientWidth","clientHeight","this","ToolBarButton","isPressed","setIsPressed","isHovering","setIsHovering","tooltip","clearTimer","buttonHeight","onMouseEnter","startTimer","onMouseLeave","eventArgs","onDragStart","evt","offsetY","onMouseDown","onMouseUp","onClicked","scaleX","scaleY","children","height","strokeWidth","stroke","isEnabled","useIsRunning","model","isRunning","setIsRunning","handleRunStateChanged","onRunStateChanged","offRunStateChanged","StartStopButton","content","points","lineCap","closed","stopRunning","startRunning","SingleStepButton","advanceOne","LogicGateButton","kind","tickStorage","hourglassDelta","index","l","length","fromEnd","radius","rectHeight","map","value","drawingWidth","drawingHeight","image","ViewModel","selected","Model","toggle","FloatingErrorMessage","prototype","offsetX","Array","savedState","onBeginDrag","event","PaintButton","paint","PutOnLiftButton","putOnLift","TakeOffLiftButton","takeOffLift","DeleteButton","CopyLinkButton","a","navigator","clipboard","alert","url","window","location","origin","pathname","serializeToCompressedQueryStringFragment","writeText","SaveToFileButton","file","File","JSON","stringify","serialize","type","FileSaver","saveAs","LoadFromFileButton","fileElem","handleFileGiven","files","reader","FileReader","onload","jsonContent","fileContents","result","parse","err","load","readAsText","addEventListener","removeEventListener","click","ReloadButton","gameReload","_assets","Interactable","useState","setPosition","currentState","isOn","setIsOn","groupRef","useRef","handleChangeType","newKind","handleTicksChange","delta","changeSize","handleRecord","isRecording","useEffect","handleMoved","onMoved","offMoved","handleStateChanged","onStateChanged","offStateChanged","groupContent","push","isSelected","SavedStateIndicator","LogicGate","Input","Timer","onClick","e","description","generatedDescription","Marked","generatedContent","innerHTML","draggable","onContextMenu","preventDefault","menu","display","pageY","pageX","onclick","handleToggleValue","tooltipEditor","textArea","focus","handleEditDescription","shiftKey","stopDrag","onLinkStart","onDragMove","pos","target","absolutePosition","onDragEnd","onMoveCompleted","setSavedState","setKind","k","setTickStorage","tickValue","getEndpointsOutsideOfBox","sourceX","sourceY","targetX","targetY","abs","sign","yTrim","xTrim","LinkArrow","source","prevState","isLit","setIsLit","setPositions","handleSourceOrTargetMoved","pointerLength","pointerWidth","getScreenLayout","canvasHeight","innerHeight","canvasWidth","numRows","hSpaceBetweenButtons","buttonRowHeight","buttonRowY","n","vSpaceBetweenButtons","maxSensibleDropX","maxSensibleDropY","buttonRowX","App","interactables","setInteractables","getLinks","links","setLinks","setSelected","linkSource","setLinkSource","linkTargetX","linkTargetY","setLinkTarget","createByDragPrototype","setCreateByDragPrototype","screenLayout","setScreenLayout","considerResizeOnNextRender","setConsiderResizeOnNextRender","stageRef","handleInteractableClicked","ctrlKey","handleLinkStart","handleNewInteractableDrag","handleMoveCompleted","handleInteractablesChanged","indexOf","handleInteractablesReset","onInteractableAdded","onInteractableRemoved","onInteractablesReset","offInteractableAdded","offInteractableRemoved","offInteractablesReset","contentDiv","o","ResizeObserver","observe","disconnect","handleKeyPress","xy","getPointerPosition","doLogicGateKey","newInteractable","key","console","debug","container","tabIndex","menuItemDelete","handleKeyDown","toolTipEditor","handleOkInToolTipEditor","handleCancelInToolTipEditor","onkeydown","stopPropagation","onkeyup","onkeypress","pointer","fitToSize","i","addInput","onMouseMove","id","link","onWindowClick","toggleHelp","helpButton","sidebarDiv","autoSave","storeInCookie","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","onComplete","assetKeys","Konva","Image","fromURL","img","replace","Object","keys","Simulator","loadFromQsAndCookie","render","hasOwnProperty","obj","prop","deserializeInteractable","serialized","inputs","_x","_y","_events","_inputs","_description","_prevState","_currentState","EventEmitter","idCounter","_emitMoved","newValue","_emitStateChanged","newInput","inputLimit","existingIndex","splice","indexInTarget","calculate","deadInput","setPrevState","handler","on","off","emit","validateAndDeserializeInteractableWithSavedState","validateAndNormalizeInput","rawTickStorage","timerTickStorage","isArray","every","validateAndNormalizeTimer","deserializeLogicGate","defaultSavedState","InteractableWithSingleBitSavedState","_savedState","setCurrentState","_kind","calculatedState","numActivatedInputs","reduce","b","_savedToggles","_tickCount","_tickStorage","actualDeletes","min","actualAdds","_nextTickTimeoutId","_pauseInterval","interactable","allInteractables","export","buildSerializedWithInputs","validateAndDeserialize","serializedInteractable","deserializedInteractable","serializedInputIndex","oldInteractables","_emitInteractablesReset","cookieState","loadFrom","queryString","search","ca","cookie","split","cookieIsForThisQueryString","c","trimStart","startsWith","substring","_hashCode","decompressQueryStringFragment","d","Date","setTime","getTime","extraSlag","toUTCString","padX","padY","maxX","previousValue","currentValue","maxY","minX","minY","newX","newY","reload","_emitTick","jsonSerialized","compressed","pako","deflate","sharableString","Buffer","from","encodeURIComponent","_handleTickTimeout","bind","newRunState","_advanceOne","EventNames","interactableAdded","didRemove","removeInput","interactableRemoved","concat","apply","tick","s","charCodeAt","base64","decodeURIComponent","compressedData","serializedString","inflate","to"],"mappings":"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","file":"static/js/main.6e17f978.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Simulator } from \"./Simulator\";\r\nimport { Text } from 'react-konva';\r\nimport Konva from 'konva';\r\n\r\nexport interface TickCounterProps {\r\n    simulator: Simulator;\r\n    right: number;\r\n    top: number;\r\n}\r\n\r\n/**\r\n * Implements the tick counter, the trickiest bit being that it wants to render it in the top-right.\r\n * This isn't done in a very react-like way because we need to set the 'x' position relative to the\r\n * width of the text, and we don't know the width of the text until the DOM renders it.  What we really\r\n * want, in any case, is a text element that's right-aligned, and that's just not in Konva as far as I\r\n * can see.  Probably because Konva can do it easily enough.  See the code in @see _handleTick.\r\n */\r\nexport function TickCounter(props: TickCounterProps): JSX.Element {\r\n    const [currentTick, setCurrentTick] = React.useState(0);\r\n    const [width, setWidth] = React.useState(20);;\r\n    const textRef: React.RefObject<Konva.Text> = React.useRef<Konva.Text>(null);\r\n\r\n    // Set up the tick listener\r\n    React.useEffect(() => {\r\n        function handleTick() {\r\n            setCurrentTick(props.simulator.currentTick);\r\n\r\n            if (textRef.current === null) {\r\n                // Shouldn't happen\r\n                return;\r\n            }\r\n    \r\n            // Somehow, setting the text changes width(), but somehow actually\r\n            // doesn't change the screen.  (That is, without setting the text\r\n            // in the render, it has no effect).\r\n            textRef.current.text(props.simulator.currentTick.toString());\r\n            setWidth(textRef.current.width());\r\n        }\r\n    \r\n        props.simulator.onTick(handleTick);\r\n        handleTick();\r\n\r\n        return () => {props.simulator.offTick(handleTick);}\r\n    }, [props.simulator]);\r\n\r\n    return (\r\n        <Text y={props.top}\r\n              x={props.right - width}\r\n              ref={textRef}\r\n              fill='red'\r\n              text={currentTick.toString()}\r\n              fontSize={30}/>\r\n    );\r\n}","let timeout: NodeJS.Timeout | undefined;\r\n\r\nexport function show(message: string): void {\r\n    const error = document.getElementById(\"error\");\r\n    if (error === null) {\r\n        throw new Error(\"missing error element\");\r\n    }\r\n\r\n    error.innerText = message;\r\n    error.classList.add('visible');\r\n\r\n    if (timeout) {\r\n        clearTimeout(timeout);\r\n    }\r\n\r\n    timeout = setTimeout(() => {\r\n        error.classList.remove('visible');\r\n        timeout = undefined;\r\n    }, 4000);\r\n}","import * as React from \"react\";\r\nimport { Image, Line, Rect, Group, Circle, Text } from \"react-konva\";\r\nimport { Simulator } from \"./Simulator\";\r\nimport * as ViewModel from \"./ViewModel\";\r\nimport * as Model from \"./Model\";\r\nimport { Interactable } from \"./Model\";\r\nimport { KonvaEventObject } from \"konva/types/Node\";\r\nimport FileSaver from 'file-saver';\r\nimport * as FloatingErrorMessage from \"./FloatingErrorMessage\";\r\n\r\ninterface IToolBarButtonProps {\r\n    x: number;\r\n    y: number;\r\n    isEnabled: boolean;\r\n    children: Array<JSX.Element> | JSX.Element;\r\n    onDragStart?: ((eventArgs: KonvaEventObject<MouseEvent>) => void) | undefined;\r\n    onClicked: (eventArgs: KonvaEventObject<MouseEvent>) => void;\r\n    toolTipId: string;\r\n}\r\n\r\nconst buttonWidth = 64;\r\nconst buttonHeight = 64;\r\nconst pressedScalingFactor = 1.05;\r\n\r\nexport class ToolTip {\r\n    private timeoutHandle: NodeJS.Timeout | undefined;\r\n\r\n    constructor(private readonly toolTipId: string, public x: number, public y: number)\r\n    {\r\n    }\r\n\r\n    /**  Starts a timer that, if it expires and not cleared, will show the tooltip. */\r\n    public startTimer(): void {\r\n        if (!this.timeoutHandle && document.getElementById(this.toolTipId)) {\r\n            this.timeoutHandle = setTimeout(this._handleTimeout, 1000);\r\n        }        \r\n    }\r\n\r\n    /** Hides the tooltip if it's shown and prevents it popping up if it hasn't. */\r\n    public clearTimer(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n            this.timeoutHandle = undefined;\r\n        }\r\n\r\n        const element: HTMLElement | null = document.getElementById(this.toolTipId);\r\n        if (!element) {\r\n            throw new Error(\"toolTipId is defined, but not in the document\");\r\n        }\r\n\r\n        element.style.visibility = 'hidden';\r\n    }\r\n    \r\n    private _handleTimeout: () => void = () => {\r\n        this.timeoutHandle = undefined;\r\n        if (!this.toolTipId) {\r\n            return;\r\n        }\r\n\r\n        const element: HTMLElement | null = document.getElementById(this.toolTipId);\r\n        if (!element) {\r\n            throw new Error(\"toolTipId is defined, but not in the document\");\r\n        }\r\n\r\n        element.style.visibility = 'visible';\r\n        const left:number = Math.max(0, this.x + buttonWidth/2 - element.clientWidth/2);\r\n        const top: number = Math.max(0, this.y - element.clientHeight - 5);\r\n        element.style.top = top + 'px';\r\n        element.style.left = left + 'px';\r\n    }\r\n}\r\n\r\n\r\nfunction ToolBarButton(props: IToolBarButtonProps) {\r\n    const [isPressed, setIsPressed] = React.useState(false);\r\n    const [isHovering, setIsHovering] = React.useState(false);\r\n    const [tooltip] = React.useState(new ToolTip(props.toolTipId, props.x, props.y));\r\n\r\n    // This destroys the tooltip and timer when the button is destroyed.\r\n    React.useEffect(() => {\r\n        return () => tooltip.clearTimer();\r\n    }, [tooltip]); // TODO: I know this would work if the list were empty, but the closure includes tooltip...\r\n\r\n    function handleMouseEnter(): void {\r\n        setIsHovering(true);\r\n        tooltip.startTimer();\r\n    }\r\n\r\n    function handleMouseLeave(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        // If the cursor is moving roughly upward, call it a drag.\r\n        if (props.onDragStart && isPressed && eventArgs.evt.offsetY < props.y+32) {\r\n            props.onDragStart(eventArgs);\r\n        }\r\n\r\n        setIsHovering(false);\r\n        setIsPressed(false);\r\n        tooltip.clearTimer();\r\n    }\r\n\r\n    function handleMouseDown(): void {\r\n        setIsPressed(true);\r\n        tooltip.clearTimer();\r\n    }\r\n\r\n    function handleMouseUp(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        setIsPressed(false);\r\n        if (props.onClicked) {\r\n            props.onClicked(eventArgs);\r\n        }\r\n        tooltip.startTimer();\r\n    }\r\n\r\n    return <Group x={props.x - (isPressed ? buttonWidth*((pressedScalingFactor - 1)/2) : 0)}\r\n                      y={props.y - (isPressed ? buttonHeight*((pressedScalingFactor - 1)/2) : 0)}\r\n                      onMouseEnter={handleMouseEnter}\r\n                      onMouseLeave={handleMouseLeave}\r\n                      onMouseDown={handleMouseDown}\r\n                      onMouseUp={handleMouseUp}\r\n                      scaleX={isPressed ? pressedScalingFactor : 1}\r\n                      scaleY={isPressed ? pressedScalingFactor : 1}>\r\n                {props.children}\r\n                <Rect x={0} y={0} height={64} width={64}\r\n                      strokeWidth={2} stroke={isHovering ? 'black' : 'grey'}\r\n                      fill={props.isEnabled ? 'transparent' : '#80808080'} />\r\n            </Group>;\r\n}\r\n\r\n\r\ninterface IStartStopButtonProps {\r\n    x: number;\r\n    y: number;\r\n    model: Simulator,\r\n}\r\n\r\nfunction useIsRunning(model: Simulator) {\r\n    const [isRunning, setIsRunning] = React.useState(model.isRunning);\r\n\r\n    React.useEffect(() => {\r\n        function handleRunStateChanged() {\r\n            setIsRunning(model.isRunning);\r\n        }\r\n        model.onRunStateChanged(handleRunStateChanged);\r\n        return () => model.offRunStateChanged(handleRunStateChanged);\r\n    }, [model]);\r\n\r\n    return isRunning;\r\n}\r\n\r\nexport function StartStopButton(props: IStartStopButtonProps): JSX.Element {\r\n    const isRunning = useIsRunning(props.model);\r\n\r\n    const content: JSX.Element | Array<JSX.Element> = isRunning ?\r\n    [\r\n        <Line key='1' points={[32-5, 32-12, 32-5, 32+12]} lineCap='butt' strokeWidth={5} stroke='red'/>,\r\n        <Line key='2' points={[32+5, 32-12, 32+5, 32+12]} lineCap='butt' strokeWidth={5} stroke='red'/>\r\n    ] : <Line key='3'  points={[32-16, 32-16, 32+12, 32, 32-16, 32+16]}\r\n          strokeWidth={4}\r\n          stroke='green'\r\n          fill='green'\r\n          closed={true}/>;\r\n\r\n    function handleClick(): void {\r\n        if (props.model.isRunning) {\r\n            props.model.stopRunning();\r\n        } else {\r\n            props.model.startRunning();\r\n        }\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='playPauseTip' isEnabled={true} onClicked={handleClick}>\r\n        {content}\r\n    </ToolBarButton>;\r\n}\r\n\r\n\r\nexport interface ISingleStepButtonProps {\r\n    x: number;\r\n    y: number;\r\n    model: Simulator,\r\n}\r\n\r\nexport function SingleStepButton(props: ISingleStepButtonProps): JSX.Element {\r\n    const isRunning = useIsRunning(props.model);\r\n\r\n    function handleClick(): void {\r\n        props.model.advanceOne();\r\n    }\r\n    \r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='singleStepTip' isEnabled={true} onClicked={handleClick}>\r\n        <Line points={[32+12, 32, 32-16, 32+16, 32-16, 32-16, 32+12, 32, 32+12, 32-16, 32+12, 32+16]}\r\n        strokeWidth={4}\r\n        stroke={isRunning ? '#305030ff' : '#008000ff'}\r\n        closed={false}/>\r\n    </ToolBarButton>;\r\n}\r\n\r\n\r\nexport interface IDragNewInteractableDragEventArgs {\r\n    prototype: Model.Interactable;\r\n    event: KonvaEventObject<MouseEvent>;\r\n}\r\n\r\ninterface ILogicGateButtonProps {\r\n    x: number;\r\n    y: number;\r\n    kind: Model.LogicGateTypes | 'timer' | 'input';\r\n    selected: Model.Interactable | undefined;\r\n    onBeginDrag: (eventArgs: IDragNewInteractableDragEventArgs) => void;\r\n}\r\n\r\nexport function LogicGateButton(props: ILogicGateButtonProps): JSX.Element {\r\n\r\n    const toolTipId = props.kind === 'input'\r\n        ? 'inputTip'\r\n        : (props.kind === 'timer' \r\n            ? 'timerTip'\r\n            : 'logicGateTip');\r\n\r\n    function handleClick(): void {\r\n        if (!props.selected) {\r\n            FloatingErrorMessage.show(\"No logic gate is selected (click on one in the field).\")\r\n            return;\r\n        }\r\n\r\n        if (props.kind === 'input' && props.selected instanceof Model.Input) {\r\n            props.selected.toggle();\r\n        } else if (props.kind === 'timer' && props.selected instanceof Model.Timer) {\r\n            FloatingErrorMessage.show(\"Timers can't be changed like this.\");\r\n            // no action\r\n        } else if (props.kind !== 'timer' && props.kind !== 'input' && props.selected instanceof Model.LogicGate) {\r\n            props.selected.kind = props.kind;\r\n        } else {\r\n            FloatingErrorMessage.show(\"Can't convert between inputs, timers and gates.  (You have to delete and recreate them).\");\r\n        }\r\n    }\r\n\r\n    function handleDragStart(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        let prototype: Model.Interactable;\r\n        switch (props.kind) {\r\n            case 'timer':\r\n                prototype = new Model.Timer({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, kind: props.kind, tickStorage: new Array<boolean>(10).fill(false) });\r\n                break;\r\n            case 'input':\r\n                prototype = new Model.Input({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, savedState: false, kind: props.kind});\r\n                break;\r\n            default:\r\n                prototype = new Model.LogicGate({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, savedState: false, kind: props.kind});\r\n                break;\r\n        }\r\n\r\n        props.onBeginDrag({\r\n            prototype: prototype,\r\n            event: eventArgs});\r\n    }\r\n\r\n    let content: JSX.Element | Array<JSX.Element> | undefined;\r\n    const tickStorage = [true, true, true, true, true, true, true, false, false, false];\r\n    function hourglassDelta(index: number): number {\r\n        const l = tickStorage.length;\r\n        const fromEnd = index < tickStorage.length/2 ? index : tickStorage.length-1-index;\r\n        if (fromEnd < l * .2) {\r\n            return 0;\r\n        }\r\n        else if (fromEnd > l * .4) {\r\n            return 6;\r\n        }\r\n        else {\r\n            return 6*(fromEnd - l*.2)/(l*.2);\r\n        }\r\n    }\r\n    switch(props.kind) {\r\n        case 'input':\r\n            content = <Circle radius={22} x={32} y={32} strokeWidth={8} stroke='black'/>;\r\n            break;\r\n        case 'timer':\r\n            const drawingHeight = 64;\r\n            const drawingWidth = 64;\r\n            const horizontalOffset = 12;\r\n            const verticalOffset = 6;\r\n            const rectHeight = (drawingHeight - 2*verticalOffset) / tickStorage.length;\r\n        \r\n            content = tickStorage.map((value: boolean, index: number) =>\r\n            <Rect key={index.toString()}\r\n                            x={horizontalOffset + hourglassDelta(index) }\r\n                            width={drawingWidth - 2*horizontalOffset - 2*hourglassDelta(index)}\r\n                            y={drawingHeight - verticalOffset - rectHeight - index*(drawingHeight-2*verticalOffset)/tickStorage.length}\r\n                            height={rectHeight}\r\n                            strokeWidth={1}\r\n                            stroke='darkgrey'\r\n                            fill={value ? 'blue' : 'white'}/>);\r\n            break;\r\n        default:\r\n            content = <Image x={0} y={0} image={ViewModel._assets[props.kind].image()} />;\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId={toolTipId} isEnabled={true} onClicked={handleClick} onDragStart={handleDragStart}>{content}</ToolBarButton>;\r\n}\r\n\r\n\r\ninterface IPaintButtonProps {\r\n    x: number;\r\n    y: number;\r\n    selected: Model.Interactable | undefined;\r\n}\r\n\r\nexport function PaintButton(props: IPaintButtonProps): JSX.Element {\r\n    function handleClick(): void {\r\n        if (props.selected instanceof Model.InteractableWithSingleBitSavedState) {\r\n            props.selected.paint();\r\n        }\r\n        else {\r\n            FloatingErrorMessage.show(\"Timers always save their current state on reload, so painting them has no effect on its behavior\");\r\n        }\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='paintTip' isEnabled={true} onClicked={handleClick}>\r\n        <Image x={0} y={0} image={ViewModel._assets['paint'].image()} />\r\n    </ToolBarButton>\r\n}\r\n\r\n\r\ninterface ILiftButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\n\r\nexport function PutOnLiftButton(props: ILiftButtonProps): JSX.Element {\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='putOnLiftTip' isEnabled={true} onClicked={() => props.simulator.putOnLift()}>\r\n        <Line key='base'\r\n              points={[52, 48,  12, 48,  12, 28,  32, 28,  32, 12,  16, 12,  48, 12,  32,12,  32, 28,  52, 28,  52, 48 ]}\r\n              strokeWidth={4}\r\n              stroke='black'\r\n              closed={true}/>\r\n        <Line key='arrow'\r\n              points = {[18, 42,  32, 32,  46, 42,  18, 42]}\r\n              strokeWidth={1}\r\n              stroke='blue'\r\n              closed={true}\r\n              fill='blue'/>\r\n    </ToolBarButton>\r\n}\r\n\r\nexport function TakeOffLiftButton(props: ILiftButtonProps): JSX.Element {\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='takeOffLiftTip' isEnabled={true} onClicked={() => props.simulator.takeOffLift()}>\r\n        <Line key='base'\r\n              points={[52, 48,  12, 48,  12, 28,  32, 28,  32, 12,  16, 12,  48, 12,  32,12,  32, 28,  52, 28,  52, 48 ]}\r\n              strokeWidth={4}\r\n              stroke='black'\r\n              closed={true}/>\r\n        <Line key='arrow'\r\n              points = {[18, 32,  32, 42,  46, 32,  18, 32]}\r\n              strokeWidth={1}\r\n              stroke='blue'\r\n              closed={true}\r\n              fill='blue'/>\r\n    </ToolBarButton>\r\n}\r\n\r\ninterface IDeleteButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n    selected: Interactable | undefined;\r\n}\r\n\r\nexport function DeleteButton(props: IDeleteButtonProps): JSX.Element {\r\n    function handleClick(): void {\r\n        if (props.selected) {\r\n            props.simulator.remove(props.selected);\r\n        } else {\r\n            FloatingErrorMessage.show(\"Nothing is selected (click on a logic gate in the field to specify what should be deleted).\")\r\n        }\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='deleteTip' isEnabled={props.selected !== undefined} onClicked={handleClick}>\r\n        <Text text=\"&#128465;\" x={10} y={8} fontSize={64} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n\r\ninterface ICopyLinkButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\nexport function CopyLinkButton(props: ICopyLinkButtonProps): JSX.Element {\r\n    async function handleClick(): Promise<void> {\r\n        if (!navigator.clipboard) {\r\n            alert(\"Can't copy to clipboard - navigator.clipboard doesn't exist.  Perhaps you're using an older browser?\");\r\n            return;\r\n        }\r\n\r\n        const url: string = window.location.origin + window.location.pathname + '?' + props.simulator.serializeToCompressedQueryStringFragment();\r\n        try {\r\n            await navigator.clipboard.writeText(url);\r\n            alert(\"Copied the following URL to the clipboard:\\n\\n\" + url);\r\n        } catch (err) {\r\n            alert('navigator.clipboard.writeText failed!\\n\\n' + err);\r\n        }\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='shareLinkTip' isEnabled={true} onClicked={handleClick}>\r\n        <Text text=\"&#128279;\" x={6} y={14} fontSize={42} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n\r\ninterface ISaveToFileButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\nexport function SaveToFileButton(props: ISaveToFileButtonProps): JSX.Element {\r\n    function handleClick(): void {\r\n        const file = new File([JSON.stringify(props.simulator.serialize(), null, 4)], \"logicgatesim.json\", {type: \"text/plain;charset=utf-8\"});\r\n        FileSaver.saveAs(file);\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='saveTip' isEnabled={true} onClicked={handleClick}>\r\n        <Text text=\"&#128190;\" x={6} y={14} fontSize={42} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n\r\n\r\ninterface ILoadFromFileButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\nexport function LoadFromFileButton(props: ILoadFromFileButtonProps): JSX.Element {\r\n    const fileElem = document.getElementById(\"fileElem\") as HTMLInputElement;\r\n    if (!fileElem) {\r\n        throw new Error(\"index.html is busted - fileElem <input> is missing\");\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        function handleFileGiven(): void {\r\n            if (!fileElem.files || fileElem.files.length === 0) {\r\n                return;\r\n            }\r\n    \r\n            // hacky - no message when file load fails.\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                const fileContents: string = reader.result as string;\r\n                let jsonContent: unknown;\r\n                try\r\n                {\r\n                    jsonContent = JSON.parse(fileContents);\r\n                }\r\n                catch(err) {\r\n                    alert(\"Failed to load the file - are you sure this is a file generated from this app?  \" + err);\r\n                    return;\r\n                }\r\n    \r\n                try\r\n                {\r\n                    props.simulator.load(jsonContent);\r\n                }\r\n                catch(err) {\r\n                    alert(err);\r\n                }\r\n            };\r\n            reader.readAsText(fileElem.files[0]);\r\n        }\r\n    \r\n        fileElem.addEventListener('change', handleFileGiven, false);\r\n\r\n        return () => fileElem.removeEventListener('change', handleFileGiven);\r\n    }, [props.simulator, fileElem]);\r\n\r\n    function handleClick(): void {\r\n        fileElem.click();\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='loadTip' isEnabled={true} onClicked={handleClick}>\r\n        <Text text=\"&#128193;\" x={6} y={14} fontSize={42} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n\r\n\r\ninterface IReloadButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\nexport function ReloadButton(props: IReloadButtonProps): JSX.Element {\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='reloadTip' isEnabled={true} onClicked={() => props.simulator.gameReload()}>\r\n        <Text text=\"&#8645;\" x={16} y={14} fontSize={42} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport Konva from 'konva';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Image, Group, Rect, Circle, Line, Arrow} from 'react-konva';\r\nimport * as Model from './Model';\r\nimport { ToolTip } from './Buttons';\r\nimport { Marked } from '@ts-stack/markdown';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const _assets: any = {};\r\n\r\nexport interface IEventArgsInteractable {\r\n    model: Model.Interactable;\r\n    evt: MouseEvent;\r\n}\r\n\r\ninterface IInteractableProps {\r\n    model: Model.Interactable;\r\n    onClick?: (eventArgs: IEventArgsInteractable) => void;\r\n    onLinkStart?: (eventArgs: IEventArgsInteractable) => void;\r\n    onMouseUp?: (eventArgs: IEventArgsInteractable) => void;\r\n    onMoveCompleted?: (eventArgs: IEventArgsInteractable) => void;\r\n    key: string;\r\n    isSelected: boolean;\r\n}\r\n\r\nexport function Interactable(props: IInteractableProps): JSX.Element {\r\n    const [[x,y], setPosition] = useState([props.model.x, props.model.y]);\r\n    const [isOn, setIsOn] = useState(props.model.currentState);\r\n    const groupRef: React.RefObject<Konva.Group> = React.useRef<Konva.Group>(null);\r\n\r\n    function handleOnMouseUp(e: KonvaEventObject<MouseEvent>): void {\r\n        if (props.onMouseUp) {\r\n            props.onMouseUp({\r\n                evt: e.evt,\r\n                model: props.model\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleDragStart(e: KonvaEventObject<MouseEvent>): void {\r\n        // The gesture for dragging is left mouse button, and there seems no way to\r\n        // argue with Konva about it, except this.  We want to use left-mouse-button\r\n        // dragging to move a pointer, so if we see the shift key is not down, we\r\n        // cancel the drag and tell our parent about the link-start event.  We can't\r\n        // help anymore from here, as we don't get useful events.\r\n        if (!e.evt.shiftKey) {\r\n            if (!groupRef.current) {\r\n                throw new Error('group did not get set in render');\r\n            }\r\n\r\n            groupRef.current.stopDrag();\r\n\r\n            if (props.onLinkStart) {\r\n                props.onLinkStart({\r\n                    evt: e.evt,\r\n                    model: props.model\r\n                });\r\n            }\r\n        }\r\n        // Else it's a real drag event, let that go.\r\n    }\r\n\r\n    function handleDragMove(e: KonvaEventObject<MouseEvent>): void {\r\n        // The documentation gives no clue at all how to do this.  But there's a comment later:\r\n        // var scale = stage.scaleX();\r\n        // var new_pos = event.target.absolutePosition();\r\n        // new_pos.x = (new_pos.x - stage.x()) / scale;\r\n        // new_pos.y = (new_pos.y - stage.y()) / scale;\r\n        // draggedNode.move_to(new_pos);\r\n        //\r\n        // Gonna assume the stage isn't scaled.  (And might you be subject to the layer being scaled as well?)\r\n\r\n        const pos = e.target.absolutePosition();\r\n        props.model.setPosition(pos.x, pos.y);\r\n    }\r\n\r\n    function handleDragEnd(e: KonvaEventObject<MouseEvent>): void {\r\n        if (props.onMoveCompleted) {\r\n            props.onMoveCompleted({ evt: e.evt, model: props.model});\r\n        }\r\n    }\r\n\r\n    function handleClick(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        if (props.onClick) {\r\n            props.onClick({\r\n                evt: eventArgs.evt,\r\n                model: props.model,\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleChangeType(newKind: Model.LogicGateTypes): void {\r\n        if (props.model instanceof Model.LogicGate) {\r\n            props.model.kind = newKind\r\n        }\r\n        else {\r\n            throw Error(\"Expected a logic gate\")\r\n        }\r\n    }\r\n\r\n    function handleToggleValue(): void {\r\n        if (props.model instanceof Model.Input) {\r\n            props.model.toggle()\r\n        }\r\n        else {\r\n            throw Error(\"Expected an Input\")\r\n        }\r\n    }\r\n\r\n    function handleEditDescription(): void {\r\n        const tooltipEditor: any = document.getElementById('tooltipEditor')!;\r\n        tooltipEditor.model = props.model;\r\n        const textArea = (document.getElementById('tooltipText') as HTMLTextAreaElement)!;\r\n        textArea.value = props.model.description ?? '';\r\n        tooltipEditor.classList.add('visible');\r\n\r\n        // Can't just set the focus, because something about the remaining event propagation ends up setting focus\r\n        setTimeout(() => {\r\n            textArea.focus();\r\n        }, 100);\r\n    }\r\n\r\n    function handleTicksChange(delta: number): void {\r\n        (props.model as Model.Timer)!.changeSize(delta);\r\n    }\r\n\r\n    function handleRecord(isOn: boolean): void {\r\n        (props.model as Model.Input)!.isRecording = isOn;\r\n    }\r\n\r\n    function handleContextMenu(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        eventArgs.evt.preventDefault();\r\n        const menu = document.getElementById('interactableMenu')!;\r\n        menu.style.display = 'initial';\r\n        menu.style.top = eventArgs.evt.pageY + 'px';\r\n        menu.style.left = eventArgs.evt.pageX + 'px';\r\n\r\n        document.getElementById('menuItemToAnd')!.style.display = (props.model instanceof Model.LogicGate && props.model.kind !== 'and') ? '' : 'none';\r\n        document.getElementById('menuItemToNand')!.style.display = (props.model instanceof Model.LogicGate && props.model.kind !== 'nand') ? '' : 'none';\r\n        document.getElementById('menuItemToOr')!.style.display = (props.model instanceof Model.LogicGate && props.model.kind !== 'or') ? '' : 'none';\r\n        document.getElementById('menuItemToNor')!.style.display = (props.model instanceof Model.LogicGate && props.model.kind !== 'nor') ? '' : 'none';\r\n        document.getElementById('menuItemToXor')!.style.display = (props.model instanceof Model.LogicGate && props.model.kind !== 'xor') ? '' : 'none';\r\n        document.getElementById('menuItemToXnor')!.style.display = (props.model instanceof Model.LogicGate && props.model.kind !== 'xnor') ? '' : 'none';\r\n\r\n        document.getElementById('menuItemAddOneTick')!.style.display = (props.model instanceof Model.Timer) ? '' : 'none';\r\n        document.getElementById('menuItemAddFiveTicks')!.style.display = (props.model instanceof Model.Timer) ? '' : 'none';\r\n        document.getElementById('menuItemMinusOneTick')!.style.display = (props.model instanceof Model.Timer) ? '' : 'none';\r\n        document.getElementById('menuItemMinusFiveTicks')!.style.display = (props.model instanceof Model.Timer) ? '' : 'none';\r\n        \r\n        document.getElementById('menuItemToggle')!.style.display = (props.model instanceof Model.Input) ? '' : 'none';\r\n        document.getElementById('menuItemRecordOn')!.style.display = (props.model instanceof Model.Input && !props.model.isRecording) ? '' : 'none';\r\n        document.getElementById('menuItemRecordOff')!.style.display = (props.model instanceof Model.Input && props.model.isRecording) ? '' : 'none';\r\n        document.getElementById('menuItemPaint')!.style.display = (props.model instanceof Model.Timer) ? 'none' : '';\r\n        if (props.model instanceof Model.Input) {\r\n            document.getElementById('menuItemToggle')!.innerText = props.model.currentState ? 'Toggle off' : 'Toggle on';\r\n        }\r\n\r\n        document.getElementById('menuItemToAnd')!.onclick = () => handleChangeType('and');\r\n        document.getElementById('menuItemToNand')!.onclick = () => handleChangeType('nand');\r\n        document.getElementById('menuItemToOr')!.onclick = () => handleChangeType('or');\r\n        document.getElementById('menuItemToNor')!.onclick = () => handleChangeType('nor');\r\n        document.getElementById('menuItemToXor')!.onclick = () => handleChangeType('xor');\r\n        document.getElementById('menuItemToXnor')!.onclick = () => handleChangeType('xnor');\r\n        document.getElementById('menuItemToggle')!.onclick = () => handleToggleValue();\r\n        document.getElementById('menuItemDescribe')!.onclick = () => handleEditDescription();\r\n        document.getElementById('menuItemPaint')!.onclick = () => props.model.paint();\r\n\r\n        document.getElementById('menuItemAddOneTick')!.onclick = () => handleTicksChange(1);\r\n        document.getElementById('menuItemMinusOneTick')!.onclick = () => handleTicksChange(-1);\r\n        document.getElementById('menuItemAddFiveTicks')!.onclick = () => handleTicksChange(5);\r\n        document.getElementById('menuItemMinusFiveTicks')!.onclick = () => handleTicksChange(-5);\r\n        document.getElementById('menuItemRecordOn')!.onclick = () => handleRecord(true);\r\n        document.getElementById('menuItemRecordOff')!.onclick = () => handleRecord(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        function handleMoved() {\r\n            setPosition([props.model.x, props.model.y]);\r\n        }\r\n        props.model.onMoved(handleMoved);\r\n        return () => props.model.offMoved(handleMoved);\r\n    }, [props.model]);\r\n\r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setIsOn(props.model.currentState);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged);\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n\r\n\r\n    const [tooltip] = React.useState(new ToolTip('interactableTip', props.model.x, props.model.y));\r\n\r\n    function handleMouseEnter(): void {\r\n        if (props.model.description || props.model.generatedDescription) {\r\n            let content = '';\r\n            if (props.model.description) {\r\n                content += Marked.parse(props.model.description ?? '');\r\n            }\r\n            const generatedContent = props.model.generatedDescription;\r\n            if (generatedContent) {\r\n                content += '<p class=\"generatedDescription\">' + generatedContent + '</p>';\r\n            }\r\n            document.getElementById('interactableTip')!.innerHTML = content;\r\n            tooltip.x = props.model.x;\r\n            tooltip.y = props.model.y;\r\n            tooltip.startTimer();\r\n        }\r\n    }\r\n\r\n    const groupContent: Array<JSX.Element> = [];\r\n    groupContent.push(\r\n        <Rect key='surround' height={64} width={64} strokeWidth={5} stroke={props.isSelected ? 'green' : '#ffb341'} fill={isOn ? '#26D0F9' : '#384a50'} />\r\n    )\r\n    if (props.model instanceof Model.InteractableWithSingleBitSavedState) {\r\n        groupContent.push(<SavedStateIndicator key='savedStateIndicator' model={props.model}/>)\r\n    }\r\n    if (props.model instanceof Model.LogicGate) {\r\n        groupContent.push(<LogicGate key='logicGate' model={props.model}/>)\r\n    } else if (props.model instanceof Model.Input) {\r\n        groupContent.push(<Input key='input' model={props.model}/>)\r\n    } else if (props.model instanceof Model.Timer) {\r\n        groupContent.push(<Timer key='input' model={props.model}/>)\r\n    }\r\n\r\n    return <Group onClick={handleClick}\r\n                  onMouseUp={handleOnMouseUp}\r\n                  onMouseEnter={handleMouseEnter}\r\n                  onMouseLeave={() => tooltip.clearTimer()}\r\n                  onMouseDown={() => tooltip.clearTimer()}\r\n                  ref={groupRef}\r\n                  draggable\r\n                  x={x}\r\n                  y={y}\r\n                  onContextMenu={handleContextMenu}\r\n                  onDragStart={handleDragStart}\r\n                  onDragMove={handleDragMove}\r\n                  onDragEnd={handleDragEnd}>\r\n{groupContent}\r\n</Group>\r\n}\r\n\r\ninterface ISavedStateIndicatorProps {\r\n    model: Model.InteractableWithSingleBitSavedState;\r\n};\r\n\r\nfunction SavedStateIndicator(props: ISavedStateIndicatorProps): JSX.Element | null {\r\n    const [savedState, setSavedState] = useState(props.model.savedState);\r\n    \r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setSavedState(props.model.savedState);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged)\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n\r\n    const size=16;\r\n    return <Line key='saveStateIndicator'\r\n                points={[63-size, 0, 63, 0, 63, size]}\r\n                fill={savedState ? 'orange' : 'transparent'}\r\n                stroke='orange'\r\n                strokeWidth={4}\r\n                closed={true} />;\r\n}\r\n\r\ninterface ILogicGateProps {\r\n    model: Model.LogicGate;\r\n}\r\n\r\nfunction LogicGate(props: ILogicGateProps): JSX.Element {\r\n    const [kind, setKind] = useState(props.model.kind);\r\n    \r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setKind(props.model.kind);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged)\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n    \r\n    const [isOn, setIsOn] = useState(props.model.currentState);\r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setIsOn(props.model.currentState);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged);\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n\r\n    // ISSUE: underscore is 'setIsOn' - not sure if really needed?\r\n    const k = kind  + (isOn ? '-white' : '')\r\n    return <Image x={0} y={0} image={_assets[k].image()} />;\r\n}\r\n\r\ninterface IInputProps {\r\n    model: Model.Input;\r\n}\r\n\r\nfunction Input(props: IInputProps): JSX.Element {\r\n    const [isOn, setIsOn] = useState(props.model.currentState);\r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setIsOn(props.model.currentState);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged);\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n\r\n    return <Circle key='image' radius={22} x={32} y={32} strokeWidth={8} stroke={isOn ? 'white' : 'black'} />;\r\n}\r\n\r\ninterface ITimerProps {\r\n    model: Model.Timer;\r\n}\r\n\r\nexport function Timer(props: ITimerProps): JSX.Element {\r\n    const [tickStorage, setTickStorage] = useState(props.model.tickStorage);\r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setTickStorage([...props.model.tickStorage]);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged)\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n\r\n    const drawingHeight = 64;\r\n    const drawingWidth = 64;\r\n    const horizontalOffset = 12;\r\n    const verticalOffset = 6;\r\n    const rectHeight = (drawingHeight - 2*verticalOffset) / tickStorage.length;\r\n    function hourglassDelta(index: number): number {\r\n        const l = tickStorage.length;\r\n        const fromEnd = index < tickStorage.length/2 ? index : tickStorage.length-1-index;\r\n        if (fromEnd < l * .2) {\r\n            return 0;\r\n        }\r\n        else if (fromEnd > l * .4) {\r\n            return 6;\r\n        }\r\n        else {\r\n            return 6*(fromEnd - l*.2)/(l*.2);\r\n        }\r\n    }\r\n\r\n    return <Group>\r\n            {tickStorage.map((tickValue, index) =>\r\n                <Rect key={index.toString()}\r\n                    x={horizontalOffset + hourglassDelta(index) }\r\n                    width={drawingWidth - 2*horizontalOffset - 2*hourglassDelta(index)}\r\n                    y={drawingHeight - verticalOffset - rectHeight - index*(drawingHeight-2*verticalOffset)/tickStorage.length}\r\n                    height={rectHeight}\r\n                    strokeWidth={1}\r\n                    stroke='darkgrey'\r\n                    fill={tickValue ? 'blue' : 'white'}/>)}\r\n        </Group>;\r\n}\r\n\r\nexport interface ILinkArrowProps {\r\n    source: Model.Interactable;\r\n    target: Model.Interactable;\r\n}\r\n\r\n/** @summary Given two points, both of which are at the center of 64x64 squares, it returns a pair of endpoints\r\n * that start and end at the borders of those boxes. */\r\nfunction getEndpointsOutsideOfBox(sourceX: number, sourceY: number, targetX: number, targetY: number): Array<number> {\r\n    if (Math.abs(targetY-sourceY) < Math.abs(targetX-sourceX)) {\r\n        // The line is less than 45 degrees up, so we'll trim the x's and scale the y's\r\n        const sign = (targetX > sourceX) ? 1 : -1;\r\n        const yTrim = 32*(targetY - sourceY)/(targetX-sourceX);\r\n        sourceX += sign*32;\r\n        targetX -= sign*32;\r\n        sourceY += sign*yTrim;\r\n        targetY -= sign*yTrim;\r\n    }\r\n    else {\r\n        const sign = (targetY > sourceY) ? 1 : -1;\r\n        const xTrim = 32*(targetX - sourceX)/(targetY-sourceY);\r\n        sourceX += sign*xTrim;\r\n        targetX -= sign*xTrim;\r\n        sourceY += sign*32;\r\n        targetY -= sign*32;\r\n    }\r\n\r\n    return [sourceX, sourceY, targetX, targetY];\r\n}\r\n\r\nexport function LinkArrow(props: ILinkArrowProps): JSX.Element {\r\n    const [isLit, setIsLit] = React.useState(props.source.prevState);\r\n    const [[sourceX, sourceY, targetX, targetY], setPositions] = React.useState(getEndpointsOutsideOfBox(props.source.x+32, props.source.y+32, props.target.x+32, props.target.y+32));\r\n\r\n    useEffect(() => {\r\n        function handleStateChanged(): void {\r\n            setIsLit(props.source.prevState);\r\n        }\r\n        function handleSourceOrTargetMoved(): void {\r\n            setPositions(getEndpointsOutsideOfBox(props.source.x+32, props.source.y+32, props.target.x+32, props.target.y+32));\r\n        }\r\n    \r\n        props.source.onStateChanged(handleStateChanged);\r\n        props.source.onMoved(handleSourceOrTargetMoved);\r\n        props.target.onMoved(handleSourceOrTargetMoved);\r\n\r\n        return () => {\r\n            props.source.offStateChanged(handleStateChanged);\r\n            props.source.offMoved(handleSourceOrTargetMoved);\r\n            props.target.offMoved(handleSourceOrTargetMoved);\r\n        };\r\n    }, [props.source, props.target]);\r\n\r\n    return <Arrow x={sourceX}\r\n                  y={sourceY}\r\n                  points={[0,0, targetX-sourceX, targetY-sourceY]}\r\n                  fill={isLit ? 'darkblue' : 'teal'}\r\n                  stroke={isLit ? 'darkblue' : 'teal'}\r\n                  strokeWidth={4}\r\n                  pointerLength={10}\r\n                  pointerWidth={10}/>;\r\n}\r\n\r\nexport function loadAssets(onComplete: () => void): void\r\n{\r\n    const assetKeys = ['and-white', 'and-black',\r\n        'or-white', 'or-black',\r\n        'xor-white', 'xor-black',\r\n        'nand-white', 'nand-black',\r\n        'nor-white', 'nor-black',\r\n        'xnor-white', 'xnor-black',\r\n        'paint-black']\r\n    for (const kind of assetKeys) {\r\n        // This whole thing is bad and this element is also bad...\r\n        Konva.Image.fromURL('/ScrapMechanicLogicGateSimulator/' + kind + '.png', (img: string) => {\r\n            _assets[kind.replace('-black', '')] = img;\r\n            if (Object.keys(_assets).length === assetKeys.length) {\r\n                onComplete();\r\n            }\r\n          });\r\n    }\r\n}","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Stage, Layer, Arrow, Line, Rect } from \"react-konva\";\r\nimport { Simulator, IInteractableLink } from \"./Simulator\";\r\nimport * as TC from \"./TickCounter\";\r\nimport * as ViewModel from \"./ViewModel\";\r\nimport * as Model from \"./Model\";\r\nimport Konva from 'konva';\r\nimport { Vector2d } from \"konva/types/types\";\r\nimport { Interactable } from \"./Model\";\r\nimport { CopyLinkButton, DeleteButton, IDragNewInteractableDragEventArgs, LoadFromFileButton, LogicGateButton, PaintButton, PutOnLiftButton, ReloadButton, SaveToFileButton, SingleStepButton, StartStopButton, TakeOffLiftButton } from \"./Buttons\";\r\nimport { KonvaEventObject } from \"konva/types/Node\";\r\n\r\ninterface AppProps {\r\n    simulator: Simulator;\r\n}\r\n\r\ninterface IScreenLayout {\r\n    canvasWidth: number;\r\n    canvasHeight: number;\r\n    buttonRowHeight: number;\r\n    maxSensibleDropX: number;\r\n    maxSensibleDropY: number;\r\n    buttonRowX: (n: number) => number;\r\n    buttonRowY: (n: number) => number;\r\n}\r\n\r\nfunction getScreenLayout(): IScreenLayout {\r\n    const hSpaceBetweenButtons = 15; // the horizontal between each button (and the edges)\r\n    const vSpaceBetweenButtons = 8;\r\n    const buttonWidth = 64;\r\n    const buttonHeight = 64;\r\n    const maximumButtonsPerRow = 9;\r\n    const content = document.getElementById('content');\r\n    const canvasHeight = window.innerHeight*.9;\r\n    const canvasWidth = content!.clientWidth; // Would love to know where the 57 comes from, but with the current styles, it seems to work.\r\n    const numRows = canvasWidth < hSpaceBetweenButtons + 2*maximumButtonsPerRow*(buttonWidth+hSpaceBetweenButtons) ? 2 : 1;\r\n    const buttonRowHeight = numRows*(buttonWidth+vSpaceBetweenButtons) + vSpaceBetweenButtons;\r\n    const buttonRowY = (n: number) => canvasHeight - buttonRowHeight + vSpaceBetweenButtons + (n >= maximumButtonsPerRow && numRows > 1 ? (vSpaceBetweenButtons + buttonHeight) : 0);\r\n    const buttonRowX = (n: number) => hSpaceBetweenButtons + (hSpaceBetweenButtons + buttonWidth) * (n >= maximumButtonsPerRow && numRows > 1 ? n - maximumButtonsPerRow : n);\r\n\r\n    return {\r\n        canvasWidth: canvasWidth,\r\n        canvasHeight: canvasHeight,\r\n        buttonRowHeight: buttonRowHeight,\r\n        maxSensibleDropX: canvasWidth - buttonWidth * .25,\r\n        maxSensibleDropY: buttonRowY(0)-32,\r\n        buttonRowX: buttonRowX,\r\n        buttonRowY: buttonRowY\r\n    };\r\n}\r\n\r\n\r\n\r\nexport function App(props: AppProps): JSX.Element {\r\n    const [interactables, setInteractables] = React.useState(props.simulator.interactables);\r\n    const [links, setLinks] = React.useState(props.simulator.getLinks());\r\n    const [selected, setSelected] = React.useState<Interactable | undefined>(undefined);\r\n    const [linkSource, setLinkSource] = React.useState<Interactable | undefined>(undefined);\r\n    const [[linkTargetX, linkTargetY], setLinkTarget] = React.useState<Array<number | undefined>>([undefined, undefined]);\r\n    const [createByDragPrototype, setCreateByDragPrototype] = React.useState<Interactable | undefined>(undefined);\r\n    const [screenLayout, setScreenLayout] = React.useState(getScreenLayout());\r\n    const [considerResizeOnNextRender, setConsiderResizeOnNextRender] = React.useState(false);\r\n\r\n    const stageRef: React.RefObject<Konva.Stage> = React.useRef<Konva.Stage>(null);\r\n\r\n\r\n    // Track changes in the model's list of interactables\r\n    React.useEffect(() => {\r\n        function handleInteractablesChanged(): void {\r\n            if (selected && props.simulator.interactables.indexOf(selected) < 0 ) {\r\n                setSelected(undefined);\r\n            }\r\n            setInteractables([...props.simulator.interactables]);\r\n            setLinks(props.simulator.getLinks());\r\n            setLinkSource(undefined);\r\n            setCreateByDragPrototype(undefined);\r\n        };\r\n        function handleInteractablesReset(): void {\r\n            handleInteractablesChanged();\r\n            setConsiderResizeOnNextRender(true);\r\n        };\r\n        // Perhaps onInteractableAdded should make that interactable selected?\r\n\r\n        props.simulator.onInteractableAdded(handleInteractablesChanged);\r\n        props.simulator.onInteractableRemoved(handleInteractablesChanged);\r\n        props.simulator.onInteractablesReset(handleInteractablesReset);\r\n\r\n        return () => {\r\n            props.simulator.offInteractableAdded(handleInteractablesChanged);\r\n            props.simulator.offInteractableRemoved(handleInteractablesChanged);\r\n            props.simulator.offInteractablesReset(handleInteractablesReset)\r\n        };\r\n\r\n    }, [props.simulator, selected]);\r\n\r\n    // Track window resize\r\n    React.useEffect(() => {\r\n        function handleResize(): void {\r\n            setScreenLayout(getScreenLayout());\r\n            setConsiderResizeOnNextRender(true);\r\n        };\r\n        const contentDiv = document.getElementById('content')!;\r\n        const o = new ResizeObserver(handleResize);\r\n        o.observe(contentDiv)\r\n        return () => o.disconnect();\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        function handleKeyPress(e: KeyboardEvent): void {\r\n            const xy: Vector2d | null | undefined = stageRef.current?.getPointerPosition();\r\n            if (!xy) {\r\n                throw new Error(\"stage was not set?\");\r\n            }\r\n\r\n            function doLogicGateKey(kind: Model.LogicGateTypes, xy: Vector2d): void {\r\n                const newInteractable = new Model.LogicGate({\r\n                    kind: kind,\r\n                    x: xy.x,\r\n                    y: xy.y,\r\n                    savedState: false\r\n                });\r\n                props.simulator.add(newInteractable);\r\n                setSelected(newInteractable);\r\n            }\r\n    \r\n            if (e.key === \"g\") {\r\n                props.simulator.startRunning();\r\n            } else if (e.key === \"s\") {\r\n                props.simulator.stopRunning();\r\n            } else if (e.key === \"n\") {\r\n                props.simulator.advanceOne();\r\n            } else if (e.key === \"a\") {\r\n                doLogicGateKey('and', xy);\r\n            } else if (e.key === \"o\") {\r\n                doLogicGateKey('or', xy);\r\n            } else if (e.key === \"x\") {\r\n                doLogicGateKey('xor', xy);\r\n            } else if (e.key === \"A\") {\r\n                doLogicGateKey('nand', xy);\r\n            } else if (e.key === \"O\") {\r\n                doLogicGateKey('nor', xy);\r\n            } else if (e.key === \"X\") {\r\n                doLogicGateKey('xnor', xy);\r\n            } else if (e.key === \"i\") {\r\n                const newInteractable = new Model.Input({\r\n                    kind: 'input',\r\n                    x: xy.x,\r\n                    y: xy.y,\r\n                    savedState: false\r\n                });\r\n                props.simulator.add(newInteractable);\r\n                setSelected(newInteractable);\r\n            } else if (e.key === \"t\") {\r\n                const newInteractable = new Model.Timer({\r\n                    kind: 'timer',\r\n                    x: xy.x,\r\n                    y: xy.y,\r\n                    tickStorage: new Array<boolean>(10).fill(false)\r\n                });\r\n                props.simulator.add(newInteractable);\r\n                setSelected(newInteractable);\r\n            } else if (selected && e.key === ' ') {\r\n                selected.toggle();\r\n                e.preventDefault();\r\n            } else if (e.key === '4') {\r\n                props.simulator.gameReload();\r\n            } else if (e.key === 'l') {\r\n                props.simulator.putOnLift();\r\n            } else if (e.key === 'L') {\r\n                props.simulator.takeOffLift();\r\n            } else if (e.key === 'p' && selected) {\r\n                selected.paint();\r\n            }\r\n    \r\n            console.debug(\"App.handleKeyPress(\" + e.key + \")\");\r\n        };\r\n\r\n        if (stageRef.current) {\r\n            const container = stageRef.current.container();\r\n            container.tabIndex = 1;\r\n            container.focus();\r\n        }\r\n        window.addEventListener('keypress', handleKeyPress);\r\n        return () => window.removeEventListener('keypress', handleKeyPress);\r\n    }, [props.simulator, selected]);\r\n    \r\n    React.useEffect(() => {\r\n        function handleRemoveMenuItem(): void {\r\n            if (selected) {\r\n                props.simulator.remove(selected);\r\n            }\r\n        };\r\n\r\n        const menuItemDelete = document.getElementById('menuItemDelete');\r\n        menuItemDelete!.onclick = handleRemoveMenuItem;\r\n        return () => { menuItemDelete!.onclick = null };\r\n    }, [props.simulator, selected]);\r\n\r\n    \r\n    React.useEffect(() => {\r\n        function handleKeyDown(e: KeyboardEvent): void {\r\n            const xy: Vector2d | null | undefined = stageRef.current?.getPointerPosition();\r\n            if (!xy) {\r\n                throw new Error(\"stage was not set?\");\r\n            }\r\n    \r\n            if ((e.key === 'Delete' || e.key === 'Backspace') && selected) {\r\n                props.simulator.remove(selected);\r\n            }\r\n        };\r\n\r\n        if (stageRef.current) {\r\n            const container = stageRef.current.container();\r\n            container.tabIndex = 1;\r\n            container.focus();\r\n        }\r\n        window.addEventListener('keydown', handleKeyDown);\r\n        return () => window.removeEventListener('keydown', handleKeyDown);\r\n    }, [props.simulator, selected]);\r\n\r\n    function handleInteractableClicked(e: ViewModel.IEventArgsInteractable): void {\r\n        if (e.evt.ctrlKey && e.model instanceof Model.Input) {\r\n            e.model.toggle();\r\n        }\r\n        setSelected( e.model );\r\n    }\r\n\r\n    function handleLinkStart(e: ViewModel.IEventArgsInteractable): void {\r\n        setLinkSource(e.model);\r\n        setLinkTarget([e.evt.x, e.evt.y]);\r\n    }\r\n\r\n    function handleMouseUpInStage(e: KonvaEventObject<MouseEvent>): void {\r\n        // This handles mouseUp events from the field, \r\n        if (linkSource) {\r\n            let target = undefined;\r\n            for (const i of interactables) {\r\n                // TODO: the Interactable viewmodel should decide the in-bounds calculation\r\n                if (i.x <= e.evt.offsetX && e.evt.offsetX < i.x+64\r\n                 && i.y <= e.evt.offsetY && e.evt.offsetY < i.y+64) {\r\n                     target = i;\r\n                     break;\r\n                 }\r\n            }\r\n\r\n            if (target && target !== linkSource && target.addInput(linkSource)) {\r\n                // TODO: This line breaks the model/viewmodel pattern really an event\r\n                // should come out of the model that tells us that stuff has changed.\r\n                setLinks(props.simulator.getLinks());\r\n\r\n                setLinkSource(undefined);\r\n                setCreateByDragPrototype(undefined);\r\n            }\r\n        }\r\n        else if (createByDragPrototype && createByDragPrototype.y < screenLayout.maxSensibleDropY) {\r\n            props.simulator.add(createByDragPrototype);\r\n        }\r\n\r\n        setLinkSource(undefined);\r\n        setCreateByDragPrototype(undefined);\r\n    }\r\n\r\n    function handleMouseMove(e: KonvaEventObject<MouseEvent>): void {\r\n        // console.debug(\"mouseMove: x=\" + e.evt.x + \" pageX=\" + e.evt.pageX + \" clientX=\" + e.evt.clientX + \" offsetX=\" + e.evt.offsetX + \" screenX=\" + e.evt.screenX + \" movementX=\" + e.evt.movementX);\r\n        if (linkSource) {\r\n            setLinkTarget([e.evt.offsetX, e.evt.offsetY]);\r\n        }\r\n        else if (createByDragPrototype) {\r\n            createByDragPrototype.setPosition(e.evt.offsetX, e.evt.offsetY);\r\n        }\r\n    }\r\n\r\n    function handleMouseDown(e: KonvaEventObject<MouseEvent>): void {\r\n        if (!(e.target instanceof ViewModel.Interactable) && selected) {\r\n            setSelected(undefined);\r\n        }\r\n    }\r\n\r\n    function handleNewInteractableDrag(e: IDragNewInteractableDragEventArgs): void {\r\n        setCreateByDragPrototype(e.prototype);\r\n    }\r\n\r\n    function handleMouseLeave(): void {\r\n        setLinkSource(undefined);\r\n        setCreateByDragPrototype(undefined);\r\n    }\r\n\r\n    function handleMoveCompleted(e: ViewModel.IEventArgsInteractable): void {\r\n        const buttonWidth = 64;\r\n        const buttonHeight = 64;\r\n        if (e.model.x < - buttonWidth*.75 || e.model.y < -buttonHeight*.75 || e.model.x > screenLayout.maxSensibleDropX || e.model.y > screenLayout.maxSensibleDropY) {\r\n            props.simulator.remove(e.model);\r\n        }\r\n    }\r\n\r\n    const toolTipEditor = document.getElementById('tooltipEditor')!;\r\n\r\n    function handleOkInToolTipEditor() {\r\n        const m: Model.Interactable = (toolTipEditor as any).model;\r\n        m.description = (document.getElementById('tooltipText') as HTMLTextAreaElement)!.value ?? undefined;\r\n        toolTipEditor.classList.remove('visible');\r\n    }\r\n\r\n    function handleCancelInToolTipEditor() {\r\n        toolTipEditor.classList.remove('visible');\r\n    }\r\n\r\n    function handleKeyDownInTooltipEditor(e: KeyboardEvent) {\r\n        if (e.key === 'Escape') {\r\n            handleCancelInToolTipEditor();\r\n        }\r\n        else if (e.key === 'Enter' && (e.shiftKey || e.ctrlKey)) {\r\n            handleOkInToolTipEditor();\r\n        }\r\n    }\r\n\r\n    const tooltipText = document.getElementById('tooltipText')!;\r\n    tooltipText.onkeydown = handleKeyDownInTooltipEditor;\r\n    document.getElementById('tooltipEditorOk')!.onclick = handleOkInToolTipEditor;\r\n    document.getElementById('tooltipEditorCancel')!.onclick = handleCancelInToolTipEditor;\r\n\r\n    toolTipEditor.onkeydown = (e) => {\r\n        e.stopPropagation();\r\n    };\r\n    toolTipEditor.onkeyup = (e) => { e.stopPropagation(); };\r\n    toolTipEditor.onkeypress = (e) => { e.stopPropagation(); };\r\n\r\n    let pointer: Array<JSX.Element> | JSX.Element = [];\r\n\r\n    if (considerResizeOnNextRender) {\r\n        props.simulator.fitToSize(screenLayout.canvasWidth, screenLayout.buttonRowY(0), 20, 20);\r\n        setConsiderResizeOnNextRender(false);\r\n    }\r\n\r\n    if (linkSource) {\r\n        pointer = <Arrow\r\n            x={linkSource.x+32}\r\n            y={linkSource.y+32}\r\n            points={[0,0, linkTargetX!-(linkSource.x+32), linkTargetY!-(linkSource.y+32)]}\r\n            fill='lightgrey'\r\n            stroke='lightgrey'\r\n            strokeWidth={4}\r\n            pointerLength={10}\r\n            pointerWidth={10}/>;\r\n    }\r\n    \r\n    return (\r\n        <Stage\r\n            width={screenLayout.canvasWidth-4}\r\n            height={screenLayout.canvasHeight}\r\n            ref={stageRef}\r\n            onMouseUp={handleMouseUpInStage}\r\n            onMouseMove={handleMouseMove}\r\n            onMouseLeave={handleMouseLeave}\r\n        >\r\n            <Layer>\r\n                <Rect id='background'\r\n                      x={0} y={0}\r\n                      width={screenLayout.canvasWidth}\r\n                      height={screenLayout.canvasHeight - screenLayout.buttonRowHeight}\r\n                      onMouseDown={handleMouseDown}\r\n                      strokeWidth={0}\r\n                      fill='GhostWhite' />\r\n                <TC.TickCounter simulator={props.simulator} right={screenLayout.canvasWidth - 20} top={5} />\r\n                {interactables.map((model: Interactable) =>\r\n                    <ViewModel.Interactable\r\n                    model={model}\r\n                    key={model.id.toString()}\r\n                    isSelected={model === selected}\r\n                    onLinkStart={handleLinkStart}\r\n                    onClick={handleInteractableClicked}\r\n                    onMoveCompleted={handleMoveCompleted}\r\n                />\r\n                )}\r\n                {createByDragPrototype\r\n                    ? <ViewModel.Interactable model={createByDragPrototype} key={createByDragPrototype.id.toString()} isSelected={false}/>\r\n                    : []}\r\n                {pointer}\r\n                {links.map((link: IInteractableLink) => <ViewModel.LinkArrow key={link.source.id.toString()+ \"-\" + link.target.id.toString()} source={link.source} target={link.target}/>)}\r\n            </Layer>\r\n            <Layer>\r\n                <Rect x={0} y={screenLayout.canvasHeight-screenLayout.buttonRowHeight} height={screenLayout.buttonRowHeight} width={screenLayout.canvasWidth} fill='papayawhip' />\r\n                <Line points={[0, screenLayout.canvasHeight-screenLayout.buttonRowHeight, screenLayout.canvasWidth, screenLayout.canvasHeight-screenLayout.buttonRowHeight]} stroke='grey' strokeWidth={3}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(0)} y={screenLayout.buttonRowY(0)} selected={selected} kind='and' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(1)} y={screenLayout.buttonRowY(1)} selected={selected} kind='or' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(2)} y={screenLayout.buttonRowY(2)} selected={selected} kind='xor' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(3)} y={screenLayout.buttonRowY(3)} selected={selected} kind='nand' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(4)} y={screenLayout.buttonRowY(4)} selected={selected} kind='nor' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(5)} y={screenLayout.buttonRowY(5)} selected={selected} kind='xnor' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(6)} y={screenLayout.buttonRowY(6)} selected={selected} kind='input' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(7)} y={screenLayout.buttonRowY(7)} selected={selected} kind='timer' onBeginDrag={handleNewInteractableDrag}/>\r\n                <DeleteButton x={screenLayout.buttonRowX(8)} y={screenLayout.buttonRowY(8)} simulator={props.simulator} selected={selected}/>\r\n                <StartStopButton x={screenLayout.buttonRowX(9)} y={screenLayout.buttonRowY(9)} model={props.simulator}/>\r\n                <SingleStepButton x={screenLayout.buttonRowX(10)} y={screenLayout.buttonRowY(10)} model={props.simulator}/>\r\n                <ReloadButton x={screenLayout.buttonRowX(11)} y={screenLayout.buttonRowY(11)} simulator={props.simulator}/>\r\n                <PaintButton x={screenLayout.buttonRowX(12)} y={screenLayout.buttonRowY(12)} selected={selected}/>\r\n                <PutOnLiftButton x={screenLayout.buttonRowX(13)} y={screenLayout.buttonRowY(13)} simulator={props.simulator}/>\r\n                <TakeOffLiftButton x={screenLayout.buttonRowX(14)} y={screenLayout.buttonRowY(14)} simulator={props.simulator}/>\r\n                <CopyLinkButton x={screenLayout.buttonRowX(15)} y={screenLayout.buttonRowY(15)} simulator={props.simulator}/>\r\n                <LoadFromFileButton x={screenLayout.buttonRowX(16)} y={screenLayout.buttonRowY(16)} simulator={props.simulator}/>\r\n                <SaveToFileButton x={screenLayout.buttonRowX(17)} y={screenLayout.buttonRowY(17)} simulator={props.simulator}/>\r\n            </Layer>\r\n        </Stage>\r\n    );\r\n}\r\n\r\nfunction onWindowClick(): void {\r\n    const menu = document.getElementById(\"interactableMenu\");\r\n    if (!menu) {\r\n        throw(Error(\"Missing div with id: interactableMenu\"));\r\n    }\r\n    menu.style.display = 'none'\r\n}\r\n\r\nfunction toggleHelp(): void {\r\n    const helpButton = document.getElementById('helpButton')!;\r\n    const contentDiv = document.getElementById('content')!;\r\n    const sidebarDiv = document.getElementById('sidebar')!;\r\n    if (helpButton.innerText === \"Help >>\") {\r\n        helpButton.innerText = \"Help <<\";\r\n        contentDiv.classList.add('content-full');\r\n        sidebarDiv.classList.add('sidebar-none');\r\n    }\r\n    else {\r\n        helpButton.innerText = \"Help >>\";\r\n        contentDiv.classList.remove('content-full');\r\n        sidebarDiv.classList.remove('sidebar-none');\r\n    }\r\n}\r\n\r\nfunction autoSave(simulator: Simulator): void {\r\n    simulator.storeInCookie();\r\n    setTimeout(autoSave, 3000, simulator);\r\n}\r\n\r\nexport function makeItSo(): void {\r\n    window.addEventListener('click', onWindowClick);\r\n    const helpButton = document.getElementById('helpButton')!;\r\n    helpButton.onclick = toggleHelp;\r\n\r\n    // TODO - get rid of this.  One way to go would be to find a way to convert all the PNG's to SVG's.\r\n\r\n    ViewModel.loadAssets(() => {\r\n        const simulator= new Simulator();\r\n        try {\r\n            simulator.loadFromQsAndCookie();\r\n        }\r\n        catch (err) {\r\n            alert(err);\r\n        }\r\n        setTimeout(autoSave, 3, simulator);\r\n        render(<App simulator={simulator} />, document.getElementById(\"root\"));\r\n    });\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.css';\r\nimport {makeItSo} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconsole.debug(\"In index\");\r\nmakeItSo();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { EventEmitter } from 'events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport function hasOwnProperty<X extends {}, Y extends PropertyKey>\r\n  (obj: X, prop: Y): obj is X & Record<Y, unknown> {\r\n    // source: https://fettblog.eu/typescript-hasownproperty/\r\n    //\r\n    // Seems okay except for having to use the eslint rule on it.\r\n    return obj.hasOwnProperty(prop)\r\n}\r\n\r\n\r\nexport interface ISerializedInteractable {\r\n    x: number;\r\n    y: number;\r\n    kind: LogicGateTypes | 'input' | 'timer';\r\n    inputs: Array<number>;\r\n    description?: string | undefined;\r\n}\r\n\r\nexport interface IEventArgsInteractable {\r\n    source: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractableMoved extends IEventArgsInteractable {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nfunction deserializeInteractable(serialized: Record<string,unknown>, kind: LogicGateTypes | 'input' | 'timer'): ISerializedInteractable {\r\n    if (!hasOwnProperty(serialized, 'x') || typeof(serialized.x) !== 'number') {\r\n        throw new Error(\"Missing 'x' property or 'x' is not a number\");\r\n    }\r\n\r\n    if (!hasOwnProperty(serialized, 'y') || typeof(serialized.y) !== 'number') {\r\n        throw new Error(\"Missing 'x' property or 'x' is not a number\");\r\n    }\r\n\r\n    if (!hasOwnProperty(serialized, 'y') || typeof(serialized.y) !== 'number') {\r\n        throw new Error(\"Missing 'x' property or 'x' is not a number\");\r\n    }\r\n\r\n    const description = (hasOwnProperty(serialized, 'description') && typeof(serialized.description) === 'string') ? serialized.description : undefined;\r\n\r\n    return {\r\n        kind: kind,\r\n        x: serialized.x,\r\n        y: serialized.y,\r\n        description: description,\r\n        inputs: []\r\n    }\r\n}\r\n\r\nexport class Interactable {\r\n    private _x: number;\r\n    private _y: number;\r\n    private readonly _events: EventEmitter;\r\n    private _inputs: Array<Interactable>;\r\n    private _description: string | undefined;\r\n\r\n    private _prevState: boolean;\r\n    private _currentState: boolean;\r\n\r\n    public readonly id: number;\r\n\r\n    static idCounter = 0;\r\n\r\n    constructor(props: Omit<ISerializedInteractable, 'inputs'>) {\r\n        this._events = new EventEmitter();\r\n        this._prevState = false;\r\n        this._currentState = false;\r\n        this._inputs = [];\r\n        this._x = props.x;\r\n        this._y = props.y;\r\n        this._description = props.description;\r\n\r\n        this.id = ++Interactable.idCounter;\r\n    }\r\n\r\n    public static validateAndDeserialize(serialized: unknown): Interactable {\r\n        if (typeof(serialized) !== 'object' || serialized === null) {\r\n            throw new Error(\"Bad format - expected an array of objects at the top level\");\r\n        }\r\n\r\n        if (!hasOwnProperty(serialized, 'kind')) {\r\n            throw new Error(\"Interactable is missing an 'inputs' array\");\r\n        }\r\n\r\n        switch (serialized.kind) {\r\n            case 'input':\r\n            case 'input-on':\r\n            case 'input-off':\r\n                return new Input(validateAndNormalizeInput(serialized, serialized.kind));\r\n            case 'timer':\r\n            case 'timer10':\r\n                return new Timer(validateAndNormalizeTimer(serialized));\r\n            case 'and':\r\n            case 'or':\r\n            case 'xor':\r\n            case 'nand':\r\n            case 'nor':\r\n            case 'xnor':\r\n                return new LogicGate(deserializeLogicGate(serialized, serialized.kind));\r\n            default:\r\n                throw new Error(\"Interactable has unknown 'kind': \" + serialized.kind);\r\n        }\r\n    }\r\n\r\n    public getPosition(): { x: number, y: number } {\r\n        return { x: this._x, y: this._y };\r\n    }\r\n\r\n    public get x(): number { return this._x; }\r\n    public get y(): number { return this._y; }\r\n\r\n    public get description(): string | undefined { return this._description; }\r\n    public set description(text: string | undefined) { this._description = text; }\r\n\r\n    public get generatedDescription(): string | undefined { return undefined; }\r\n\r\n    public setPosition(x: number, y: number): void {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._emitMoved(x, y);\r\n    }\r\n\r\n    public get currentState(): boolean { return this._currentState; }\r\n\r\n    protected setCurrentState(newValue: boolean): void {\r\n        if (this._currentState !== newValue) {\r\n            this._currentState = newValue;\r\n            this._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public get prevState(): boolean { return this._prevState; }\r\n    protected setPrevState(newValue: boolean): void {\r\n        if (this._prevState !== newValue) {\r\n            this._prevState = newValue;\r\n            this._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public export(): ISerializedInteractable {\r\n        return {\r\n            x: this._x,\r\n            y: this._y,\r\n            kind: 'input', // base classes will overwrite this.\r\n            description: this._description,\r\n            inputs: []\r\n        }\r\n    }\r\n\r\n    addInput(newInput: Interactable): boolean {\r\n        if (this.inputLimit === 0) {\r\n            // Can't draw a connection *to* an input.\r\n            return false;\r\n        }\r\n\r\n        const existingIndex: number = this.inputs.indexOf(newInput);\r\n        if (existingIndex >= 0) {\r\n            // if the connection is already there - undo it\r\n            this._inputs.splice(existingIndex, 1);\r\n        } else {\r\n            // If the connection already goes the other way, reverse it (this part just deletes the old arrow)\r\n            const indexInTarget: number = newInput.inputs.indexOf(this);\r\n            if (indexInTarget >= 0) {\r\n                newInput._inputs.splice(indexInTarget, 1);\r\n                newInput.calculate();\r\n            }\r\n\r\n            // If we allow only one input and we already have an input, toss it.\r\n            if (this.inputLimit === 1) {\r\n                this._inputs = [];\r\n            }\r\n\r\n            // Add the new link\r\n            this._inputs.push(newInput);\r\n        }\r\n\r\n        this.calculate();\r\n        this.paint();\r\n        newInput.paint();\r\n        return true;\r\n    }\r\n\r\n    removeInput(deadInput: Interactable): boolean {\r\n        const index: number = this.inputs.indexOf(deadInput);\r\n        if (index < 0) {\r\n            return false;\r\n        } else {\r\n            this._inputs.splice(index, 1);\r\n            this.calculate();\r\n            this.paint();\r\n            return true;\r\n        }\r\n    }\r\n\r\n    get inputs(): Array<Interactable> {\r\n        return [...this._inputs];\r\n    }\r\n\r\n    setInputs(inputs: Array<Interactable>): void {\r\n        this._inputs = [...inputs];\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    toggle(): void {\r\n        // No action by default\r\n    }\r\n\r\n    /** Causes the calculated state to become the state that other interactables will see. */\r\n    public apply(): void {\r\n        this.setPrevState(this.currentState);\r\n    }\r\n\r\n    /** Sets currentState based on the previous state of its inputs. */\r\n    public calculate(): void {/* no action */}\r\n\r\n    public reload(): void {/* no action */}\r\n\r\n    public putOnLift(): void {/* no action */}\r\n\r\n    public paint(): void {/* no action */}\r\n\r\n    public onMoved(handler: (eventArgs: IEventArgsInteractableMoved) => void): void {\r\n        this._events.on('moved', handler);\r\n    }\r\n\r\n    public offMoved(handler: (eventArgs: IEventArgsInteractableMoved) => void): void {\r\n        this._events.off('moved', handler);\r\n    }\r\n\r\n    public onStateChanged(handler: (eventArgs: IEventArgsInteractable) => void): void {\r\n        this._events.on('stateChanged', handler);\r\n    }\r\n\r\n    public offStateChanged(handler: (eventArgs: IEventArgsInteractable) => void): void {\r\n        this._events.off('stateChanged', handler);\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 'unlimited';\r\n    }\r\n\r\n    protected _emitMoved(x: number, y: number): void {\r\n        this._events.emit('moved', { source: this, x, y } as IEventArgsInteractableMoved);\r\n    }\r\n\r\n    protected _emitStateChanged(): void {\r\n        this._events.emit('stateChanged', { source: this } as IEventArgsInteractable);\r\n    }\r\n}\r\n\r\nexport interface ISerializedInteractableWithSingleBitSavedState extends ISerializedInteractable {\r\n    savedState: boolean;\r\n}\r\n\r\nfunction validateAndDeserializeInteractableWithSavedState(serialized: Record<string,unknown>, kind: LogicGateTypes | 'input', defaultSavedState: boolean): ISerializedInteractableWithSingleBitSavedState {\r\n    let savedState: boolean = defaultSavedState;\r\n\r\n    if (hasOwnProperty(serialized, 'savedState')) {\r\n        if (typeof(serialized.savedState) !== 'boolean') {\r\n            throw new Error(\"Interactables of kind '\" + kind + \"' should have a 'savedState' property of type boolean\");\r\n        }\r\n        savedState = serialized.savedState;\r\n    }\r\n\r\n    return {\r\n        ...deserializeInteractable(serialized, kind),\r\n        savedState: savedState\r\n    };\r\n}\r\n\r\n\r\nexport class InteractableWithSingleBitSavedState extends Interactable {\r\n    private _savedState: boolean;\r\n\r\n    constructor(props: Omit<ISerializedInteractableWithSingleBitSavedState, 'inputs'>) {\r\n        super(props);\r\n\r\n        this._savedState = props.savedState;\r\n    }\r\n\r\n    public export(): ISerializedInteractableWithSingleBitSavedState {\r\n        return {\r\n            ...super.export(),\r\n            savedState: this._savedState\r\n        };\r\n    }\r\n\r\n    public get savedState(): boolean {\r\n        return this._savedState;\r\n    }\r\n\r\n    public paint(): void {\r\n        if (this._savedState !== this.currentState) {\r\n            this._savedState = this.currentState;\r\n            super._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public reload(): void {\r\n        this.setCurrentState(this.savedState);\r\n        this.setPrevState(false);\r\n    }\r\n}\r\n\r\nexport type LogicGateTypes = 'and' | 'or' | 'xor' | 'nand' | 'nor' | 'xnor';\r\n\r\nexport type ISerializedLogicGate = ISerializedInteractableWithSingleBitSavedState\r\n\r\nfunction deserializeLogicGate(serialized: Record<string,unknown>, kind: LogicGateTypes): ISerializedLogicGate {\r\n    return validateAndDeserializeInteractableWithSavedState(serialized, kind, false);\r\n}\r\n\r\nexport class LogicGate extends InteractableWithSingleBitSavedState {\r\n    private _kind: LogicGateTypes;\r\n\r\n    constructor(props: Omit<ISerializedLogicGate, 'inputs'>) {\r\n        super(props);\r\n        if (props.kind === 'timer' || props.kind === 'input') {\r\n            throw new Error(\"Caller should prevent this\");\r\n        }\r\n\r\n        this._kind = props.kind;\r\n    }\r\n\r\n    public get kind(): LogicGateTypes {\r\n        return this._kind;\r\n    }\r\n\r\n    public set kind(newValue: LogicGateTypes) {\r\n        this._kind = newValue;\r\n        this._emitStateChanged();\r\n        this.paint();\r\n    }\r\n\r\n    public calculate(): void {\r\n        // This becomes the sum of all the inputs where the previous state is true\r\n        const numActivatedInputs = this.inputs.reduce((a, b) => a + (b.prevState ? 1 : 0), 0);\r\n        let calculatedState: boolean;\r\n        switch(this.kind) {\r\n            case 'and':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs === this.inputs.length;\r\n                break;\r\n            case 'or':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs > 0;\r\n                break;\r\n            case 'xor':\r\n                calculatedState = numActivatedInputs % 2 === 1;\r\n                break;\r\n            case 'nand':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs !== this.inputs.length;\r\n                break;\r\n            case 'nor':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs === 0;\r\n                break;\r\n            case 'xnor':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs % 2 === 0;\r\n                break;\r\n        }\r\n        this.setCurrentState(calculatedState);\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        this.setCurrentState(this.inputs.length > 0 && (this.kind === 'nand' || this.kind === 'nor' || this.kind === 'xnor'));\r\n        this.setPrevState(false);\r\n        this.paint();\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 'unlimited';\r\n    }\r\n\r\n    export(): ISerializedLogicGate {\r\n        return {\r\n            ...super.export(),\r\n            kind: this._kind\r\n        };\r\n    }\r\n}\r\n\r\nexport type ISerializedInput = ISerializedInteractableWithSingleBitSavedState;\r\n\r\nfunction validateAndNormalizeInput(serialized: Record<string,unknown>, kind: 'input' | 'input-on' | 'input-off'): ISerializedLogicGate {\r\n    return validateAndDeserializeInteractableWithSavedState(serialized, 'input', kind === 'input-on');\r\n}\r\n\r\nexport class Input extends InteractableWithSingleBitSavedState {\r\n    _savedToggles: number[] | undefined = undefined;\r\n    _tickCount = 0;\r\n\r\n    public constructor(props: Omit<ISerializedInteractableWithSingleBitSavedState, 'inputs'>) {\r\n        // Note that we intentionally don't serialize _savedToggles, as it's a debugging aid, not really\r\n        // a part of the model.\r\n        super(props);\r\n    }\r\n\r\n    public get isRecording(): boolean {\r\n        return this._savedToggles !== undefined;\r\n    }\r\n\r\n    public set isRecording(isRecording: boolean) {\r\n        this._savedToggles = (this._savedToggles === undefined) ? [] : undefined;\r\n    }\r\n\r\n    public get generatedDescription(): string | undefined {\r\n        if (this._savedToggles === undefined || this._savedToggles.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let text = 'on at tick ' + this._savedToggles[0];\r\n        let toggle = 'off'\r\n        for (let i = 1; i < this._savedToggles.length; ++i) {\r\n            text += '; ' + toggle + ' at ' + this._savedToggles[i];\r\n            toggle = toggle === 'off' ? 'on' : 'off';\r\n        }\r\n        return text;\r\n    }\r\n\r\n    toggle(): void {\r\n        this.setCurrentState(!this.currentState);\r\n        if (this._savedToggles !== undefined) {\r\n            while (this._savedToggles.length > 0 && this._savedToggles[this._savedToggles.length-1] > this._tickCount) {\r\n                this._savedToggles.splice(this._savedToggles.length-1, 1);\r\n            }\r\n\r\n            if (this._savedToggles.length > 0 && this._savedToggles[this._savedToggles.length-1] === this._tickCount) {\r\n                this._savedToggles.splice(this._savedToggles.length-1, 1);\r\n            }\r\n            else {\r\n                this._savedToggles.push(this._tickCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 0;\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        this.setCurrentState(false);\r\n        this.setPrevState(false);\r\n        this.paint();\r\n    }\r\n\r\n    public apply(): void {\r\n        super.apply();\r\n        this._tickCount += 1;\r\n    }\r\n\r\n    public calculate(): void {\r\n        if (this._savedToggles !== undefined && this._savedToggles.indexOf(this._tickCount) >= 0) {\r\n            this.setCurrentState(!this.currentState);\r\n        }\r\n    }\r\n\r\n    public reload(): void {\r\n        this._tickCount = 0;\r\n        super.reload();\r\n        if (this._savedToggles !== undefined && this._savedToggles.length > 0 && this._savedToggles[0] === 0) {\r\n            this.setCurrentState(!this.currentState);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ISerializedTimer extends ISerializedInteractable {\r\n    tickStorage: Array<boolean>;\r\n}\r\n\r\nfunction validateAndNormalizeTimer(serialized: Record<string,unknown>): ISerializedTimer {\r\n    let rawTickStorage: unknown;\r\n    if (hasOwnProperty(serialized, 'tickStorage')) {\r\n        rawTickStorage = serialized.tickStorage;\r\n    }\r\n\r\n    if (hasOwnProperty(serialized, 'timerTickStorage')) {\r\n        rawTickStorage = serialized.timerTickStorage;\r\n    }\r\n\r\n    if (rawTickStorage === undefined || !Array.isArray(rawTickStorage) || !rawTickStorage.every(i => typeof(i) === 'boolean')) {\r\n        throw new Error(\"Timer interactables should have a boolean array named 'tickStorage'\");\r\n    }\r\n\r\n    return {\r\n        ...deserializeInteractable(serialized, 'timer'),\r\n        tickStorage: rawTickStorage\r\n    };\r\n}\r\n\r\nexport class Timer extends Interactable {\r\n    private readonly _tickStorage: Array<boolean>;\r\n\r\n    public constructor(serialized: Omit<ISerializedTimer, 'inputs'>) {\r\n        super(serialized);\r\n        this._tickStorage = [ ...serialized.tickStorage ];\r\n    }\r\n\r\n    public get generatedDescription(): string | undefined {\r\n        return this._tickStorage.length-1 + '-tick timer (' + this._tickStorage.length + ' ticks of actual saved state)';\r\n    }\r\n\r\n    public changeSize(delta: number): void {\r\n        if (delta < 0) {\r\n            const actualDeletes = Math.min(-delta, this._tickStorage.length-1);\r\n            if (actualDeletes > 0) {\r\n                this._tickStorage.splice(this._tickStorage.length-actualDeletes, actualDeletes);\r\n            }\r\n        }\r\n        else {\r\n            let actualAdds = Math.min(delta, 30 - this._tickStorage.length);\r\n            while (actualAdds > 0) {\r\n                this._tickStorage.push(false);\r\n                actualAdds -= 1\r\n            }\r\n        }\r\n        this._emitStateChanged()\r\n    }\r\n\r\n    public get tickStorage(): Array<boolean> {\r\n        return [...this._tickStorage];\r\n    }\r\n\r\n    public export(): ISerializedTimer {\r\n        return {\r\n            ...super.export(),\r\n            kind: 'timer',\r\n            tickStorage: this._tickStorage,\r\n        };\r\n    }\r\n\r\n    public calculate(): void {\r\n        // Advance everything in the array\r\n        for (let i = 0; i < this._tickStorage.length-1; ++i) {\r\n            this._tickStorage[this._tickStorage.length-1-i] = this._tickStorage[this._tickStorage.length-2-i];\r\n        }\r\n        this._tickStorage[0] = this.inputs.length > 0 && this.inputs[0].prevState;\r\n        this.setCurrentState(this._tickStorage[this._tickStorage.length-1]);\r\n\r\n        // Might be nice to compare the old array with the new one and only do this if it actually changed.\r\n        this._emitStateChanged();\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        for (let i = 0; i < this._tickStorage.length; ++i) {\r\n            this._tickStorage[i] = false;\r\n        }\r\n        this.setCurrentState(false);\r\n        this.setPrevState(false);\r\n        this._emitStateChanged();\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 1;\r\n    }\r\n}\r\n\r\n","import { EventEmitter } from 'events';\r\nimport pako from 'pako';\r\nimport { hasOwnProperty, Interactable, ISerializedInteractable } from './Model';\r\n\r\n\r\nexport interface IEventArgsSimulator {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport interface IEventArgsTick extends IEventArgsSimulator {\r\n    tick: number;\r\n}\r\n\r\nexport interface IEventArgsInteractableAdded extends IEventArgsSimulator {\r\n    interactable: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractableRemoved extends IEventArgsSimulator {\r\n    interactable: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractablesReset extends IEventArgsSimulator {\r\n    oldInteractables: Array<Interactable>;\r\n}\r\n\r\nexport interface IEventArgsSimulatorRunStateChanged extends IEventArgsSimulator {\r\n    newRunState: boolean;\r\n}\r\n\r\nexport interface IInteractableLink {\r\n    source: Interactable;\r\n    target: Interactable;\r\n}\r\n\r\nexport type ISerializedSimulator = Array<ISerializedInteractable>\r\n\r\nexport class Simulator {\r\n    private _nextTickTimeoutId: NodeJS.Timeout | undefined;\r\n    private _pauseInterval: number;\r\n    private readonly _events: EventEmitter;\r\n\r\n    public currentTick: number; // TODO: make it readonly to outside callers\r\n    public isRunning: boolean; // TODO: make it readonly to outside callers\r\n    public interactables: Array<Interactable>;\r\n\r\n    constructor() {\r\n        this._events = new EventEmitter();\r\n        this.currentTick = 0;\r\n        this.isRunning = false;\r\n        this._nextTickTimeoutId = undefined;\r\n        this._pauseInterval = 250;\r\n        this.interactables = [];\r\n    }\r\n\r\n    public serialize(): ISerializedSimulator {\r\n        function buildSerializedWithInputs(interactable: Interactable, allInteractables: Array<Interactable>): ISerializedInteractable {\r\n            const serialized: ISerializedInteractable = interactable.export();\r\n            serialized.inputs = interactable.inputs.map(i => allInteractables.indexOf(i));\r\n            return serialized;\r\n        }\r\n        return this.interactables.map(i => buildSerializedWithInputs(i, this.interactables));\r\n    }\r\n\r\n    public load(serialized: unknown): void {\r\n        if (!Array.isArray(serialized)) {\r\n            throw new Error(\"Bad format - expected an array at the top level\");\r\n        }\r\n\r\n        // interactables that we get here have empty input lists\r\n        const interactables: Array<Interactable> = serialized.map(i => Interactable.validateAndDeserialize(i));\r\n        for (let i = 0; i < interactables.length; ++i) {\r\n            const serializedInteractable:unknown = serialized[i];\r\n            const deserializedInteractable: Interactable = interactables[i];\r\n\r\n            if (typeof(serializedInteractable) !== 'object' || serializedInteractable === null) {\r\n                throw new Error(\"Bad format - expected an array of objects at the top level\");\r\n            }\r\n\r\n            if (!hasOwnProperty(serializedInteractable, 'inputs')) {\r\n                throw new Error(\"Interactable is missing an 'inputs' array\");\r\n            }\r\n\r\n            if (!Array.isArray(serializedInteractable.inputs)) {\r\n                throw new Error(\"Interactable 'inputs' field should be an array of indices\");\r\n            }\r\n\r\n            for (const serializedInputIndex of serializedInteractable.inputs) {\r\n                if (typeof(serializedInputIndex) !== 'number') {\r\n                    throw new Error(\"'inputs' should consist of numbers\");\r\n                }\r\n\r\n                if (serializedInputIndex < 0 || serializedInputIndex >= interactables.length) {\r\n                    throw new Error(\"'inputs' has an index that is out of range\");\r\n                }\r\n\r\n                deserializedInteractable.addInput(interactables[serializedInputIndex]);\r\n            }\r\n        }\r\n\r\n        const oldInteractables = this.interactables;\r\n        this.interactables = interactables;\r\n        this._emitInteractablesReset( { simulator: this, oldInteractables: oldInteractables });\r\n\r\n        this.stopRunning();\r\n    }\r\n\r\n    private static _hashCode(s: string): number {\r\n        return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);              \r\n    }\r\n\r\n    public loadFromQsAndCookie(): void {\r\n        const queryString: string | undefined = window.location.search;\r\n\r\n        const ca = document.cookie.split(';');\r\n        let cookieState: string | undefined;\r\n        let cookieIsForThisQueryString = false;\r\n        for(let i = 0; i < ca.length; i++) {\r\n            const c = ca[i].trimStart();\r\n            if (c.startsWith(\"state=\")) {\r\n                cookieState = c.substring(6, c.length);\r\n            }\r\n            if (c.startsWith(\"hash=\") && queryString !== '') {\r\n                cookieIsForThisQueryString = Simulator._hashCode(queryString).toString() === c.substring(5, c.length);\r\n            }\r\n        }\r\n\r\n        let loadFrom: string | undefined;\r\n        if ((cookieIsForThisQueryString && cookieState !== undefined) || queryString === '') {\r\n            loadFrom = cookieState;\r\n        }\r\n        else if (queryString !== '') {\r\n            loadFrom = queryString;\r\n        }\r\n\r\n        let serialized: unknown | undefined = [];\r\n        if (loadFrom) {\r\n            try\r\n            {\r\n                serialized = Simulator.decompressQueryStringFragment(loadFrom);\r\n            }\r\n            catch {\r\n                throw Error(\"The query string doesn't seem to be something created by this app - was it perhaps truncated?\");\r\n            }\r\n        }\r\n        this.load(serialized);\r\n    }\r\n\r\n    public storeInCookie(): void {\r\n        // ISSUE - once you get over 4k, this will certainly fail.  As far as I can see, it'd be possible\r\n        //   to break this into multiple strings.  See:\r\n        //  https://www.thoughtco.com/cookie-limit-per-domain-3466809#:~:text=Chrome%20and%20Safari%20appear%20to,50%20maximum%20cookies%20per%20domain.\r\n        //   Although it appears that some browsers will not support more than a total of 4k in cookie data total.\r\n        const d = new Date();\r\n        d.setTime(d.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 days\r\n        const extraSlag = \";expires=\"+d.toUTCString()+\";path=/\";\r\n        document.cookie = \"state=\" + this.serializeToCompressedQueryStringFragment() + extraSlag;\r\n        const queryString: string | undefined = window.location.search;\r\n        if (queryString) {\r\n            document.cookie = \"hash=\" + Simulator._hashCode(queryString) + extraSlag;\r\n        }\r\n    }\r\n\r\n    public fitToSize(width: number, height: number, padX: number, padY: number): void {\r\n        if (this.interactables.every(i => i.x >= 0 && i.x < width-64 && i.y >= 0 && i.y < height-64)) {\r\n            // Seems to fit reasonably well already\r\n            return;\r\n        }\r\n\r\n        const maxX: number = this.interactables.reduce((previousValue, currentValue) => Math.max(previousValue, currentValue.x), 0);\r\n        const maxY: number = this.interactables.reduce((previousValue, currentValue) => Math.max(previousValue, currentValue.y), 0);\r\n        const minX: number = this.interactables.reduce((previousValue, currentValue) => Math.min(previousValue, currentValue.x), 999999);\r\n        const minY: number = this.interactables.reduce((previousValue, currentValue) => Math.min(previousValue, currentValue.y), 999999);\r\n\r\n        for (const i of this.interactables) {\r\n            const newX = padX + (i.x - minX) * (width - 2*padX - 64) / maxX;\r\n            const newY = padY + (i.y - minY) * (height - 2*padY - 64) / maxY;\r\n            i.setPosition(newX, newY);\r\n        }\r\n    }\r\n\r\n    public gameReload(): void {\r\n        for (const i of this.interactables) {\r\n            i.reload();\r\n        }\r\n\r\n        this.currentTick = 0;\r\n        this._emitTick();\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        for (const i of this.interactables) {\r\n            i.putOnLift();\r\n        }\r\n    }\r\n\r\n    public takeOffLift(): void {\r\n        for (const i of this.interactables) {\r\n            i.paint();\r\n        }\r\n    }\r\n\r\n    public serializeToCompressedQueryStringFragment(): string {\r\n        const jsonSerialized: string = JSON.stringify(this.serialize());\r\n        const compressed: Uint8Array = pako.deflate(jsonSerialized);\r\n        const sharableString: string = Buffer.from(compressed).toString('base64');\r\n        return encodeURIComponent(sharableString);\r\n    }\r\n\r\n    public static decompressQueryStringFragment(queryString: string): unknown {\r\n        const base64: string = decodeURIComponent(queryString);\r\n        const compressedData: Uint8Array = Buffer.from(base64, 'base64');\r\n\r\n        const serializedString: string = pako.inflate(compressedData, { to: 'string' });\r\n        return JSON.parse(serializedString);\r\n    }\r\n\r\n    public startRunning(): void {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this._nextTickTimeoutId = setTimeout(this._handleTickTimeout.bind(this), this._pauseInterval);\r\n\r\n        this._events.emit('runStateChanged', { simulator: this, newRunState: this.isRunning });\r\n    }\r\n\r\n    public stopRunning(): void {\r\n        if (!this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this.isRunning = false;\r\n        if (this._nextTickTimeoutId) {\r\n            clearTimeout(this._nextTickTimeoutId);\r\n        }\r\n\r\n        this._nextTickTimeoutId = undefined;\r\n\r\n        this._events.emit('runStateChanged', { simulator: this, newRunState: this.isRunning });\r\n    }\r\n\r\n    public advanceOne(): void {\r\n        if (this.isRunning) {\r\n            this.stopRunning();\r\n        }\r\n        else {\r\n            this._advanceOne();\r\n        }\r\n    }\r\n\r\n    public add(interactable: Interactable): void {\r\n        this.interactables.push(interactable);\r\n        this._events.emit(EventNames.interactableAdded, { simulator: this, interactable: interactable } as IEventArgsInteractableAdded);\r\n    }\r\n\r\n    public remove(interactable: Interactable): boolean {\r\n        let didRemove = false;\r\n        for (let i = this.interactables.length-1; i >= 0; --i) {\r\n            if (this.interactables[i] === interactable) {\r\n                didRemove = true;\r\n                this.interactables.splice(i ,1);\r\n            }\r\n        }\r\n        for (const i of this.interactables) {\r\n            i.removeInput(interactable);\r\n        }\r\n\r\n        if (didRemove)\r\n        {\r\n            this._events.emit(EventNames.interactableRemoved, { simulator: this, interactable: interactable } as IEventArgsInteractableRemoved);\r\n        }\r\n\r\n        return didRemove;\r\n    }\r\n\r\n    public getLinks(): Array<IInteractableLink> {\r\n        return this.interactables\r\n            .map(target => target.inputs\r\n                .map(function(source) {return {source: source, target: target}}))\r\n            .reduce((a,b) => a.concat(b), []);\r\n    }\r\n\r\n    private _advanceOne(): void {\r\n        ++this.currentTick;\r\n        this._emitTick();\r\n\r\n        for (const i of this.interactables) {\r\n            i.apply();\r\n        }\r\n        for (const i of this.interactables) {\r\n            i.calculate();\r\n        }\r\n    }\r\n\r\n    public onTick(handler: (eventArgs: IEventArgsTick) => void): void {\r\n        this._events.on(EventNames.tick, handler);\r\n    }\r\n\r\n    public offTick(handler: (eventArgs: IEventArgsTick) => void): void {\r\n        this._events.off(EventNames.tick, handler);\r\n    }\r\n\r\n    private _emitTick() {\r\n        this._events.emit(EventNames.tick, { simulator: this, tick: this.currentTick } as IEventArgsTick);\r\n    }\r\n\r\n    public onInteractableAdded(handler: (EventTarget: IEventArgsInteractableAdded) => void): void {\r\n        this._events.on(EventNames.interactableAdded, handler);\r\n    }\r\n\r\n    public offInteractableAdded(handler: (EventTarget: IEventArgsInteractableAdded) => void): void {\r\n        this._events.off(EventNames.interactableAdded, handler);\r\n    }\r\n\r\n    public onInteractableRemoved(handler: (EventTarget: IEventArgsInteractableRemoved) => void): void {\r\n        this._events.on(EventNames.interactableRemoved, handler);\r\n    }\r\n\r\n    public offInteractableRemoved(handler: (EventTarget: IEventArgsInteractableRemoved) => void): void {\r\n        this._events.off(EventNames.interactableRemoved, handler);\r\n    }\r\n\r\n    public onRunStateChanged(handler: (EventTarget: IEventArgsSimulatorRunStateChanged) => void): void {\r\n        this._events.on('runStateChanged', handler);\r\n    }\r\n\r\n    public offRunStateChanged(handler: (EventTarget: IEventArgsSimulatorRunStateChanged) => void): void {\r\n        this._events.off('runStateChanged', handler);\r\n    }\r\n\r\n    public onInteractablesReset(handler: (EventTarget: IEventArgsInteractablesReset) => void): void {\r\n        this._events.on('interactablesReset', handler);\r\n    }\r\n\r\n    public offInteractablesReset(handler: (EventTarget: IEventArgsInteractablesReset) => void): void {\r\n        this._events.off('interactablesReset', handler);\r\n    }\r\n\r\n    private _emitInteractablesReset(eventArgs: IEventArgsInteractablesReset )\r\n    {\r\n        this._events.emit('interactablesReset', eventArgs);\r\n    }\r\n\r\n    private _handleTickTimeout(): void {\r\n        this._advanceOne();\r\n        this._nextTickTimeoutId = setTimeout(this._handleTickTimeout.bind(this), this._pauseInterval);\r\n    }\r\n}\r\n\r\nconst EventNames = {\r\n    // This is emitted whenever the clock is actually advanced.  State calculated in\r\n    // 'pretick' should now become the current state.\r\n    tick: 'tick',\r\n\r\n    // A new component has been added to the model (argument is the new item)\r\n    interactableAdded: 'interactableAdded',\r\n\r\n    // A component has been removed from the model (argument is the removed item)\r\n    interactableRemoved: 'interactableRemoved',\r\n};\r\n"],"sourceRoot":""}