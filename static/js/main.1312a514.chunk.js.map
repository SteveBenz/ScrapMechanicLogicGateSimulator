{"version":3,"sources":["TickCounter.tsx","ViewModel.tsx","FloatingErrorMessage.tsx","Buttons.tsx","App.tsx","reportWebVitals.ts","index.ts","Simulator.ts","Model.ts"],"names":["TickCounter","props","React","currentTick","setCurrentTick","width","setWidth","textRef","handleTick","simulator","current","text","toString","onTick","offTick","y","top","x","right","ref","fill","fontSize","_assets","Interactable","useState","model","setPosition","currentState","isOn","setIsOn","groupRef","useRef","useEffect","handleMoved","onMoved","offMoved","handleStateChanged","onStateChanged","offStateChanged","groupContent","push","height","strokeWidth","stroke","isSelected","Model","SavedStateIndicator","LogicGate","Input","Timer","onClick","eventArgs","evt","onMouseUp","e","draggable","onDragStart","shiftKey","Error","stopDrag","onLinkStart","onDragMove","pos","target","absolutePosition","onDragEnd","onMoveCompleted","savedState","setSavedState","points","closed","kind","setKind","image","radius","tickStorage","setTickStorage","rectHeight","length","map","tickValue","index","drawingWidth","drawingHeight","LinkArrow","source","prevState","isLit","setIsLit","getPositions","sourceX","sourceY","targetX","targetY","setPositions","Math","abs","sign","yTrim","xTrim","handleSourceOrTargetMoved","pointerLength","pointerWidth","timeout","show","message","error","document","getElementById","innerText","classList","add","clearTimeout","setTimeout","remove","undefined","pressedScalingFactor","ToolTip","toolTipId","timeoutHandle","_handleTimeout","element","style","visibility","clientHeight","left","buttonWidth","clientWidth","this","ToolBarButton","isPressed","setIsPressed","isHovering","setIsHovering","tooltip","clearTimer","buttonHeight","onMouseEnter","startTimer","onMouseLeave","offsetY","onMouseDown","onClicked","scaleX","scaleY","children","isEnabled","useIsRunning","isRunning","setIsRunning","handleRunStateChanged","onRunStateChanged","offRunStateChanged","StartStopButton","content","lineCap","stopRunning","startRunning","SingleStepButton","advanceOne","LogicGateButton","value","ViewModel","selected","twiddle","FloatingErrorMessage","prototype","offsetX","Array","onBeginDrag","event","PaintButton","paint","PutOnLiftButton","putOnLift","TakeOffLiftButton","takeOffLift","DeleteButton","CopyLinkButton","a","navigator","clipboard","alert","url","window","location","origin","pathname","serializeToCompressedQueryStringFragment","writeText","SaveToFileButton","file","File","JSON","stringify","serialize","type","FileSaver","saveAs","LoadFromFileButton","fileElem","handleFileGiven","files","reader","FileReader","onload","jsonContent","fileContents","result","parse","err","load","readAsText","addEventListener","removeEventListener","click","ReloadButton","gameReload","getScreenLayout","canvasHeight","innerHeight","canvasWidth","innerWidth","numRows","hSpaceBetweenButtons","buttonRowHeight","buttonRowY","n","vSpaceBetweenButtons","maxSensibleDropX","maxSensibleDropY","buttonRowX","App","interactables","setInteractables","getLinks","links","setLinks","setSelected","linkSource","setLinkSource","linkTargetX","linkTargetY","setLinkTarget","createByDragPrototype","setCreateByDragPrototype","screenLayout","setScreenLayout","considerResizeOnNextRender","setConsiderResizeOnNextRender","stageRef","handleInteractableClicked","handleLinkStart","handleNewInteractableDrag","handleMoveCompleted","handleInteractablesChanged","indexOf","handleInteractablesReset","onInteractableAdded","onInteractableRemoved","onInteractablesReset","offInteractableAdded","offInteractableRemoved","offInteractablesReset","handleResize","handleKeyPress","xy","getPointerPosition","key","newInteractable","preventDefault","console","debug","container","tabIndex","focus","pointer","fitToSize","i","addInput","onMouseMove","id","link","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryString","search","serialized","Simulator","decompressQueryStringFragment","onComplete","Konva","Image","fromURL","img","Object","keys","render","makeItSo","_nextTickTimeoutId","_pauseInterval","_events","EventEmitter","interactable","allInteractables","export","inputs","buildSerializedWithInputs","isArray","validateAndDeserialize","serializedInteractable","deserializedInteractable","hasOwnProperty","serializedInputIndex","oldInteractables","_emitInteractablesReset","padX","padY","every","maxX","reduce","previousValue","currentValue","max","maxY","minX","min","minY","newX","newY","reload","_emitTick","jsonSerialized","compressed","pako","deflate","sharableString","Buffer","from","encodeURIComponent","_handleTickTimeout","bind","emit","newRunState","_advanceOne","EventNames","interactableAdded","didRemove","splice","removeInput","interactableRemoved","b","concat","apply","calculate","handler","on","tick","off","base64","decodeURIComponent","compressedData","serializedString","inflate","to","obj","prop","deserializeInteractable","_x","_y","events","_inputs","_prevState","_currentState","idCounter","_emitMoved","newValue","_emitStateChanged","newInput","inputLimit","existingIndex","indexInTarget","deadInput","_direction","setPrevState","validateAndDeserializeInteractableWithSavedState","validateAndNormalizeInput","rawTickStorage","timerTickStorage","validateAndNormalizeTimer","deserializeLogicGate","defaultSavedState","InteractableWithSingleBitSavedState","_savedState","setCurrentState","LogicGateKindSequence","_kind","direction","calculatedState","numActivatedInputs","_tickStorage"],"mappings":"8LAkBO,SAASA,EAAYC,GAAuC,IAAD,EACxBC,WAAe,GADS,mBACvDC,EADuD,KAC1CC,EAD0C,OAEpCF,WAAe,IAFqB,mBAEvDG,EAFuD,KAEhDC,EAFgD,KAGxDC,EAAuCL,SAAyB,MAyBtE,OAtBAA,aAAgB,WACZ,SAASM,IACLJ,EAAeH,EAAMQ,UAAUN,aAEP,OAApBI,EAAQG,UAQZH,EAAQG,QAAQC,KAAKV,EAAMQ,UAAUN,YAAYS,YACjDN,EAASC,EAAQG,QAAQL,UAM7B,OAHAJ,EAAMQ,UAAUI,OAAOL,GACvBA,IAEO,WAAOP,EAAMQ,UAAUK,QAAQN,MACvC,CAACP,EAAMQ,YAGN,cAAC,OAAD,CAAMM,EAAGd,EAAMe,IACTC,EAAGhB,EAAMiB,MAAQb,EACjBc,IAAKZ,EACLa,KAAK,MACLT,KAAMR,EAAYS,WAClBS,SAAU,K,4BC7CXC,EAAe,GAiBrB,SAASC,EAAatB,GAAyC,IAAD,EACpCuB,mBAAS,CAACvB,EAAMwB,MAAMR,EAAGhB,EAAMwB,MAAMV,IADD,yCACzDE,EADyD,KACvDF,EADuD,KACnDW,EADmD,OAEzCF,mBAASvB,EAAMwB,MAAME,cAFoB,mBAE1DC,EAF0D,KAEpDC,EAFoD,KAG3DC,EAAyC5B,IAAM6B,OAAoB,MA+DzEC,qBAAU,WACN,SAASC,IACLP,EAAY,CAACzB,EAAMwB,MAAMR,EAAGhB,EAAMwB,MAAMV,IAG5C,OADAd,EAAMwB,MAAMS,QAAQD,GACb,kBAAMhC,EAAMwB,MAAMU,SAASF,MACnC,CAAChC,EAAMwB,QAEVO,qBAAU,WACN,SAASI,IACLP,EAAQ5B,EAAMwB,MAAME,cAGxB,OADA1B,EAAMwB,MAAMY,eAAeD,GACpB,kBAAMnC,EAAMwB,MAAMa,gBAAgBF,MAC1C,CAACnC,EAAMwB,QAEV,IAAMc,EAAmC,GAezC,OAdAA,EAAaC,KACT,cAAC,OAAD,CAAqBC,OAAQ,GAAIpC,MAAO,GAAIqC,YAAa,EAAGC,OAAQ1C,EAAM2C,WAAa,QAAU,OAAQxB,KAAMQ,EAAO,QAAU,QAAtH,aAEV3B,EAAMwB,iBAAiBoB,KACvBN,EAAaC,KAAK,cAACM,EAAD,CAA+CrB,MAAOxB,EAAMwB,OAAnC,wBAE3CxB,EAAMwB,iBAAiBoB,IACvBN,EAAaC,KAAK,cAACO,EAAD,CAA2BtB,MAAOxB,EAAMwB,OAAzB,cAC1BxB,EAAMwB,iBAAiBoB,IAC9BN,EAAaC,KAAK,cAACQ,EAAD,GAAW,UACtB/C,EAAMwB,iBAAiBoB,KAC9BN,EAAaC,KAAK,cAACS,EAAD,CAAmBxB,MAAOxB,EAAMwB,OAArB,UAG1B,cAAC,QAAD,CAAOyB,QAxCd,SAAqBC,GACblD,EAAMiD,SACNjD,EAAMiD,QAAQ,CACVE,IAAKD,EAAUC,IACf3B,MAAOxB,EAAMwB,SAqCX4B,UA7Fd,SAAyBC,GACjBrD,EAAMoD,WACNpD,EAAMoD,UAAU,CACZD,IAAKE,EAAEF,IACP3B,MAAOxB,EAAMwB,SA0FXN,IAAKW,EACLyB,WAAS,EACTtC,EAAGA,EACHF,EAAGA,EACHyC,YAzFd,SAAyBF,GAMrB,IAAKA,EAAEF,IAAIK,SAAU,CACjB,IAAK3B,EAASpB,QACV,MAAM,IAAIgD,MAAM,mCAGpB5B,EAASpB,QAAQiD,WAEb1D,EAAM2D,aACN3D,EAAM2D,YAAY,CACdR,IAAKE,EAAEF,IACP3B,MAAOxB,EAAMwB,UA0EfoC,WAnEd,SAAwBP,GAUpB,IAAMQ,EAAMR,EAAES,OAAOC,mBACrB/D,EAAMwB,MAAMC,YAAYoC,EAAI7C,EAAG6C,EAAI/C,IAyDzBkD,UAtDd,SAAuBX,GACfrD,EAAMiE,iBACNjE,EAAMiE,gBAAgB,CAAEd,IAAKE,EAAEF,IAAK3B,MAAOxB,EAAMwB,SA4ClD,SASVc,IAQD,SAASO,EAAoB7C,GAAuD,IAAD,EAC3CuB,mBAASvB,EAAMwB,MAAM0C,YADsB,mBACxEA,EADwE,KAC5DC,EAD4D,KAG/EpC,qBAAU,WACN,SAASI,IACLgC,EAAcnE,EAAMwB,MAAM0C,YAG9B,OADAlE,EAAMwB,MAAMY,eAAeD,GACpB,kBAAMnC,EAAMwB,MAAMa,gBAAgBF,MAC1C,CAACnC,EAAMwB,QAGV,OAAO,cAAC,OAAD,CACK4C,OAAQ,CAAC,GAAS,EAAG,GAAI,EAAG,GAF7B,IAGCjD,KAAM+C,EAAa,OAAS,cAC5BxB,OAAO,OACPD,YAAa,EACb4B,QAAQ,GALH,sBAYrB,SAASvB,EAAU9C,GAAsC,IAAD,EAC5BuB,mBAASvB,EAAMwB,MAAM8C,MADO,mBAC7CA,EAD6C,KACvCC,EADuC,KAUpD,OAPAxC,qBAAU,WACN,SAASI,IACLoC,EAAQvE,EAAMwB,MAAM8C,MAGxB,OADAtE,EAAMwB,MAAMY,eAAeD,GACpB,kBAAMnC,EAAMwB,MAAMa,gBAAgBF,MAC1C,CAACnC,EAAMwB,QACH,cAAC,QAAD,CAAOR,EAAG,EAAGF,EAAG,EAAG0D,MAAOnD,EAAQiD,GAAME,UAGnD,SAASzB,IACL,OAAO,cAAC,SAAD,CAAoB0B,OAAQ,GAAIzD,EAAG,GAAIF,EAAG,GAAI2B,YAAa,EAAGC,OAAO,SAAzD,SAOhB,SAASM,EAAMhD,GAAkC,IAAD,EACbuB,mBAASvB,EAAMwB,MAAMkD,aADR,mBAC5CA,EAD4C,KAC/BC,EAD+B,KAEnD5C,qBAAU,WACN,SAASI,IACLwC,EAAe,YAAI3E,EAAMwB,MAAMkD,cAGnC,OADA1E,EAAMwB,MAAMY,eAAeD,GACpB,kBAAMnC,EAAMwB,MAAMa,gBAAgBF,MAC1C,CAACnC,EAAMwB,QAEV,IAIMoD,EAAa,GAAqCF,EAAYG,OAEpE,OAAO,cAAC,QAAD,UACEH,EAAYI,KAAI,SAACC,EAAWC,GAAZ,OACb,cAAC,OAAD,CACIhE,EAPS,GAQTZ,MAAO6E,GACPnE,EAAGoE,GAAiCN,EAAmB,GAANI,EAAuCN,EAAYG,OACpGrC,OAAQoC,EACRnC,YAAa,EACbC,OAAO,WACPvB,KAAM4D,EAAY,OAAS,SAPpBC,EAAMrE,iBAgB1B,SAASwE,EAAUnF,GAAsC,IAAD,EACjCC,IAAMsB,SAASvB,EAAMoF,OAAOC,WADK,mBACpDC,EADoD,KAC7CC,EAD6C,OAEEtF,IAAMsB,SAASiE,KAFjB,yCAEnDC,EAFmD,KAE1CC,EAF0C,KAEjCC,EAFiC,KAExBC,EAFwB,KAEdC,EAFc,KAI3D,SAASL,IACL,IAAIC,EAAUzF,EAAMoF,OAAOpE,EAAE,GACzB0E,EAAU1F,EAAMoF,OAAOtE,EAAE,GACzB6E,EAAU3F,EAAM8D,OAAO9C,EAAE,GACzB4E,EAAU5F,EAAM8D,OAAOhD,EAAE,GAE7B,GAAIgF,KAAKC,IAAIH,EAAQF,GAAWI,KAAKC,IAAIJ,EAAQF,GAAU,CAEvD,IAAMO,EAAQL,EAAUF,EAAW,GAAK,EAClCQ,EAAQ,IAAIL,EAAUF,IAAUC,EAAQF,GAC9CA,GAAgB,GAALO,EACXL,GAAgB,GAALK,EACXN,GAAWM,EAAKC,EAChBL,GAAWI,EAAKC,MAEf,CACD,IAAMD,EAAQJ,EAAUF,EAAW,GAAK,EAClCQ,EAAQ,IAAIP,EAAUF,IAAUG,EAAQF,GAC9CD,GAAWO,EAAKE,EAChBP,GAAWK,EAAKE,EAChBR,GAAgB,GAALM,EACXJ,GAAgB,GAALI,EAGf,MAAO,CAACP,EAASC,EAASC,EAASC,GAGvC,SAASzD,IACLoD,EAASvF,EAAMoF,OAAOC,WAE1B,SAASc,IACLN,EAAaL,KAejB,OAZAzD,qBAAU,WAKN,OAJA/B,EAAMoF,OAAOhD,eAAeD,GAC5BnC,EAAMoF,OAAOnD,QAAQkE,GACrBnG,EAAM8D,OAAO7B,QAAQkE,GAEd,WACHnG,EAAMoF,OAAO/C,gBAAgBF,GAC7BnC,EAAMoF,OAAOlD,SAASiE,GACtBnG,EAAM8D,OAAO5B,SAASiE,MAE3B,CAACnG,EAAMoF,OAAQpF,EAAM8D,SAEjB,cAAC,QAAD,CAAO9C,EAAGyE,EACH3E,EAAG4E,EACHtB,OAAQ,CAAC,EAAE,EAAGuB,EAAQF,EAASG,EAAQF,GACvCvE,KAAMmE,EAAQ,WAAa,OAC3B5C,OAAQ4C,EAAQ,WAAa,OAC7B7C,YAAa,EACb2D,cAAe,GACfC,aAAc,K,IClR5BC,E,0DAEG,SAASC,EAAKC,GACjB,IAAMC,EAAQC,SAASC,eAAe,SACtC,GAAc,OAAVF,EACA,MAAM,IAAIhD,MAAM,yBAGpBgD,EAAMG,UAAYJ,EAClBC,EAAMI,UAAUC,IAAI,WAEhBR,GACAS,aAAaT,GAGjBA,EAAUU,YAAW,WACjBP,EAAMI,UAAUI,OAAO,WACvBX,OAAUY,IACX,KCEP,IAEMC,EAAuB,KAEvBC,E,WAGF,WAA6BC,EAA0BrG,EAAkBF,GACxE,IAAD,gCAD6BuG,YAC7B,KADuDrG,IACvD,KADyEF,IACzE,KAHQwG,mBAGR,OAuBQC,eAA6B,WAEjC,GADA,EAAKD,mBAAgBJ,EAChB,EAAKG,UAAV,CAIA,IAAMG,EAA8Bd,SAASC,eAAe,EAAKU,WACjE,IAAKG,EACD,MAAM,IAAI/D,MAAM,iDAGpB+D,EAAQC,MAAMC,WAAa,UAC3BF,EAAQC,MAAM1G,IAAO,EAAKD,EAAI0G,EAAQG,aAAe,EAAK,KAC1D,IAAIC,EAAc,EAAK5G,EAAI6G,GAAgBL,EAAQM,YAAY,EAC3DF,EAAO,IACPA,EAAO,IAEXJ,EAAQC,MAAM1G,IAAO,EAAKD,EAAI0G,EAAQG,aAAe,EAAK,KAC1DH,EAAQC,MAAMG,KAAOA,EAAO,O,0DArCvBG,KAAKT,eAAiBZ,SAASC,eAAeoB,KAAKV,aACpDU,KAAKT,cAAgBN,WAAWe,KAAKR,eAAgB,Q,mCAKrDQ,KAAKT,gBACLP,aAAagB,KAAKT,eAClBS,KAAKT,mBAAgBJ,GAGzB,IAAMM,EAA8Bd,SAASC,eAAeoB,KAAKV,WACjE,IAAKG,EACD,MAAM,IAAI/D,MAAM,iDAGpB+D,EAAQC,MAAMC,WAAa,a,KA0BnC,SAASM,EAAchI,GAA6B,IAAD,EACbC,YAAe,GADF,mBACxCgI,EADwC,KAC7BC,EAD6B,OAEXjI,YAAe,GAFJ,mBAExCkI,EAFwC,KAE5BC,EAF4B,OAG7BnI,WAAe,IAAImH,EAAQpH,EAAMqH,UAAWrH,EAAMgB,EAAGhB,EAAMc,IAAtEuH,EAHwC,oBAuC/C,OAjCApI,aAAgB,WACZ,OAAO,kBAAMoI,EAAQC,gBACtB,CAACD,IA+BG,eAAC,QAAD,CAAOrH,EAAGhB,EAAMgB,GAAKiH,EAAYJ,mBAA6C,GACnE/G,EAAGd,EAAMc,GAAKmH,EAAYM,mBAA8C,GACxEC,aA/BlB,WACIJ,GAAc,GACdC,EAAQI,cA8BMC,aA3BlB,SAA0BxF,GAElBlD,EAAMuD,aAAe0E,GAAa/E,EAAUC,IAAIwF,QAAU3I,EAAMc,EAAE,IAClEd,EAAMuD,YAAYL,GAGtBkF,GAAc,GACdF,GAAa,GACbG,EAAQC,cAoBMM,YAjBlB,WACIV,GAAa,GACbG,EAAQC,cAgBMlF,UAblB,SAAuBF,GACnBgF,GAAa,GACTlI,EAAM6I,WACN7I,EAAM6I,UAAU3F,GAEpBmF,EAAQI,cASMK,OAAQb,EAAYd,EAAuB,EAC3C4B,OAAQd,EAAYd,EAAuB,EAPtD,UAQMnH,EAAMgJ,SACP,cAAC,OAAD,CAAMhI,EAAG,EAAGF,EAAG,EAAG0B,OAAQ,GAAIpC,MAAO,GAC/BqC,YAAa,EAAGC,OAAQyF,EAAa,QAAU,OAC/ChH,KAAMnB,EAAMiJ,UAAY,cAAgB,iBAW9D,SAASC,EAAa1H,GAAmB,IAAD,EACFvB,WAAeuB,EAAM2H,WADnB,mBAC7BA,EAD6B,KAClBC,EADkB,KAWpC,OARAnJ,aAAgB,WACZ,SAASoJ,IACLD,EAAa5H,EAAM2H,WAGvB,OADA3H,EAAM8H,kBAAkBD,GACjB,kBAAM7H,EAAM+H,mBAAmBF,MACvC,CAAC7H,IAEG2H,EAGJ,SAASK,EAAgBxJ,GAC5B,IAEMyJ,EAFYP,EAAalJ,EAAMwB,OAGrC,CACI,cAAC,OAAD,CAAc4C,OAAQ,CAAC,GAAM,GAAO,GAAM,IAAQsF,QAAQ,OAAOjH,YAAa,EAAGC,OAAO,OAA9E,KACV,cAAC,OAAD,CAAc0B,OAAQ,CAAC,GAAM,GAAO,GAAM,IAAQsF,QAAQ,OAAOjH,YAAa,EAAGC,OAAO,OAA9E,MACV,cAAC,OAAD,CAAe0B,OAAQ,CAAC,GAAO,GAAO,GAAO,GAAI,GAAO,IACtD3B,YAAa,EACbC,OAAO,QACPvB,KAAK,QACLkD,QAAQ,GAJA,KAcd,OAAO,cAAC2D,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,eAAe4B,WAAW,EAAMJ,UARxF,WACQ7I,EAAMwB,MAAM2H,UACZnJ,EAAMwB,MAAMmI,cAEZ3J,EAAMwB,MAAMoI,gBAIb,SACFH,IAWF,SAASI,EAAiB7J,GAC7B,IAAMmJ,EAAYD,EAAalJ,EAAMwB,OAMrC,OAAO,cAACwG,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,gBAAgB4B,WAAW,EAAMJ,UAJzF,WACI7I,EAAMwB,MAAMsI,cAGT,SACH,cAAC,OAAD,CAAM1F,OAAQ,CAAC,GAAO,GAAI,GAAO,GAAO,GAAO,GAAO,GAAO,GAAI,GAAO,GAAO,GAAO,IACtF3B,YAAa,EACbC,OAAQyG,EAAY,YAAc,YAClC9E,QAAQ,MAkBT,SAAS0F,EAAgB/J,GAE5B,IA2CIyJ,EA3CEpC,EAA2B,UAAfrH,EAAMsE,KAClB,WACgB,UAAftE,EAAMsE,KACH,WACA,eAwCV,OAAOtE,EAAMsE,MACT,IAAK,QACDmF,EAAU,cAAC,SAAD,CAAQhF,OAAQ,GAAIzD,EAAG,GAAIF,EAAG,GAAI2B,YAAa,EAAGC,OAAO,UACnE,MACJ,IAAK,QACD,IAIMgC,EAAc,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAO,GAAO,GAAO,GAAO,GACzEE,EAAa,GAAqCF,EAAYG,OAEpE4E,EAAU/E,EAAYI,KAAI,SAACkF,EAAgBhF,GAAjB,OAC1B,cAAC,OAAD,CACQhE,EAPiB,GAQjBZ,MAAO6E,GACPnE,EAAGoE,GAAiCN,EAAmB,GAANI,EAAuCN,EAAYG,OACpGrC,OAAQoC,EACRnC,YAAa,EACbC,OAAO,WACPvB,KAAM6I,EAAQ,OAAS,SAPpBhF,MASX,MACJ,QACIyE,EAAU,cAAC,QAAD,CAAOzI,EAAG,EAAGF,EAAG,EAAG0D,MAAOyF,EAAkBjK,EAAMsE,MAAME,UAG1E,OAAO,cAACwD,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAWA,EAAW4B,WAAW,EAAMJ,UAjErF,WACS7I,EAAMkK,SAKQ,UAAflK,EAAMsE,MAAoBtE,EAAMkK,oBAAoBtH,IACpD5C,EAAMkK,SAASC,QAAQ,GACD,UAAfnK,EAAMsE,MAAoBtE,EAAMkK,oBAAoBtH,IAC3DwH,EAA0B,sCAEJ,UAAfpK,EAAMsE,MAAmC,UAAftE,EAAMsE,MAAoBtE,EAAMkK,oBAAoBtH,IACrF5C,EAAMkK,SAAS5F,KAAOtE,EAAMsE,KAE5B8F,EAA0B,4FAZ1BA,EAA0B,2DA+D2E7G,YA/C7G,SAAyBL,GACrB,IAAImH,EACJ,OAAQrK,EAAMsE,MACV,IAAK,QACD+F,EAAY,IAAIzH,IAAY,CAAE5B,EAAEkC,EAAUC,IAAImH,QAASxJ,EAAEoC,EAAUC,IAAIwF,QAASrE,KAAMtE,EAAMsE,KAAMI,YAAa,IAAI6F,MAAe,IAAIpJ,MAAK,KAC3I,MACJ,IAAK,QACDkJ,EAAY,IAAIzH,IAAY,CAAE5B,EAAEkC,EAAUC,IAAImH,QAASxJ,EAAEoC,EAAUC,IAAIwF,QAASzE,YAAY,EAAOI,KAAMtE,EAAMsE,OAC/G,MACJ,QACI+F,EAAY,IAAIzH,IAAgB,CAAE5B,EAAEkC,EAAUC,IAAImH,QAASxJ,EAAEoC,EAAUC,IAAIwF,QAASzE,YAAY,EAAOI,KAAMtE,EAAMsE,OAI3HtE,EAAMwK,YAAY,CACdH,UAAWA,EACXI,MAAOvH,KA+BR,SAAqIuG,IAUzI,SAASiB,EAAY1K,GAUxB,OAAO,cAACgI,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,WAAW4B,WAAW,EAAMJ,UATpF,WACQ7I,EAAMkK,oBAAoBtH,IAC1B5C,EAAMkK,SAASS,QAGfP,EAA0B,qGAI3B,SACH,cAAC,QAAD,CAAOpJ,EAAG,EAAGF,EAAG,EAAG0D,MAAOyF,EAAA,MAA2BzF,YAYtD,SAASoG,EAAgB5K,GAC5B,OAAO,eAACgI,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,eAAe4B,WAAW,EAAMJ,UAAW,kBAAM7I,EAAMQ,UAAUqK,aAAlH,UACH,cAAC,OAAD,CACMzG,OAAQ,CAAC,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAG,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,IACtG3B,YAAa,EACbC,OAAO,QACP2B,QAAQ,GAJJ,QAKV,cAAC,OAAD,CACMD,OAAU,CAAC,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,IAC1C3B,YAAa,EACbC,OAAO,OACP2B,QAAQ,EACRlD,KAAK,QALD,YASX,SAAS2J,EAAkB9K,GAC9B,OAAO,eAACgI,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,iBAAiB4B,WAAW,EAAMJ,UAAW,kBAAM7I,EAAMQ,UAAUuK,eAApH,UACH,cAAC,OAAD,CACM3G,OAAQ,CAAC,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAG,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,IACtG3B,YAAa,EACbC,OAAO,QACP2B,QAAQ,GAJJ,QAKV,cAAC,OAAD,CACMD,OAAU,CAAC,GAAI,GAAK,GAAI,GAAK,GAAI,GAAK,GAAI,IAC1C3B,YAAa,EACbC,OAAO,OACP2B,QAAQ,EACRlD,KAAK,QALD,YAgBX,SAAS6J,EAAahL,GASzB,OAAO,cAACgI,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,YAAY4B,eAA8B/B,IAAnBlH,EAAMkK,SAAwBrB,UAR7G,WACQ7I,EAAMkK,SACNlK,EAAMQ,UAAUyG,OAAOjH,EAAMkK,UAE7BE,EAA0B,gGAI3B,SACH,cAAC,OAAD,CAAM1J,KAAK,eAAYM,EAAG,GAAIF,EAAG,EAAGM,SAAU,GAAID,KAAK,YAUxD,SAAS8J,EAAejL,GAA0C,4CACrE,4BAAAkL,EAAA,yDACSC,UAAUC,UADnB,uBAEQC,MAAM,wGAFd,iCAMUC,EAAcC,OAAOC,SAASC,OAASF,OAAOC,SAASE,SAAW,IAAM1L,EAAMQ,UAAUmL,2CANlG,kBAQcR,UAAUC,UAAUQ,UAAUN,GAR5C,OASQD,MAAM,iDAAmDC,GATjE,kDAWQD,MAAM,kDAXd,2DADqE,sBAgBrE,OAAO,cAACrD,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,eAAe4B,WAAW,EAAMJ,UAhBlB,WAAD,gCAgB9D,SACH,cAAC,OAAD,CAAMnI,KAAK,eAAYM,EAAG,EAAGF,EAAG,GAAIM,SAAU,GAAID,KAAK,YAUxD,SAAS0K,EAAiB7L,GAM7B,OAAO,cAACgI,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,UAAU4B,WAAW,EAAMJ,UALnF,WACI,IAAMiD,EAAO,IAAIC,KAAK,CAACC,KAAKC,UAAUjM,EAAMQ,UAAU0L,YAAa,KAAM,IAAK,oBAAqB,CAACC,KAAM,6BAC1GC,IAAUC,OAAOP,IAGd,SACH,cAAC,OAAD,CAAMpL,KAAK,eAAYM,EAAG,EAAGF,EAAG,GAAIM,SAAU,GAAID,KAAK,YAUxD,SAASmL,EAAmBtM,GAC/B,IAAMuM,EAAW7F,SAASC,eAAe,YACzC,IAAK4F,EACD,MAAM,IAAI9I,MAAM,sDA2CpB,OAxCAxD,aAAgB,WACZ,SAASuM,IACL,GAAKD,EAASE,OAAmC,IAA1BF,EAASE,MAAM5H,OAAtC,CAKA,IAAM6H,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACZ,IACIC,EADEC,EAAuBJ,EAAOK,OAEpC,IAEIF,EAAcb,KAAKgB,MAAMF,GAE7B,MAAMG,GAEF,YADA5B,MAAM,mFAAqF4B,GAI/F,IAEIjN,EAAMQ,UAAU0M,KAAKL,GAEzB,MAAMI,GACF5B,MAAM4B,KAGdP,EAAOS,WAAWZ,EAASE,MAAM,KAKrC,OAFAF,EAASa,iBAAiB,SAAUZ,GAAiB,GAE9C,kBAAMD,EAASc,oBAAoB,SAAUb,MACrD,CAACxM,EAAMQ,UAAW+L,IAMd,cAACvE,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,UAAU4B,WAAW,EAAMJ,UAJnF,WACI0D,EAASe,SAGN,SACH,cAAC,OAAD,CAAM5M,KAAK,eAAYM,EAAG,EAAGF,EAAG,GAAIM,SAAU,GAAID,KAAK,YAWxD,SAASoM,EAAavN,GAEzB,OAAO,cAACgI,EAAD,CAAehH,EAAGhB,EAAMgB,EAAGF,EAAGd,EAAMc,EAAGuG,UAAU,YAAY4B,WAAW,EAAMJ,UAAW,kBAAM7I,EAAMQ,UAAUgN,cAA/G,SACH,cAAC,OAAD,CAAM9M,KAAK,SAAUM,EAAG,GAAIF,EAAG,GAAIM,SAAU,GAAID,KAAK,YCrc9D,SAASsM,IACL,IAKMC,EAAkC,GAAnBnC,OAAOoC,YACtBC,EAAcrC,OAAOsC,WAAW,GAChCC,EAAUF,EAAcG,KAAmF,EAAI,EAC/GC,EAA0B,GAARF,EAPK,EAQvBG,EAAa,SAACC,GAAD,OAAeR,EAAeM,EARpB,GAQ8DE,GAL9D,GAK2FJ,EAAU,EAAKK,GAAuC,IAG9K,MAAO,CACHP,YAAaA,EACbF,aAAcA,EACdM,gBAAiBA,EACjBI,iBAAkBR,EAAc/F,GAChCwG,iBAAkBJ,EAAW,GAAG,GAChCK,WARe,SAACJ,GAAD,OAVU,GAU4B,IAAwCA,GANpE,GAMiGJ,EAAU,EAAII,EAN/G,EAM0IA,IASnKD,WAAYA,GAIb,SAASM,EAAIvO,GAA+B,IAAD,EACJC,WAAeD,EAAMQ,UAAUgO,eAD3B,mBACvCA,EADuC,KACxBC,EADwB,OAEpBxO,WAAeD,EAAMQ,UAAUkO,YAFX,mBAEvCC,EAFuC,KAEhCC,EAFgC,OAGd3O,gBAAyCiH,GAH3B,mBAGvCgD,EAHuC,KAG7B2E,EAH6B,OAIV5O,gBAAyCiH,GAJ/B,mBAIvC4H,EAJuC,KAI3BC,EAJ2B,OAKM9O,WAA0C,MAACiH,OAAWA,IAL5D,yCAKtC8H,EALsC,KAKzBC,EALyB,KAKXC,EALW,OAMYjP,gBAAyCiH,GANrD,mBAMvCiI,EANuC,KAMhBC,EANgB,OAONnP,WAAewN,KAPT,mBAOvC4B,EAPuC,KAOzBC,EAPyB,OAQsBrP,YAAe,GARrC,oBAQvCsP,GARuC,MAQXC,GARW,MAUxCC,GAAyCxP,SAA0B,MA0GzE,SAASyP,GAA0BrM,GAC/BwL,EAAaxL,EAAE7B,OAGnB,SAASmO,GAAgBtM,GACrB0L,EAAc1L,EAAE7B,OAChB0N,EAAc,CAAC7L,EAAEF,IAAInC,EAAGqC,EAAEF,IAAIrC,IA8ClC,SAAS8O,GAA0BvM,GAC/B+L,EAAyB/L,EAAEgH,WAQ/B,SAASwF,GAAoBxM,IAGrBA,EAAE7B,MAAMR,GAAI,IAAqBqC,EAAE7B,MAAMV,GAAI,IAAqBuC,EAAE7B,MAAMR,EAAIqO,EAAajB,kBAAoB/K,EAAE7B,MAAMV,EAAIuO,EAAahB,mBACxIrO,EAAMQ,UAAUyG,OAAO5D,EAAE7B,OAvKjCvB,aAAgB,WACZ,SAAS6P,IACD5F,GAAYlK,EAAMQ,UAAUgO,cAAcuB,QAAQ7F,GAAY,GAC9D2E,OAAY3H,GAEhBuH,EAAiB,YAAIzO,EAAMQ,UAAUgO,gBACrCI,EAAS5O,EAAMQ,UAAUkO,YACzBK,OAAc7H,GACdkI,OAAyBlI,GAE7B,SAAS8I,IACLF,IACAN,IAA8B,GAQlC,OAJAxP,EAAMQ,UAAUyP,oBAAoBH,GACpC9P,EAAMQ,UAAU0P,sBAAsBJ,GACtC9P,EAAMQ,UAAU2P,qBAAqBH,GAE9B,WACHhQ,EAAMQ,UAAU4P,qBAAqBN,GACrC9P,EAAMQ,UAAU6P,uBAAuBP,GACvC9P,EAAMQ,UAAU8P,sBAAsBN,MAG3C,CAAChQ,EAAMQ,UAAW0J,IAGrBjK,aAAgB,WACZ,SAASsQ,IACLjB,EAAgB7B,KAChB+B,IAA8B,GAGlC,OADAjE,OAAO6B,iBAAiB,SAAUmD,GAC3B,kBAAMhF,OAAO8B,oBAAoB,SAAUkD,MACnD,IAEHtQ,aAAgB,WACZ,SAASuQ,EAAenN,GAAyB,IAAD,EACtCoN,EAA+B,UAAGhB,GAAShP,eAAZ,aAAG,EAAkBiQ,qBAC1D,IAAKD,EACD,MAAM,IAAIhN,MAAM,sBAGpB,GAAc,MAAVJ,EAAEsN,IACF3Q,EAAMQ,UAAUoJ,oBACb,GAAc,MAAVvG,EAAEsN,IACT3Q,EAAMQ,UAAUmJ,mBACb,GAAc,MAAVtG,EAAEsN,IACT3Q,EAAMQ,UAAUsJ,kBACb,GAAc,MAAVzG,EAAEsN,IAAa,CACtB,IAAMC,EAAkB,IAAIhO,IAAgB,CACxC0B,KAAM,MACNtD,EAAGyP,EAAGzP,EACNF,EAAG2P,EAAG3P,EACNoD,YAAY,IAEhBlE,EAAMQ,UAAUsG,IAAI8J,QACjB,GAAc,MAAVvN,EAAEsN,IAAa,CACtB,IAAMC,EAAkB,IAAIhO,IAAY,CACpC0B,KAAM,QACNtD,EAAGyP,EAAGzP,EACNF,EAAG2P,EAAG3P,EACNoD,YAAY,IAEhBlE,EAAMQ,UAAUsG,IAAI8J,QACjB,GAAc,MAAVvN,EAAEsN,IAAa,CACtB,IAAMC,EAAkB,IAAIhO,IAAY,CACpC0B,KAAM,QACNtD,EAAGyP,EAAGzP,EACNF,EAAG2P,EAAG3P,EACN4D,YAAa,IAAI6F,MAAe,IAAIpJ,MAAK,KAE7CnB,EAAMQ,UAAUsG,IAAI8J,OACH,MAAVvN,EAAEsN,KAAezG,EACxBA,EAASC,SAAS,GACA,MAAV9G,EAAEsN,KAAyB,MAAVtN,EAAEsN,MAAgBzG,EAG1B,MAAV7G,EAAEsN,KAAezG,EACxBlK,EAAMQ,UAAUyG,OAAOiD,GACN,MAAV7G,EAAEsN,IACT3Q,EAAMQ,UAAUgN,aACC,MAAVnK,EAAEsN,IACT3Q,EAAMQ,UAAUqK,YACC,MAAVxH,EAAEsN,KAAezG,GACxBA,EAASS,SATTT,EAASC,QAAQ,GACjB9G,EAAEwN,kBAWNC,QAAQC,MAAM,sBAAwB1N,EAAEsN,IAAM,KAGlD,GAAIlB,GAAShP,QAAS,CAClB,IAAMuQ,EAAYvB,GAAShP,QAAQuQ,YACnCA,EAAUC,SAAW,EACrBD,EAAUE,QAGd,OADA3F,OAAO6B,iBAAiB,WAAYoD,GAC7B,kBAAMjF,OAAO8B,oBAAoB,WAAYmD,MACrD,CAACxQ,EAAMQ,UAAW0J,IAuErB,IAAIiH,GAA4C,GAmBhD,OAjBI5B,KACAvP,EAAMQ,UAAU4Q,UAAU/B,EAAazB,YAAayB,EAAapB,WAAW,GAAI,GAAI,IACpFuB,IAA8B,IAG9BV,IACAqC,GAAU,cAAC,QAAD,CACNnQ,EAAG8N,EAAW9N,EAAE,GAChBF,EAAGgO,EAAWhO,EAAE,GAChBsD,OAAQ,CAAC,EAAE,EAAG4K,GAAcF,EAAW9N,EAAE,IAAKiO,GAAcH,EAAWhO,EAAE,KACzEK,KAAK,YACLuB,OAAO,YACPD,YAAa,EACb2D,cAAe,GACfC,aAAc,MAIlB,eAAC,QAAD,CACIjG,MAAOiP,EAAazB,YAAY,EAChCpL,OAAQ6M,EAAa3B,aACrBxM,IAAKuO,GACLrM,UApFR,SAA8BC,GAE1B,GAAIyL,EAAY,CACZ,IADY,EACRhL,OAASoD,EADD,cAEIsH,GAFJ,IAEZ,2BAA+B,CAAC,IAArB6C,EAAoB,QAE3B,GAAIA,EAAErQ,GAAKqC,EAAEF,IAAImH,SAAWjH,EAAEF,IAAImH,QAAU+G,EAAErQ,EAAE,IAC5CqQ,EAAEvQ,GAAKuC,EAAEF,IAAIwF,SAAWtF,EAAEF,IAAIwF,QAAU0I,EAAEvQ,EAAE,GAAI,CAC/CgD,EAASuN,EACT,QAPG,8BAWRvN,GAAUA,IAAWgL,GAAchL,EAAOwN,SAASxC,KACnDF,EAAS5O,EAAMQ,UAAUkO,YACzBK,OAAc7H,GACdkI,OAAyBlI,SAGxBiI,GAAyBA,EAAsBrO,EAAIuO,EAAahB,kBACrErO,EAAMQ,UAAUsG,IAAIqI,GAGxBJ,OAAc7H,GACdkI,OAAyBlI,IA6DrBqK,YA1DR,SAAyBlO,GAEjByL,EACAI,EAAc,CAAC7L,EAAEF,IAAImH,QAASjH,EAAEF,IAAIwF,UAE/BwG,GACLA,EAAsB1N,YAAY4B,EAAEF,IAAImH,QAASjH,EAAEF,IAAIwF,UAqDvDD,aAvCR,WACIqG,OAAc7H,GACdkI,OAAyBlI,IA+BzB,UAQI,eAAC,QAAD,WACI,cAAC,OAAD,CAAMsK,GAAG,aACHxQ,EAAG,EAAGF,EAAG,EACTV,MAAOiP,EAAazB,YACpBpL,OAAQ6M,EAAa3B,aAAe2B,EAAarB,gBACjDpF,YAxDlB,SAAyBvF,GACfA,EAAES,kBAAkBmG,IAA2BC,GACjD2E,OAAY3H,IAuDFzE,YAAa,EACbtB,KAAK,eACX,cAAC,EAAD,CAAgBX,UAAWR,EAAMQ,UAAWS,MAAOoO,EAAazB,YAAc,GAAI7M,IAAK,IACtFyN,EAAc1J,KAAI,SAACtD,GAAD,OACf,cAAC,EAAD,CACAA,MAAOA,EAEPmB,WAAYnB,IAAU0I,EACtBvG,YAAagM,GACb1M,QAASyM,GACTzL,gBAAiB4L,IAJZrO,EAAMgQ,GAAG7Q,eAOjBwO,EACK,cAAC,EAAD,CAAwB3N,MAAO2N,EAAiExM,YAAY,GAAjDwM,EAAsBqC,GAAG7Q,YACpF,GACLwQ,GACAxC,EAAM7J,KAAI,SAAC2M,GAAD,OAA6B,cAAC,EAAD,CAAsFrM,OAAQqM,EAAKrM,OAAQtB,OAAQ2N,EAAK3N,QAA9F2N,EAAKrM,OAAOoM,GAAG7Q,WAAY,IAAM8Q,EAAK3N,OAAO0N,GAAG7Q,kBAEtH,eAAC,QAAD,WACI,cAAC,OAAD,CAAMK,EAAG,EAAGF,EAAGuO,EAAa3B,aAAa2B,EAAarB,gBAAiBxL,OAAQ6M,EAAarB,gBAAiB5N,MAAOiP,EAAazB,YAAazM,KAAK,eACnJ,cAAC,OAAD,CAAMiD,OAAQ,CAAC,EAAGiL,EAAa3B,aAAa2B,EAAarB,gBAAiBqB,EAAazB,YAAayB,EAAa3B,aAAa2B,EAAarB,iBAAkBtL,OAAO,OAAOD,YAAa,IACxL,cAACsH,EAAD,CAAiB/I,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAI/D,SAAUA,EAAU5F,KAAK,MAAMkG,YAAaoF,KAC3H,cAAC7F,EAAD,CAAiB/I,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAI/D,SAAUA,EAAU5F,KAAK,KAAKkG,YAAaoF,KAC1H,cAAC7F,EAAD,CAAiB/I,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAI/D,SAAUA,EAAU5F,KAAK,MAAMkG,YAAaoF,KAC3H,cAAC7F,EAAD,CAAiB/I,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAI/D,SAAUA,EAAU5F,KAAK,OAAOkG,YAAaoF,KAC5H,cAAC7F,EAAD,CAAiB/I,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAI/D,SAAUA,EAAU5F,KAAK,MAAMkG,YAAaoF,KAC3H,cAAC7F,EAAD,CAAiB/I,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAI/D,SAAUA,EAAU5F,KAAK,OAAOkG,YAAaoF,KAC5H,cAAC7F,EAAD,CAAiB/I,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAI/D,SAAUA,EAAU5F,KAAK,QAAQkG,YAAaoF,KAC7H,cAAC7F,EAAD,CAAiB/I,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAI/D,SAAUA,EAAU5F,KAAK,QAAQkG,YAAaoF,KAC7H,cAAC5E,EAAD,CAAchK,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAIzN,UAAWR,EAAMQ,UAAW0J,SAAUA,IAClH,cAACV,EAAD,CAAiBxI,EAAGqO,EAAaf,WAAW,GAAIxN,EAAGuO,EAAapB,WAAW,GAAIzM,MAAOxB,EAAMQ,YAC5F,cAACqJ,EAAD,CAAkB7I,EAAGqO,EAAaf,WAAW,IAAKxN,EAAGuO,EAAapB,WAAW,IAAKzM,MAAOxB,EAAMQ,YAC/F,cAAC+M,EAAD,CAAcvM,EAAGqO,EAAaf,WAAW,IAAKxN,EAAGuO,EAAapB,WAAW,IAAKzN,UAAWR,EAAMQ,YAC/F,cAACkK,EAAD,CAAa1J,EAAGqO,EAAaf,WAAW,IAAKxN,EAAGuO,EAAapB,WAAW,IAAK/D,SAAUA,IACvF,cAACU,EAAD,CAAiB5J,EAAGqO,EAAaf,WAAW,IAAKxN,EAAGuO,EAAapB,WAAW,IAAKzN,UAAWR,EAAMQ,YAClG,cAACsK,EAAD,CAAmB9J,EAAGqO,EAAaf,WAAW,IAAKxN,EAAGuO,EAAapB,WAAW,IAAKzN,UAAWR,EAAMQ,YACpG,cAACyK,EAAD,CAAgBjK,EAAGqO,EAAaf,WAAW,IAAKxN,EAAGuO,EAAapB,WAAW,IAAKzN,UAAWR,EAAMQ,YACjG,cAAC8L,EAAD,CAAoBtL,EAAGqO,EAAaf,WAAW,IAAKxN,EAAGuO,EAAapB,WAAW,IAAKzN,UAAWR,EAAMQ,YACrG,cAACqL,EAAD,CAAkB7K,EAAGqO,EAAaf,WAAW,IAAKxN,EAAGuO,EAAapB,WAAW,IAAKzN,UAAWR,EAAMQ,kBCpTnH,IAYekR,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLdb,QAAQC,MAAM,YFyTP,WAEH,IAAMoB,EAAkC5G,OAAOC,SAAS4G,OACpDC,OAAkCnL,EACtC,GAAIiL,EACA,IAEIE,EAAaC,IAAUC,8BAA8BJ,GAEzD,SACI9G,MAAM,kGHlDX,SAAoBmH,GAEvB,IADH,IAAD,aACS,IAAMlO,EAAI,KAEXmO,IAAMC,MAAMC,QAAQ,oCAAsCrO,EAAO,cAAc,SAACsO,GAC5EvR,EAAQiD,GAAQsO,EACoB,IAAhCC,OAAOC,KAAKzR,GAASwD,QACrB2N,QALZ,MAAmB,CAAC,MAAO,KAAM,MAAO,OAAQ,MAAO,OAAQ,SAA/D,eAA0E,IGoD1EvI,EAAqB,WACjB,IAAIzJ,EACJ,IACIA,EAAY,IAAI8R,IAAUD,GAE9B,MAAOpF,GACH5B,MAAM4B,GACNzM,EAAY,IAAI8R,IAEpBS,iBAAO,cAACxE,EAAD,CAAK/N,UAAWA,IAAekG,SAASC,eAAe,YE/UtEqM,GAKAtB,K,kIC0BaY,EAAb,WASI,WAAYD,GAAmC,yBARvCY,wBAQsC,OAPtCC,oBAOsC,OAN7BC,aAM6B,OAJvCjT,iBAIuC,OAHvCiJ,eAGuC,OAFvCqF,mBAEuC,EAC1CzG,KAAKoL,QAAU,IAAIC,eACnBrL,KAAK7H,YAAc,EACnB6H,KAAKoB,WAAY,EACjBpB,KAAKkL,wBAAqB/L,EAC1Ba,KAAKmL,eAAiB,IACtBnL,KAAKyG,cAAgB,QACFtH,IAAfmL,GAA2C,OAAfA,GAC5BtK,KAAKmF,KAAKmF,GAjBtB,wDAqB8C,IAAD,OAMrC,OAAOtK,KAAKyG,cAAc1J,KAAI,SAAAuM,GAAC,OAL/B,SAAmCgC,EAA4BC,GAC3D,IAAMjB,EAAsCgB,EAAaE,SAEzD,OADAlB,EAAWmB,OAASH,EAAaG,OAAO1O,KAAI,SAAAuM,GAAC,OAAIiC,EAAiBvD,QAAQsB,MACnEgB,EAEwBoB,CAA0BpC,EAAG,EAAK7C,oBA3B7E,2BA8BgB6D,GACR,IAAK9H,MAAMmJ,QAAQrB,GACf,MAAM,IAAI5O,MAAM,mDAKpB,IADA,IAAM+K,EAAqC6D,EAAWvN,KAAI,SAAAuM,GAAC,OAAI/P,IAAaqS,uBAAuBtC,MAC1FA,EAAI,EAAGA,EAAI7C,EAAc3J,SAAUwM,EAAG,CAC3C,IAAMuC,EAAiCvB,EAAWhB,GAC5CwC,EAAyCrF,EAAc6C,GAE7D,GAAuC,kBAA5BuC,GAAmE,OAA3BA,EAC/C,MAAM,IAAInQ,MAAM,8DAGpB,IAAKqQ,YAAeF,EAAwB,UACxC,MAAM,IAAInQ,MAAM,6CAGpB,IAAK8G,MAAMmJ,QAAQE,EAAuBJ,QACtC,MAAM,IAAI/P,MAAM,6DAbuB,oBAgBRmQ,EAAuBJ,QAhBf,IAgB3C,2BAAkE,CAAC,IAAxDO,EAAuD,QAC9D,GAAqC,kBAA1BA,EACP,MAAM,IAAItQ,MAAM,sCAGpB,GAAIsQ,EAAuB,GAAKA,GAAwBvF,EAAc3J,OAClE,MAAM,IAAIpB,MAAM,8CAGpBoQ,EAAyBvC,SAAS9C,EAAcuF,KAzBT,+BA6B/C,IAAMC,EAAmBjM,KAAKyG,cAC9BzG,KAAKyG,cAAgBA,EACrBzG,KAAKkM,wBAAyB,CAAEzT,UAAWuH,KAAMiM,iBAAkBA,IAEnEjM,KAAK4B,gBAtEb,gCAyEqBvJ,EAAeoC,EAAgB0R,EAAcC,GAC1D,IAAIpM,KAAKyG,cAAc4F,OAAM,SAAA/C,GAAC,OAAIA,EAAErQ,GAAK,GAAKqQ,EAAErQ,EAAIZ,EAAM,IAAMiR,EAAEvQ,GAAK,GAAKuQ,EAAEvQ,EAAI0B,EAAO,MAAzF,CAKA,IAN8E,EAMxE6R,EAAetM,KAAKyG,cAAc8F,QAAO,SAACC,EAAeC,GAAhB,OAAiC1O,KAAK2O,IAAIF,EAAeC,EAAaxT,KAAI,GACnH0T,EAAe3M,KAAKyG,cAAc8F,QAAO,SAACC,EAAeC,GAAhB,OAAiC1O,KAAK2O,IAAIF,EAAeC,EAAa1T,KAAI,GACnH6T,EAAe5M,KAAKyG,cAAc8F,QAAO,SAACC,EAAeC,GAAhB,OAAiC1O,KAAK8O,IAAIL,EAAeC,EAAaxT,KAAI,QACnH6T,EAAe9M,KAAKyG,cAAc8F,QAAO,SAACC,EAAeC,GAAhB,OAAiC1O,KAAK8O,IAAIL,EAAeC,EAAa1T,KAAI,QAT3C,cAW9DiH,KAAKyG,eAXyD,IAW9E,2BAAoC,CAAC,IAA1B6C,EAAyB,QAC1ByD,EAAOZ,GAAQ7C,EAAErQ,EAAI2T,IAASvU,EAAQ,EAAE8T,EAAO,IAAMG,EACrDU,EAAOZ,GAAQ9C,EAAEvQ,EAAI+T,IAASrS,EAAS,EAAE2R,EAAO,IAAMO,EAC5DrD,EAAE5P,YAAYqT,EAAMC,IAdsD,kCAzEtF,mCA2F+B,IAAD,gBACNhN,KAAKyG,eADC,IACtB,2BAAoC,SAC9BwG,UAFgB,8BAKtBjN,KAAK7H,YAAc,EACnB6H,KAAKkN,cAjGb,kCAoG8B,IAAD,gBACLlN,KAAKyG,eADA,IACrB,2BAAoC,SAC9B3D,aAFe,iCApG7B,oCA0GgC,IAAD,gBACP9C,KAAKyG,eADE,IACvB,2BAAoC,SAC9B7D,SAFiB,iCA1G/B,iEAiHQ,IAAMuK,EAAyBlJ,KAAKC,UAAUlE,KAAKmE,aAC7CiJ,EAAyBC,IAAKC,QAAQH,GACtCI,EAAyBC,EAAOC,KAAKL,GAAYxU,SAAS,UAChE,OAAO8U,mBAAmBH,KApHlC,qCAgIYvN,KAAKoB,YAITpB,KAAKoB,WAAY,EACjBpB,KAAKkL,mBAAqBjM,WAAWe,KAAK2N,mBAAmBC,KAAK5N,MAAOA,KAAKmL,gBAE9EnL,KAAKoL,QAAQyC,KAAK,kBAAmB,CAAEpV,UAAWuH,KAAM8N,YAAa9N,KAAKoB,eAvIlF,oCA2IapB,KAAKoB,YAIVpB,KAAKoB,WAAY,EACbpB,KAAKkL,oBACLlM,aAAagB,KAAKkL,oBAGtBlL,KAAKkL,wBAAqB/L,EAE1Ba,KAAKoL,QAAQyC,KAAK,kBAAmB,CAAEpV,UAAWuH,KAAM8N,YAAa9N,KAAKoB,eAtJlF,mCA0JYpB,KAAKoB,WAITpB,KAAK+N,gBA9Jb,0BAiKezC,GACPtL,KAAKyG,cAAcjM,KAAK8Q,GACxBtL,KAAKoL,QAAQyC,KAAKG,EAAWC,kBAAmB,CAAExV,UAAWuH,KAAMsL,aAAcA,MAnKzF,6BAsKkBA,GAEV,IADA,IAAI4C,GAAY,EACP5E,EAAItJ,KAAKyG,cAAc3J,OAAO,EAAGwM,GAAK,IAAKA,EAC5CtJ,KAAKyG,cAAc6C,KAAOgC,IAC1B4C,GAAY,EACZlO,KAAKyG,cAAc0H,OAAO7E,EAAG,IALU,oBAQ/BtJ,KAAKyG,eAR0B,IAQ/C,2BAAoC,SAC9B2H,YAAY9C,IAT6B,8BAiB/C,OALI4C,GAEAlO,KAAKoL,QAAQyC,KAAKG,EAAWK,oBAAqB,CAAE5V,UAAWuH,KAAMsL,aAAcA,IAGhF4C,IAvLf,iCA2LQ,OAAOlO,KAAKyG,cACP1J,KAAI,SAAAhB,GAAM,OAAIA,EAAO0P,OACjB1O,KAAI,SAASM,GAAS,MAAO,CAACA,OAAQA,EAAQtB,OAAQA,SAC1DwQ,QAAO,SAACpJ,EAAEmL,GAAH,OAASnL,EAAEoL,OAAOD,KAAI,MA9L1C,sCAkMUtO,KAAK7H,YACP6H,KAAKkN,YAFmB,oBAIRlN,KAAKyG,eAJG,IAIxB,2BAAoC,SAC9B+H,SALkB,kDAORxO,KAAKyG,eAPG,IAOxB,2BAAoC,SAC9BgI,aARkB,iCAjMhC,6BA6MkBC,GACV1O,KAAKoL,QAAQuD,GAAGX,EAAWY,KAAMF,KA9MzC,8BAiNmBA,GACX1O,KAAKoL,QAAQyD,IAAIb,EAAWY,KAAMF,KAlN1C,kCAsNQ1O,KAAKoL,QAAQyC,KAAKG,EAAWY,KAAM,CAAEnW,UAAWuH,KAAM4O,KAAM5O,KAAK7H,gBAtNzE,0CAyN+BuW,GACvB1O,KAAKoL,QAAQuD,GAAGX,EAAWC,kBAAmBS,KA1NtD,2CA6NgCA,GACxB1O,KAAKoL,QAAQyD,IAAIb,EAAWC,kBAAmBS,KA9NvD,4CAiOiCA,GACzB1O,KAAKoL,QAAQuD,GAAGX,EAAWK,oBAAqBK,KAlOxD,6CAqOkCA,GAC1B1O,KAAKoL,QAAQyD,IAAIb,EAAWK,oBAAqBK,KAtOzD,wCAyO6BA,GACrB1O,KAAKoL,QAAQuD,GAAG,kBAAmBD,KA1O3C,yCA6O8BA,GACtB1O,KAAKoL,QAAQyD,IAAI,kBAAmBH,KA9O5C,2CAiPgCA,GACxB1O,KAAKoL,QAAQuD,GAAG,qBAAsBD,KAlP9C,4CAqPiCA,GACzB1O,KAAKoL,QAAQyD,IAAI,qBAAsBH,KAtP/C,8CAyPoCvT,GAE5B6E,KAAKoL,QAAQyC,KAAK,qBAAsB1S,KA3PhD,2CA+PQ6E,KAAK+N,cACL/N,KAAKkL,mBAAqBjM,WAAWe,KAAK2N,mBAAmBC,KAAK5N,MAAOA,KAAKmL,mBAhQtF,qDAuHgDf,GACxC,IAAM0E,EAAiBC,mBAAmB3E,GACpC4E,EAA6BxB,EAAOC,KAAKqB,EAAQ,UAEjDG,EAA2B5B,IAAK6B,QAAQF,EAAgB,CAAEG,GAAI,WACpE,OAAOlL,KAAKgB,MAAMgK,OA5H1B,KAoQMjB,EAAa,CAGfY,KAAM,OAGNX,kBAAmB,oBAGnBI,oBAAqB,yB,qWC9SlB,SAAStC,EACbqD,EAAQC,GAIP,OAAOD,EAAIrD,eAAesD,GAoB9B,SAASC,EAAwBhF,EAAoC/N,GACjE,IAAKwP,EAAezB,EAAY,MAAiC,kBAAlBA,EAAWrR,EACtD,MAAM,IAAIyC,MAAM,+CAGpB,IAAKqQ,EAAezB,EAAY,MAAiC,kBAAlBA,EAAWvR,EACtD,MAAM,IAAI2C,MAAM,+CAGpB,MAAO,CACHa,KAAMA,EACNtD,EAAGqR,EAAWrR,EACdF,EAAGuR,EAAWvR,EACd0S,OAAQ,IAIT,IAAMlS,EAAb,WAaI,WAAYtB,GAAiD,yBAZrDsX,QAYoD,OAXpDC,QAWoD,OAV3CC,YAU2C,OATpDC,aASoD,OAPpDC,gBAOoD,OANpDC,mBAMoD,OAJ5CnG,QAI4C,EACxDzJ,KAAKyP,OAAS,IAAIpE,eAClBrL,KAAK2P,YAAa,EAClB3P,KAAK4P,eAAgB,EACrB5P,KAAK0P,QAAU,GACf1P,KAAKuP,GAAKtX,EAAMgB,EAChB+G,KAAKwP,GAAKvX,EAAMc,EAEhBiH,KAAKyJ,KAAOlQ,EAAasW,UArBjC,0DAsDQ,MAAO,CAAE5W,EAAG+G,KAAKuP,GAAIxW,EAAGiH,KAAKwP,MAtDrC,kCA4DuBvW,EAAWF,GAC1BiH,KAAKuP,GAAKtW,EACV+G,KAAKwP,GAAKzW,EACViH,KAAK8P,WAAW7W,EAAGF,KA/D3B,sCAoE8BgX,GAClB/P,KAAK4P,gBAAkBG,IACvB/P,KAAK4P,cAAgBG,EACrB/P,KAAKgQ,uBAvEjB,mCA4E2BD,GACf/P,KAAK2P,aAAeI,IACpB/P,KAAK2P,WAAaI,EAClB/P,KAAKgQ,uBA/EjB,+BAoFQ,MAAO,CACH/W,EAAG+G,KAAKuP,GACRxW,EAAGiH,KAAKwP,GACRjT,KAAM,QACNkP,OAAQ,MAxFpB,+BA4FawE,GACL,GAAwB,IAApBjQ,KAAKkQ,WAEL,OAAO,EAGX,IAAMC,EAAwBnQ,KAAKyL,OAAOzD,QAAQiI,GAClD,GAAIE,GAAiB,EAEjBnQ,KAAK0P,QAAQvB,OAAOgC,EAAe,OAChC,CAEH,IAAMC,EAAwBH,EAASxE,OAAOzD,QAAQhI,MAClDoQ,GAAiB,IACjBH,EAASP,QAAQvB,OAAOiC,EAAe,GACvCH,EAASxB,aAIW,IAApBzO,KAAKkQ,aACLlQ,KAAK0P,QAAU,IAInB1P,KAAK0P,QAAQlV,KAAKyV,GAMtB,OAHAjQ,KAAKyO,YACLzO,KAAK4C,QACLqN,EAASrN,SACF,IA1Hf,kCA6HgByN,GACR,IAAMpT,EAAgB+C,KAAKyL,OAAOzD,QAAQqI,GAC1C,QAAIpT,EAAQ,KAGR+C,KAAK0P,QAAQvB,OAAOlR,EAAO,GAC3B+C,KAAKyO,YACLzO,KAAK4C,SACE,KArInB,gCA6Ic6I,GACNzL,KAAK0P,QAAL,YAAmBjE,KA9I3B,8BAkJY6E,MAlJZ,8BAwJQtQ,KAAKuQ,aAAavQ,KAAKrG,gBAxJ/B,2KAoKmB+U,GACX1O,KAAKyP,OAAOd,GAAG,QAASD,KArKhC,+BAwKoBA,GACZ1O,KAAKyP,OAAOZ,IAAI,QAASH,KAzKjC,qCA4K0BA,GAClB1O,KAAKyP,OAAOd,GAAG,eAAgBD,KA7KvC,sCAgL2BA,GACnB1O,KAAKyP,OAAOZ,IAAI,eAAgBH,KAjLxC,iCAwLyBzV,EAAWF,GAC5BiH,KAAKyP,OAAO5B,KAAK,QAAS,CAAExQ,OAAQ2C,KAAM/G,IAAGF,QAzLrD,0CA6LQiH,KAAKyP,OAAO5B,KAAK,eAAgB,CAAExQ,OAAQ2C,SA7LnD,wBAyD6B,OAAOA,KAAKuP,KAzDzC,wBA0D6B,OAAOvP,KAAKwP,KA1DzC,mCAkEyC,OAAOxP,KAAK4P,gBAlErD,gCA2EsC,OAAO5P,KAAK2P,aA3ElD,6BA0IQ,OAAO,YAAI3P,KAAK0P,WA1IxB,iCAqLQ,MAAO,eArLf,8CAwByCpF,GACjC,GAA2B,kBAAhBA,GAA2C,OAAfA,EACnC,MAAM,IAAI5O,MAAM,8DAGpB,IAAKqQ,EAAezB,EAAY,QAC5B,MAAM,IAAI5O,MAAM,6CAGpB,OAAQ4O,EAAW/N,MACf,IAAK,QACL,IAAK,WACL,IAAK,YACD,OAAO,IAAIvB,EAgT3B,SAAmCsP,EAAoC/N,GACnE,OAAOiU,EAAiDlG,EAAY,QAAkB,aAAT/N,GAjThDkU,CAA0BnG,EAAYA,EAAW/N,OACtE,IAAK,QACL,IAAK,UACG,OAAO,IAAItB,EAuU/B,SAAmCqP,GAC/B,IAAIoG,EACA3E,EAAezB,EAAY,iBAC3BoG,EAAiBpG,EAAW3N,aAG5BoP,EAAezB,EAAY,sBAC3BoG,EAAiBpG,EAAWqG,kBAGhC,QAAuBxR,IAAnBuR,IAAiClO,MAAMmJ,QAAQ+E,KAAoBA,EAAerE,OAAM,SAAA/C,GAAC,MAAkB,mBAAPA,KACpG,MAAM,IAAI5N,MAAM,uEAGpB,OAAO,2BACA4T,EAAwBhF,EAAY,UAD3C,IAEI3N,YAAa+T,IAvVgBE,CAA0BtG,IACnD,IAAK,MACL,IAAK,KACL,IAAK,MACL,IAAK,OACL,IAAK,MACL,IAAK,OACD,OAAO,IAAIvP,EA8M3B,SAA8BuP,EAAoC/N,GAC9D,OAAOiU,EAAiDlG,EAAY/N,GAAM,GA/MzCsU,CAAqBvG,EAAYA,EAAW/N,OACrE,QACI,MAAM,IAAIb,MAAM,oCAAsC4O,EAAW/N,WAjDjF,KAqMA,SAASiU,EAAiDlG,EAAoC/N,EAAgCuU,GAC1H,IAAI3U,EAAsB2U,EAE1B,GAAI/E,EAAezB,EAAY,cAAe,CAC1C,GAAsC,mBAA3BA,EAAWnO,WAClB,MAAM,IAAIT,MAAM,0BAA4Ba,EAAO,yDAEvDJ,EAAamO,EAAWnO,WAG5B,OAAO,2BACAmT,EAAwBhF,EAAY/N,IAD3C,IAEIJ,WAAYA,IAjNP5C,EAWFsW,UAAY,EA2MhB,IAAMkB,EAAb,kDAGI,WAAY9Y,GAAwE,IAAD,8BAC/E,cAAMA,IAHF+Y,iBAE2E,EAG/E,EAAKA,YAAc/Y,EAAMkE,WAHsD,EAHvF,qDAUQ,OAAO,+FAEHA,WAAY6D,KAAKgR,gBAZ7B,8BAqBYhR,KAAKgR,cAAgBhR,KAAKrG,eAC1BqG,KAAKgR,YAAchR,KAAKrG,aACxB,6EAvBZ,+BA4BQqG,KAAKiR,gBAAgBjR,KAAK7D,YAC1B6D,KAAKuQ,cAAa,KA7B1B,iCAiBQ,OAAOvQ,KAAKgR,gBAjBpB,GAAyDzX,GAmCnD2X,EAA+C,CAAC,MAAO,KAAM,MAAO,OAAQ,MAAO,QAQlF,IAAMnW,EAAb,kDAGI,WAAY9C,GAA8C,IAAD,EAErD,GAFqD,qBACrD,cAAMA,IAHFkZ,WAEiD,EAElC,UAAflZ,EAAMsE,MAAmC,UAAftE,EAAMsE,KAChC,MAAM,IAAIb,MAAM,8BAHiC,OAMrD,EAAKyV,MAAQlZ,EAAMsE,KANkC,EAH7D,oDAsBmB6U,GACX,IAAInU,EAAQiU,EAAsBlJ,QAAQhI,KAAKmR,QAC/ClU,GAAgBmU,GACJ,EACRnU,GAASiU,EAAsBpU,OAE1BG,GAASiU,EAAsBpU,SACpCG,GAASiU,EAAsBpU,QAGnCkD,KAAKzD,KAAO2U,EAAsBjU,GAClC+C,KAAKyO,YACLzO,KAAK4C,UAlCb,kCAuCQ,IACIyO,EADEC,EAAqBtR,KAAKyL,OAAOc,QAAO,SAACpJ,EAAGmL,GAAJ,OAAUnL,GAAKmL,EAAEhR,UAAY,EAAI,KAAI,GAEnF,OAAO0C,KAAKzD,MACR,IAAK,MACD8U,EAAkBrR,KAAKyL,OAAO3O,OAAS,GAAKwU,IAAuBtR,KAAKyL,OAAO3O,OAC/E,MACJ,IAAK,KACDuU,EAAkBrR,KAAKyL,OAAO3O,OAAS,GAAKwU,EAAqB,EACjE,MACJ,IAAK,MACDD,EAAkBC,EAAqB,IAAM,EAC7C,MACJ,IAAK,OACDD,EAAkBrR,KAAKyL,OAAO3O,OAAS,GAAKwU,IAAuBtR,KAAKyL,OAAO3O,OAC/E,MACJ,IAAK,MACDuU,EAAkBrR,KAAKyL,OAAO3O,OAAS,GAA4B,IAAvBwU,EAC5C,MACJ,IAAK,OACDD,EAAkBrR,KAAKyL,OAAO3O,OAAS,GAAKwU,EAAqB,IAAM,EAG/EtR,KAAKiR,gBAAgBI,KA7D7B,kCAiEQrR,KAAKiR,gBAAgBjR,KAAKyL,OAAO3O,OAAS,IAAoB,SAAdkD,KAAKzD,MAAiC,QAAdyD,KAAKzD,MAAgC,SAAdyD,KAAKzD,OACpGyD,KAAKuQ,cAAa,GAClBvQ,KAAK4C,UAnEb,+BA2EQ,OAAO,+FAEHrG,KAAMyD,KAAKmR,UA7EvB,2BAaQ,OAAOnR,KAAKmR,OAbpB,aAgBoBpB,GACZ/P,KAAKmR,MAAQpB,EACb/P,KAAKgQ,oBACLhQ,KAAK4C,UAnBb,iCAuEQ,MAAO,gBAvEf,GAA+BmO,GAyFxB,IAAM/V,EAAb,sKAEYsV,GACJtQ,KAAKiR,iBAAiBjR,KAAKrG,gBAHnC,kCAWQqG,KAAKiR,iBAAgB,GACrBjR,KAAKuQ,cAAa,GAClBvQ,KAAK4C,UAbb,iCAOQ,OAAO,MAPf,GAA2BmO,GAyCpB,IAAM9V,EAAb,kDAGI,WAAmBqP,GAA+C,IAAD,8BAC7D,cAAMA,IAHOiH,kBAEgD,EAE7D,EAAKA,aAAL,YAAyBjH,EAAW3N,aAFyB,EAHrE,qDAaQ,OAAO,+FAEHJ,KAAM,QACNI,YAAaqD,KAAKuR,iBAhB9B,kCAqBQvR,KAAKiR,gBAAgBjR,KAAKuR,aAAavR,KAAKuR,aAAazU,OAAO,IAChEkD,KAAKuR,aAAa,GAAKvR,KAAKyL,OAAO3O,OAAS,GAAKkD,KAAKyL,OAAO,GAAGnO,YAtBxE,8BA0BQ0C,KAAKuQ,aAAavQ,KAAKrG,cAEvB,IAAK,IAAI2P,EAAI,EAAGA,EAAItJ,KAAKuR,aAAazU,OAAO,IAAKwM,EAC9CtJ,KAAKuR,aAAavR,KAAKuR,aAAazU,OAAO,EAAEwM,GAAKtJ,KAAKuR,aAAavR,KAAKuR,aAAazU,OAAO,EAAEwM,GAEnGtJ,KAAKiR,gBAAgBjR,KAAKuR,aAAavR,KAAKuR,aAAazU,WA/BjE,kCASQ,OAAO,YAAIkD,KAAKuR,gBATxB,iCAqCQ,OAAO,MArCf,GAA2BhY,K","file":"static/js/main.1312a514.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Simulator } from \"./Simulator\";\r\nimport { Text } from 'react-konva';\r\nimport Konva from 'konva';\r\n\r\nexport interface TickCounterProps {\r\n    simulator: Simulator;\r\n    right: number;\r\n    top: number;\r\n}\r\n\r\n/**\r\n * Implements the tick counter, the trickiest bit being that it wants to render it in the top-right.\r\n * This isn't done in a very react-like way because we need to set the 'x' position relative to the\r\n * width of the text, and we don't know the width of the text until the DOM renders it.  What we really\r\n * want, in any case, is a text element that's right-aligned, and that's just not in Konva as far as I\r\n * can see.  Probably because Konva can do it easily enough.  See the code in @see _handleTick.\r\n */\r\nexport function TickCounter(props: TickCounterProps): JSX.Element {\r\n    const [currentTick, setCurrentTick] = React.useState(0);\r\n    const [width, setWidth] = React.useState(20);;\r\n    const textRef: React.RefObject<Konva.Text> = React.useRef<Konva.Text>(null);\r\n\r\n    // Set up the tick listener\r\n    React.useEffect(() => {\r\n        function handleTick() {\r\n            setCurrentTick(props.simulator.currentTick);\r\n\r\n            if (textRef.current === null) {\r\n                // Shouldn't happen\r\n                return;\r\n            }\r\n    \r\n            // Somehow, setting the text changes width(), but somehow actually\r\n            // doesn't change the screen.  (That is, without setting the text\r\n            // in the render, it has no effect).\r\n            textRef.current.text(props.simulator.currentTick.toString());\r\n            setWidth(textRef.current.width());\r\n        }\r\n    \r\n        props.simulator.onTick(handleTick);\r\n        handleTick();\r\n\r\n        return () => {props.simulator.offTick(handleTick);}\r\n    }, [props.simulator]);\r\n\r\n    return (\r\n        <Text y={props.top}\r\n              x={props.right - width}\r\n              ref={textRef}\r\n              fill='red'\r\n              text={currentTick.toString()}\r\n              fontSize={30}/>\r\n    );\r\n}","import Konva from 'konva';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Image, Group, Rect, Circle, Line, Arrow} from 'react-konva';\r\nimport * as Model from './Model';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const _assets: any = {};\r\n\r\nexport interface IEventArgsInteractable {\r\n    model: Model.Interactable;\r\n    evt: MouseEvent;\r\n}\r\n\r\ninterface IInteractableProps {\r\n    model: Model.Interactable;\r\n    onClick?: (eventArgs: IEventArgsInteractable) => void;\r\n    onLinkStart?: (eventArgs: IEventArgsInteractable) => void;\r\n    onMouseUp?: (eventArgs: IEventArgsInteractable) => void;\r\n    onMoveCompleted?: (eventArgs: IEventArgsInteractable) => void;\r\n    key: string;\r\n    isSelected: boolean;\r\n}\r\n\r\nexport function Interactable(props: IInteractableProps): JSX.Element {\r\n    const [[x,y], setPosition] = useState([props.model.x, props.model.y]);\r\n    const [isOn, setIsOn] = useState(props.model.currentState);\r\n    const groupRef: React.RefObject<Konva.Group> = React.useRef<Konva.Group>(null);\r\n\r\n    function handleOnMouseUp(e: KonvaEventObject<MouseEvent>): void {\r\n        if (props.onMouseUp) {\r\n            props.onMouseUp({\r\n                evt: e.evt,\r\n                model: props.model\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleDragStart(e: KonvaEventObject<MouseEvent>): void {\r\n        // The gesture for dragging is left mouse button, and there seems no way to\r\n        // argue with Konva about it, except this.  We want to use left-mouse-button\r\n        // dragging to move a pointer, so if we see the shift key is not down, we\r\n        // cancel the drag and tell our parent about the link-start event.  We can't\r\n        // help anymore from here, as we don't get useful events.\r\n        if (!e.evt.shiftKey) {\r\n            if (!groupRef.current) {\r\n                throw new Error('group did not get set in render');\r\n            }\r\n\r\n            groupRef.current.stopDrag();\r\n\r\n            if (props.onLinkStart) {\r\n                props.onLinkStart({\r\n                    evt: e.evt,\r\n                    model: props.model\r\n                });\r\n            }\r\n        }\r\n        // Else it's a real drag event, let that go.\r\n    }\r\n\r\n    function handleDragMove(e: KonvaEventObject<MouseEvent>): void {\r\n        // The documentation gives no clue at all how to do this.  But there's a comment later:\r\n        // var scale = stage.scaleX();\r\n        // var new_pos = event.target.absolutePosition();\r\n        // new_pos.x = (new_pos.x - stage.x()) / scale;\r\n        // new_pos.y = (new_pos.y - stage.y()) / scale;\r\n        // draggedNode.move_to(new_pos);\r\n        //\r\n        // Gonna assume the stage isn't scaled.  (And might you be subject to the layer being scaled as well?)\r\n\r\n        const pos = e.target.absolutePosition();\r\n        props.model.setPosition(pos.x, pos.y);\r\n    }\r\n\r\n    function handleDragEnd(e: KonvaEventObject<MouseEvent>): void {\r\n        if (props.onMoveCompleted) {\r\n            props.onMoveCompleted({ evt: e.evt, model: props.model});\r\n        }\r\n    }\r\n\r\n    function handleClick(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        if (props.onClick) {\r\n            props.onClick({\r\n                evt: eventArgs.evt,\r\n                model: props.model,\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        function handleMoved() {\r\n            setPosition([props.model.x, props.model.y]);\r\n        }\r\n        props.model.onMoved(handleMoved);\r\n        return () => props.model.offMoved(handleMoved);\r\n    }, [props.model]);\r\n\r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setIsOn(props.model.currentState);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged);\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n\r\n    const groupContent: Array<JSX.Element> = [];\r\n    groupContent.push(\r\n        <Rect key='surround' height={64} width={64} strokeWidth={3} stroke={props.isSelected ? 'green' : 'blue'} fill={isOn ? 'white' : 'grey'} />\r\n    )\r\n    if (props.model instanceof Model.InteractableWithSingleBitSavedState) {\r\n        groupContent.push(<SavedStateIndicator key='savedStateIndicator' model={props.model}/>)\r\n    }\r\n    if (props.model instanceof Model.LogicGate) {\r\n        groupContent.push(<LogicGate key='logicGate' model={props.model}/>)\r\n    } else if (props.model instanceof Model.Input) {\r\n        groupContent.push(<Input key='input'/>)\r\n    } else if (props.model instanceof Model.Timer) {\r\n        groupContent.push(<Timer key='input' model={props.model}/>)\r\n    }\r\n\r\n    return <Group onClick={handleClick}\r\n                  onMouseUp={handleOnMouseUp}\r\n                  ref={groupRef}\r\n                  draggable\r\n                  x={x}\r\n                  y={y}\r\n                  onDragStart={handleDragStart}\r\n                  onDragMove={handleDragMove}\r\n                  onDragEnd={handleDragEnd}>\r\n{groupContent}\r\n</Group>\r\n}\r\n\r\ninterface ISavedStateIndicatorProps {\r\n    model: Model.InteractableWithSingleBitSavedState;\r\n};\r\n\r\nfunction SavedStateIndicator(props: ISavedStateIndicatorProps): JSX.Element | null {\r\n    const [savedState, setSavedState] = useState(props.model.savedState);\r\n    \r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setSavedState(props.model.savedState);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged)\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n\r\n    const size=16;\r\n    return <Line key='saveStateIndicator'\r\n                points={[63-size, 0, 63, 0, 63, size]}\r\n                fill={savedState ? 'blue' : 'transparent'}\r\n                stroke='blue'\r\n                strokeWidth={3}\r\n                closed={true} />;\r\n}\r\n\r\ninterface ILogicGateProps {\r\n    model: Model.LogicGate;\r\n}\r\n\r\nfunction LogicGate(props: ILogicGateProps): JSX.Element {\r\n    const [kind, setKind] = useState(props.model.kind);\r\n    \r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setKind(props.model.kind);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged)\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n    return <Image x={0} y={0} image={_assets[kind].image()} />;\r\n}\r\n\r\nfunction Input(): JSX.Element {\r\n    return <Circle key='image' radius={22} x={32} y={32} strokeWidth={8} stroke='black' />;\r\n}\r\n\r\ninterface ITimerProps {\r\n    model: Model.Timer;\r\n}\r\n\r\nexport function Timer(props: ITimerProps): JSX.Element {\r\n    const [tickStorage, setTickStorage] = useState(props.model.tickStorage);\r\n    useEffect(() => {\r\n        function handleStateChanged() {\r\n            setTickStorage([...props.model.tickStorage]);\r\n        }\r\n        props.model.onStateChanged(handleStateChanged)\r\n        return () => props.model.offStateChanged(handleStateChanged);\r\n    }, [props.model]);\r\n\r\n    const drawingHeight = 64;\r\n    const drawingWidth = 64;\r\n    const horizontalOffset = 12;\r\n    const verticalOffset = 6;\r\n    const rectHeight = (drawingHeight - 2*verticalOffset) / tickStorage.length;\r\n\r\n    return <Group>\r\n            {tickStorage.map((tickValue, index) =>\r\n                <Rect key={index.toString()}\r\n                    x={horizontalOffset}\r\n                    width={drawingWidth - 2*horizontalOffset}\r\n                    y={drawingHeight - verticalOffset - rectHeight - index*(drawingHeight-2*verticalOffset)/tickStorage.length}\r\n                    height={rectHeight}\r\n                    strokeWidth={1}\r\n                    stroke='darkgrey'\r\n                    fill={tickValue ? 'blue' : 'white'}/>)}\r\n        </Group>;\r\n}\r\n\r\nexport interface ILinkArrowProps {\r\n    source: Model.Interactable;\r\n    target: Model.Interactable;\r\n}\r\n\r\nexport function LinkArrow(props: ILinkArrowProps): JSX.Element {\r\n    const [isLit, setIsLit] = React.useState(props.source.prevState);\r\n    const [[sourceX, sourceY, targetX, targetY], setPositions] = React.useState(getPositions());\r\n\r\n    function getPositions(): Array<number> {\r\n        let sourceX = props.source.x+32;\r\n        let sourceY = props.source.y+32;\r\n        let targetX = props.target.x+32;\r\n        let targetY = props.target.y+32;\r\n\r\n        if (Math.abs(targetY-sourceY) < Math.abs(targetX-sourceX)) {\r\n            // The line is less than 45 degrees up, so we'll trim the x's and scale the y's\r\n            const sign = (targetX > sourceX) ? 1 : -1;\r\n            const yTrim = 32*(targetY - sourceY)/(targetX-sourceX);\r\n            sourceX += sign*32;\r\n            targetX -= sign*32;\r\n            sourceY += sign*yTrim;\r\n            targetY -= sign*yTrim;\r\n        }\r\n        else {\r\n            const sign = (targetY > sourceY) ? 1 : -1;\r\n            const xTrim = 32*(targetX - sourceX)/(targetY-sourceY);\r\n            sourceX += sign*xTrim;\r\n            targetX -= sign*xTrim;\r\n            sourceY += sign*32;\r\n            targetY -= sign*32;\r\n        }\r\n\r\n        return [sourceX, sourceY, targetX, targetY];\r\n    }\r\n\r\n    function handleStateChanged(): void {\r\n        setIsLit(props.source.prevState);\r\n    }\r\n    function handleSourceOrTargetMoved(): void {\r\n        setPositions(getPositions());\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.source.onStateChanged(handleStateChanged);\r\n        props.source.onMoved(handleSourceOrTargetMoved);\r\n        props.target.onMoved(handleSourceOrTargetMoved);\r\n\r\n        return () => {\r\n            props.source.offStateChanged(handleStateChanged);\r\n            props.source.offMoved(handleSourceOrTargetMoved);\r\n            props.target.offMoved(handleSourceOrTargetMoved);\r\n        };\r\n    }, [props.source, props.target]);\r\n\r\n    return <Arrow x={sourceX}\r\n                  y={sourceY}\r\n                  points={[0,0, targetX-sourceX, targetY-sourceY]}\r\n                  fill={isLit ? 'darkblue' : 'teal'}\r\n                  stroke={isLit ? 'darkblue' : 'teal'}\r\n                  strokeWidth={4}\r\n                  pointerLength={10}\r\n                  pointerWidth={10}/>;\r\n}\r\n\r\nexport function loadAssets(onComplete: () => void): void\r\n{\r\n    for (const kind of ['and', 'or', 'xor', 'nand', 'nor', 'xnor', 'paint']) {\r\n        // This whole thing is bad and this element is also bad...\r\n        Konva.Image.fromURL('/ScrapMechanicLogicGateSimulator/' + kind + '-black.png', (img: string) => {\r\n            _assets[kind] = img;\r\n            if (Object.keys(_assets).length === 7) {\r\n                onComplete();\r\n            }\r\n          });\r\n    }\r\n}","let timeout: NodeJS.Timeout | undefined;\r\n\r\nexport function show(message: string): void {\r\n    const error = document.getElementById(\"error\");\r\n    if (error === null) {\r\n        throw new Error(\"missing error element\");\r\n    }\r\n\r\n    error.innerText = message;\r\n    error.classList.add('visible');\r\n\r\n    if (timeout) {\r\n        clearTimeout(timeout);\r\n    }\r\n\r\n    timeout = setTimeout(() => {\r\n        error.classList.remove('visible');\r\n        timeout = undefined;\r\n    }, 4000);\r\n}","import * as React from \"react\";\r\nimport { Image, Line, Rect, Group, Circle, Text } from \"react-konva\";\r\nimport { Simulator } from \"./Simulator\";\r\nimport * as ViewModel from \"./ViewModel\";\r\nimport * as Model from \"./Model\";\r\nimport { Interactable } from \"./Model\";\r\nimport { KonvaEventObject } from \"konva/types/Node\";\r\nimport FileSaver from 'file-saver';\r\nimport * as FloatingErrorMessage from \"./FloatingErrorMessage\";\r\n\r\ninterface IToolBarButtonProps {\r\n    x: number;\r\n    y: number;\r\n    isEnabled: boolean;\r\n    children: Array<JSX.Element> | JSX.Element;\r\n    onDragStart?: ((eventArgs: KonvaEventObject<MouseEvent>) => void) | undefined;\r\n    onClicked: (eventArgs: KonvaEventObject<MouseEvent>) => void;\r\n    toolTipId: string;\r\n}\r\n\r\nconst buttonWidth = 64;\r\nconst buttonHeight = 64;\r\nconst pressedScalingFactor = 1.05;\r\n\r\nclass ToolTip {\r\n    private timeoutHandle: NodeJS.Timeout | undefined;\r\n\r\n    constructor(private readonly toolTipId: string, public x: number, public y: number)\r\n    {\r\n    }\r\n\r\n    public startTimer(): void {\r\n        if (!this.timeoutHandle && document.getElementById(this.toolTipId)) {\r\n            this.timeoutHandle = setTimeout(this._handleTimeout, 1000);\r\n        }        \r\n    }\r\n\r\n    public clearTimer(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n            this.timeoutHandle = undefined;\r\n        }\r\n\r\n        const element: HTMLElement | null = document.getElementById(this.toolTipId);\r\n        if (!element) {\r\n            throw new Error(\"toolTipId is defined, but not in the document\");\r\n        }\r\n\r\n        element.style.visibility = 'hidden';\r\n    }\r\n    \r\n    private _handleTimeout: () => void = () => {\r\n        this.timeoutHandle = undefined;\r\n        if (!this.toolTipId) {\r\n            return;\r\n        }\r\n\r\n        const element: HTMLElement | null = document.getElementById(this.toolTipId);\r\n        if (!element) {\r\n            throw new Error(\"toolTipId is defined, but not in the document\");\r\n        }\r\n\r\n        element.style.visibility = 'visible';\r\n        element.style.top = (this.y - element.clientHeight - 5) + 'px';\r\n        let left:number = this.x + buttonWidth/2 - element.clientWidth/2;\r\n        if (left < 0) {\r\n            left = 10;\r\n        }\r\n        element.style.top = (this.y - element.clientHeight - 5) + 'px';\r\n        element.style.left = left + 'px';\r\n    }\r\n}\r\n\r\n\r\nfunction ToolBarButton(props: IToolBarButtonProps) {\r\n    const [isPressed, setIsPressed] = React.useState(false);\r\n    const [isHovering, setIsHovering] = React.useState(false);\r\n    const [tooltip] = React.useState(new ToolTip(props.toolTipId, props.x, props.y));\r\n\r\n    // This destroys the tooltip and timer when the button is destroyed.\r\n    React.useEffect(() => {\r\n        return () => tooltip.clearTimer();\r\n    }, [tooltip]); // TODO: I know this would work if the list were empty, but the closure includes tooltip...\r\n\r\n    function handleMouseEnter(): void {\r\n        setIsHovering(true);\r\n        tooltip.startTimer();\r\n    }\r\n\r\n    function handleMouseLeave(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        // If the cursor is moving roughly upward, call it a drag.\r\n        if (props.onDragStart && isPressed && eventArgs.evt.offsetY < props.y+32) {\r\n            props.onDragStart(eventArgs);\r\n        }\r\n\r\n        setIsHovering(false);\r\n        setIsPressed(false);\r\n        tooltip.clearTimer();\r\n    }\r\n\r\n    function handleMouseDown(): void {\r\n        setIsPressed(true);\r\n        tooltip.clearTimer();\r\n    }\r\n\r\n    function handleMouseUp(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        setIsPressed(false);\r\n        if (props.onClicked) {\r\n            props.onClicked(eventArgs);\r\n        }\r\n        tooltip.startTimer();\r\n    }\r\n\r\n    return <Group x={props.x - (isPressed ? buttonWidth*((pressedScalingFactor - 1)/2) : 0)}\r\n                      y={props.y - (isPressed ? buttonHeight*((pressedScalingFactor - 1)/2) : 0)}\r\n                      onMouseEnter={handleMouseEnter}\r\n                      onMouseLeave={handleMouseLeave}\r\n                      onMouseDown={handleMouseDown}\r\n                      onMouseUp={handleMouseUp}\r\n                      scaleX={isPressed ? pressedScalingFactor : 1}\r\n                      scaleY={isPressed ? pressedScalingFactor : 1}>\r\n                {props.children}\r\n                <Rect x={0} y={0} height={64} width={64}\r\n                      strokeWidth={2} stroke={isHovering ? 'black' : 'grey'}\r\n                      fill={props.isEnabled ? 'transparent' : '#80808080'} />\r\n            </Group>;\r\n}\r\n\r\n\r\ninterface IStartStopButtonProps {\r\n    x: number;\r\n    y: number;\r\n    model: Simulator,\r\n}\r\n\r\nfunction useIsRunning(model: Simulator) {\r\n    const [isRunning, setIsRunning] = React.useState(model.isRunning);\r\n\r\n    React.useEffect(() => {\r\n        function handleRunStateChanged() {\r\n            setIsRunning(model.isRunning);\r\n        }\r\n        model.onRunStateChanged(handleRunStateChanged);\r\n        return () => model.offRunStateChanged(handleRunStateChanged);\r\n    }, [model]);\r\n\r\n    return isRunning;\r\n}\r\n\r\nexport function StartStopButton(props: IStartStopButtonProps): JSX.Element {\r\n    const isRunning = useIsRunning(props.model);\r\n\r\n    const content: JSX.Element | Array<JSX.Element> = isRunning ?\r\n    [\r\n        <Line key='1' points={[32-5, 32-12, 32-5, 32+12]} lineCap='butt' strokeWidth={5} stroke='red'/>,\r\n        <Line key='2' points={[32+5, 32-12, 32+5, 32+12]} lineCap='butt' strokeWidth={5} stroke='red'/>\r\n    ] : <Line key='3'  points={[32-16, 32-16, 32+12, 32, 32-16, 32+16]}\r\n          strokeWidth={4}\r\n          stroke='green'\r\n          fill='green'\r\n          closed={true}/>;\r\n\r\n    function handleClick(): void {\r\n        if (props.model.isRunning) {\r\n            props.model.stopRunning();\r\n        } else {\r\n            props.model.startRunning();\r\n        }\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='playPauseTip' isEnabled={true} onClicked={handleClick}>\r\n        {content}\r\n    </ToolBarButton>;\r\n}\r\n\r\n\r\nexport interface ISingleStepButtonProps {\r\n    x: number;\r\n    y: number;\r\n    model: Simulator,\r\n}\r\n\r\nexport function SingleStepButton(props: ISingleStepButtonProps): JSX.Element {\r\n    const isRunning = useIsRunning(props.model);\r\n\r\n    function handleClick(): void {\r\n        props.model.advanceOne();\r\n    }\r\n    \r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='singleStepTip' isEnabled={true} onClicked={handleClick}>\r\n        <Line points={[32+12, 32, 32-16, 32+16, 32-16, 32-16, 32+12, 32, 32+12, 32-16, 32+12, 32+16]}\r\n        strokeWidth={4}\r\n        stroke={isRunning ? '#305030ff' : '#008000ff'}\r\n        closed={false}/>\r\n    </ToolBarButton>;\r\n}\r\n\r\n\r\nexport interface IDragNewInteractableDragEventArgs {\r\n    prototype: Model.Interactable;\r\n    event: KonvaEventObject<MouseEvent>;\r\n}\r\n\r\ninterface ILogicGateButtonProps {\r\n    x: number;\r\n    y: number;\r\n    kind: Model.LogicGateTypes | 'timer' | 'input';\r\n    selected: Model.Interactable | undefined;\r\n    onBeginDrag: (eventArgs: IDragNewInteractableDragEventArgs) => void;\r\n}\r\n\r\nexport function LogicGateButton(props: ILogicGateButtonProps): JSX.Element {\r\n\r\n    const toolTipId = props.kind === 'input'\r\n        ? 'inputTip'\r\n        : (props.kind === 'timer' \r\n            ? 'timerTip'\r\n            : 'logicGateTip');\r\n\r\n    function handleClick(): void {\r\n        if (!props.selected) {\r\n            FloatingErrorMessage.show(\"No logic gate is selected (click on one in the field).\")\r\n            return;\r\n        }\r\n\r\n        if (props.kind === 'input' && props.selected instanceof Model.Input) {\r\n            props.selected.twiddle(1);\r\n        } else if (props.kind === 'timer' && props.selected instanceof Model.Timer) {\r\n            FloatingErrorMessage.show(\"Timers can't be changed like this.\");\r\n            // no action\r\n        } else if (props.kind !== 'timer' && props.kind !== 'input' && props.selected instanceof Model.LogicGate) {\r\n            props.selected.kind = props.kind;\r\n        } else {\r\n            FloatingErrorMessage.show(\"Can't convert between inputs, timers and gates.  (You have to delete and recreate them).\");\r\n        }\r\n    }\r\n\r\n    function handleDragStart(eventArgs: KonvaEventObject<MouseEvent>): void {\r\n        let prototype: Model.Interactable;\r\n        switch (props.kind) {\r\n            case 'timer':\r\n                prototype = new Model.Timer({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, kind: props.kind, tickStorage: new Array<boolean>(10).fill(false) });\r\n                break;\r\n            case 'input':\r\n                prototype = new Model.Input({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, savedState: false, kind: props.kind});\r\n                break;\r\n            default:\r\n                prototype = new Model.LogicGate({ x:eventArgs.evt.offsetX, y:eventArgs.evt.offsetY, savedState: false, kind: props.kind});\r\n                break;\r\n        }\r\n\r\n        props.onBeginDrag({\r\n            prototype: prototype,\r\n            event: eventArgs});\r\n    }\r\n\r\n    let content: JSX.Element | Array<JSX.Element> | undefined;\r\n    switch(props.kind) {\r\n        case 'input':\r\n            content = <Circle radius={22} x={32} y={32} strokeWidth={8} stroke='black'/>;\r\n            break;\r\n        case 'timer':\r\n            const drawingHeight = 64;\r\n            const drawingWidth = 64;\r\n            const horizontalOffset = 12;\r\n            const verticalOffset = 6;\r\n            const tickStorage = [true, true, true, true, true, false, false, false, false, false];\r\n            const rectHeight = (drawingHeight - 2*verticalOffset) / tickStorage.length;\r\n\r\n            content = tickStorage.map((value: boolean, index: number) =>\r\n            <Rect key={index}\r\n                    x={horizontalOffset}\r\n                    width={drawingWidth - 2*horizontalOffset}\r\n                    y={drawingHeight - verticalOffset - rectHeight - index*(drawingHeight-2*verticalOffset)/tickStorage.length}\r\n                    height={rectHeight}\r\n                    strokeWidth={1}\r\n                    stroke='darkgrey'\r\n                    fill={value ? 'blue' : 'white'}\r\n                    />);\r\n            break;\r\n        default:\r\n            content = <Image x={0} y={0} image={ViewModel._assets[props.kind].image()} />;\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId={toolTipId} isEnabled={true} onClicked={handleClick} onDragStart={handleDragStart}>{content}</ToolBarButton>;\r\n}\r\n\r\n\r\ninterface IPaintButtonProps {\r\n    x: number;\r\n    y: number;\r\n    selected: Model.Interactable | undefined;\r\n}\r\n\r\nexport function PaintButton(props: IPaintButtonProps): JSX.Element {\r\n    function handleClick(): void {\r\n        if (props.selected instanceof Model.InteractableWithSingleBitSavedState) {\r\n            props.selected.paint();\r\n        }\r\n        else {\r\n            FloatingErrorMessage.show(\"Timers always save their current state on reload, so painting them has no effect on its behavior\");\r\n        }\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='paintTip' isEnabled={true} onClicked={handleClick}>\r\n        <Image x={0} y={0} image={ViewModel._assets['paint'].image()} />\r\n    </ToolBarButton>\r\n}\r\n\r\n\r\ninterface ILiftButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\n\r\nexport function PutOnLiftButton(props: ILiftButtonProps): JSX.Element {\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='putOnLiftTip' isEnabled={true} onClicked={() => props.simulator.putOnLift()}>\r\n        <Line key='base'\r\n              points={[52, 48,  12, 48,  12, 28,  32, 28,  32, 12,  16, 12,  48, 12,  32,12,  32, 28,  52, 28,  52, 48 ]}\r\n              strokeWidth={4}\r\n              stroke='black'\r\n              closed={true}/>\r\n        <Line key='arrow'\r\n              points = {[18, 42,  32, 32,  46, 42,  18, 42]}\r\n              strokeWidth={1}\r\n              stroke='blue'\r\n              closed={true}\r\n              fill='blue'/>\r\n    </ToolBarButton>\r\n}\r\n\r\nexport function TakeOffLiftButton(props: ILiftButtonProps): JSX.Element {\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='takeOffLiftTip' isEnabled={true} onClicked={() => props.simulator.takeOffLift()}>\r\n        <Line key='base'\r\n              points={[52, 48,  12, 48,  12, 28,  32, 28,  32, 12,  16, 12,  48, 12,  32,12,  32, 28,  52, 28,  52, 48 ]}\r\n              strokeWidth={4}\r\n              stroke='black'\r\n              closed={true}/>\r\n        <Line key='arrow'\r\n              points = {[18, 32,  32, 42,  46, 32,  18, 32]}\r\n              strokeWidth={1}\r\n              stroke='blue'\r\n              closed={true}\r\n              fill='blue'/>\r\n    </ToolBarButton>\r\n}\r\n\r\ninterface IDeleteButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n    selected: Interactable | undefined;\r\n}\r\n\r\nexport function DeleteButton(props: IDeleteButtonProps): JSX.Element {\r\n    function handleClick(): void {\r\n        if (props.selected) {\r\n            props.simulator.remove(props.selected);\r\n        } else {\r\n            FloatingErrorMessage.show(\"Nothing is selected (click on a logic gate in the field to specify what should be deleted).\")\r\n        }\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='deleteTip' isEnabled={props.selected !== undefined} onClicked={handleClick}>\r\n        <Text text=\"&#128465;\" x={10} y={8} fontSize={64} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n\r\ninterface ICopyLinkButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\nexport function CopyLinkButton(props: ICopyLinkButtonProps): JSX.Element {\r\n    async function handleClick(): Promise<void> {\r\n        if (!navigator.clipboard) {\r\n            alert(\"Can't copy to clipboard - navigator.clipboard doesn't exist.  Perhaps you're using an older browser?\");\r\n            return;\r\n        }\r\n\r\n        const url: string = window.location.origin + window.location.pathname + '?' + props.simulator.serializeToCompressedQueryStringFragment();\r\n        try {\r\n            await navigator.clipboard.writeText(url);\r\n            alert(\"Copied the following URL to the clipboard:\\n\\n\" + url);\r\n        } catch (err) {\r\n            alert('navigator.clipboard.writeText failed!\\n\\n' + err);\r\n        }\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='shareLinkTip' isEnabled={true} onClicked={handleClick}>\r\n        <Text text=\"&#128279;\" x={6} y={14} fontSize={42} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n\r\ninterface ISaveToFileButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\nexport function SaveToFileButton(props: ISaveToFileButtonProps): JSX.Element {\r\n    function handleClick(): void {\r\n        const file = new File([JSON.stringify(props.simulator.serialize(), null, 4)], \"logicgatesim.json\", {type: \"text/plain;charset=utf-8\"});\r\n        FileSaver.saveAs(file);\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='saveTip' isEnabled={true} onClicked={handleClick}>\r\n        <Text text=\"&#128190;\" x={6} y={14} fontSize={42} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n\r\ninterface ILoadFromFileButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\nexport function LoadFromFileButton(props: ILoadFromFileButtonProps): JSX.Element {\r\n    const fileElem = document.getElementById(\"fileElem\") as HTMLInputElement;\r\n    if (!fileElem) {\r\n        throw new Error(\"index.html is busted - fileElem <input> is missing\");\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        function handleFileGiven(): void {\r\n            if (!fileElem.files || fileElem.files.length === 0) {\r\n                return;\r\n            }\r\n    \r\n            // hacky - no message when file load fails.\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                const fileContents: string = reader.result as string;\r\n                let jsonContent: unknown;\r\n                try\r\n                {\r\n                    jsonContent = JSON.parse(fileContents);\r\n                }\r\n                catch(err) {\r\n                    alert(\"Failed to load the file - are you sure this is a file generated from this app?  \" + err);\r\n                    return;\r\n                }\r\n    \r\n                try\r\n                {\r\n                    props.simulator.load(jsonContent);\r\n                }\r\n                catch(err) {\r\n                    alert(err);\r\n                }\r\n            };\r\n            reader.readAsText(fileElem.files[0]);\r\n        }\r\n    \r\n        fileElem.addEventListener('change', handleFileGiven, false);\r\n\r\n        return () => fileElem.removeEventListener('change', handleFileGiven);\r\n    }, [props.simulator, fileElem]);\r\n\r\n    function handleClick(): void {\r\n        fileElem.click();\r\n    }\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='loadTip' isEnabled={true} onClicked={handleClick}>\r\n        <Text text=\"&#128193;\" x={6} y={14} fontSize={42} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n\r\n\r\ninterface IReloadButtonProps {\r\n    x: number;\r\n    y: number;\r\n    simulator: Simulator;\r\n}\r\n\r\nexport function ReloadButton(props: IReloadButtonProps): JSX.Element {\r\n\r\n    return <ToolBarButton x={props.x} y={props.y} toolTipId='reloadTip' isEnabled={true} onClicked={() => props.simulator.gameReload()}>\r\n        <Text text=\"&#8645;\" x={16} y={14} fontSize={42} fill='black'/>\r\n    </ToolBarButton>\r\n}\r\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Stage, Layer, Arrow, Line, Rect } from \"react-konva\";\r\nimport { Simulator, IInteractableLink } from \"./Simulator\";\r\nimport * as TC from \"./TickCounter\";\r\nimport * as ViewModel from \"./ViewModel\";\r\nimport * as Model from \"./Model\";\r\nimport Konva from 'konva';\r\nimport { Vector2d } from \"konva/types/types\";\r\nimport { Interactable } from \"./Model\";\r\nimport { CopyLinkButton, DeleteButton, IDragNewInteractableDragEventArgs, LoadFromFileButton, LogicGateButton, PaintButton, PutOnLiftButton, ReloadButton, SaveToFileButton, SingleStepButton, StartStopButton, TakeOffLiftButton } from \"./Buttons\";\r\nimport { KonvaEventObject } from \"konva/types/Node\";\r\n\r\ninterface AppProps {\r\n    simulator: Simulator;\r\n}\r\n\r\ninterface IScreenLayout {\r\n    canvasWidth: number;\r\n    canvasHeight: number;\r\n    buttonRowHeight: number;\r\n    maxSensibleDropX: number;\r\n    maxSensibleDropY: number;\r\n    buttonRowX: (n: number) => number;\r\n    buttonRowY: (n: number) => number;\r\n}\r\n\r\nfunction getScreenLayout(): IScreenLayout {\r\n    const hSpaceBetweenButtons = 15; // the horizontal between each button (and the edges)\r\n    const vSpaceBetweenButtons = 8;\r\n    const buttonWidth = 64;\r\n    const buttonHeight = 64;\r\n    const maximumButtonsPerRow = 9;\r\n    const canvasHeight = window.innerHeight*.9;\r\n    const canvasWidth = window.innerWidth-57; // Would love to know where the 57 comes from, but with the current styles, it seems to work.\r\n    const numRows = canvasWidth < hSpaceBetweenButtons + 2*maximumButtonsPerRow*(buttonWidth+hSpaceBetweenButtons) ? 2 : 1;\r\n    const buttonRowHeight = numRows*(buttonWidth+vSpaceBetweenButtons) + vSpaceBetweenButtons;\r\n    const buttonRowY = (n: number) => canvasHeight - buttonRowHeight + vSpaceBetweenButtons + (n >= maximumButtonsPerRow && numRows > 1 ? (vSpaceBetweenButtons + buttonHeight) : 0);\r\n    const buttonRowX = (n: number) => hSpaceBetweenButtons + (hSpaceBetweenButtons + buttonWidth) * (n >= maximumButtonsPerRow && numRows > 1 ? n - maximumButtonsPerRow : n);\r\n\r\n    return {\r\n        canvasWidth: canvasWidth,\r\n        canvasHeight: canvasHeight,\r\n        buttonRowHeight: buttonRowHeight,\r\n        maxSensibleDropX: canvasWidth - buttonWidth * .25,\r\n        maxSensibleDropY: buttonRowY(0)-32,\r\n        buttonRowX: buttonRowX,\r\n        buttonRowY: buttonRowY\r\n    };\r\n}\r\n\r\nexport function App(props: AppProps): JSX.Element {\r\n    const [interactables, setInteractables] = React.useState(props.simulator.interactables);\r\n    const [links, setLinks] = React.useState(props.simulator.getLinks());\r\n    const [selected, setSelected] = React.useState<Interactable | undefined>(undefined);\r\n    const [linkSource, setLinkSource] = React.useState<Interactable | undefined>(undefined);\r\n    const [[linkTargetX, linkTargetY], setLinkTarget] = React.useState<Array<number | undefined>>([undefined, undefined]);\r\n    const [createByDragPrototype, setCreateByDragPrototype] = React.useState<Interactable | undefined>(undefined);\r\n    const [screenLayout, setScreenLayout] = React.useState(getScreenLayout());\r\n    const [considerResizeOnNextRender, setConsiderResizeOnNextRender] = React.useState(false);\r\n\r\n    const stageRef: React.RefObject<Konva.Stage> = React.useRef<Konva.Stage>(null);\r\n\r\n\r\n    // Track changes in the model's list of interactables\r\n    React.useEffect(() => {\r\n        function handleInteractablesChanged(): void {\r\n            if (selected && props.simulator.interactables.indexOf(selected) < 0 ) {\r\n                setSelected(undefined);\r\n            }\r\n            setInteractables([...props.simulator.interactables]);\r\n            setLinks(props.simulator.getLinks());\r\n            setLinkSource(undefined);\r\n            setCreateByDragPrototype(undefined);\r\n        };\r\n        function handleInteractablesReset(): void {\r\n            handleInteractablesChanged();\r\n            setConsiderResizeOnNextRender(true);\r\n        };\r\n        // Perhaps onInteractableAdded should make that interactable selected?\r\n\r\n        props.simulator.onInteractableAdded(handleInteractablesChanged);\r\n        props.simulator.onInteractableRemoved(handleInteractablesChanged);\r\n        props.simulator.onInteractablesReset(handleInteractablesReset);\r\n\r\n        return () => {\r\n            props.simulator.offInteractableAdded(handleInteractablesChanged);\r\n            props.simulator.offInteractableRemoved(handleInteractablesChanged);\r\n            props.simulator.offInteractablesReset(handleInteractablesReset)\r\n        };\r\n\r\n    }, [props.simulator, selected]);\r\n\r\n    // Track window resize\r\n    React.useEffect(() => {\r\n        function handleResize(): void {\r\n            setScreenLayout(getScreenLayout());\r\n            setConsiderResizeOnNextRender(true);\r\n        };\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        function handleKeyPress(e: KeyboardEvent): void {\r\n            const xy: Vector2d | null | undefined = stageRef.current?.getPointerPosition();\r\n            if (!xy) {\r\n                throw new Error(\"stage was not set?\");\r\n            }\r\n    \r\n            if (e.key === \"g\") {\r\n                props.simulator.startRunning();\r\n            } else if (e.key === \"s\") {\r\n                props.simulator.stopRunning();\r\n            } else if (e.key === \"n\") {\r\n                props.simulator.advanceOne();\r\n            } else if (e.key === \"l\") {\r\n                const newInteractable = new Model.LogicGate({\r\n                    kind: 'and',\r\n                    x: xy.x,\r\n                    y: xy.y,\r\n                    savedState: false\r\n                });\r\n                props.simulator.add(newInteractable);\r\n            } else if (e.key === \"i\") {\r\n                const newInteractable = new Model.Input({\r\n                    kind: 'input',\r\n                    x: xy.x,\r\n                    y: xy.y,\r\n                    savedState: false\r\n                });\r\n                props.simulator.add(newInteractable);\r\n            } else if (e.key === \"t\") {\r\n                const newInteractable = new Model.Timer({\r\n                    kind: 'timer',\r\n                    x: xy.x,\r\n                    y: xy.y,\r\n                    tickStorage: new Array<boolean>(10).fill(false)\r\n                });\r\n                props.simulator.add(newInteractable);\r\n            } else if (e.key === '[' && selected) {\r\n                selected.twiddle(-1);\r\n            } else if ((e.key === ']' || e.key === ' ') && selected) {\r\n                selected.twiddle(1);\r\n                e.preventDefault();\r\n            } else if (e.key === 'x' && selected) {\r\n                props.simulator.remove(selected);\r\n            } else if (e.key === '4') {\r\n                props.simulator.gameReload();\r\n            } else if (e.key === '$') {\r\n                props.simulator.putOnLift();\r\n            } else if (e.key === 'p' && selected) {\r\n                selected.paint();\r\n            }\r\n    \r\n            console.debug(\"App.handleKeyPress(\" + e.key + \")\");\r\n        };\r\n\r\n        if (stageRef.current) {\r\n            const container = stageRef.current.container();\r\n            container.tabIndex = 1;\r\n            container.focus();\r\n        }\r\n        window.addEventListener('keypress', handleKeyPress);\r\n        return () => window.removeEventListener('keypress', handleKeyPress);\r\n    }, [props.simulator, selected]);\r\n    \r\n    function handleInteractableClicked(e: ViewModel.IEventArgsInteractable): void {\r\n        setSelected( e.model );\r\n    }\r\n\r\n    function handleLinkStart(e: ViewModel.IEventArgsInteractable): void {\r\n        setLinkSource(e.model);\r\n        setLinkTarget([e.evt.x, e.evt.y]);\r\n    }\r\n\r\n    function handleMouseUpInStage(e: KonvaEventObject<MouseEvent>): void {\r\n        // This handles mouseUp events from the field, \r\n        if (linkSource) {\r\n            let target = undefined;\r\n            for (const i of interactables) {\r\n                // TODO: the Interactable viewmodel should decide the in-bounds calculation\r\n                if (i.x <= e.evt.offsetX && e.evt.offsetX < i.x+64\r\n                 && i.y <= e.evt.offsetY && e.evt.offsetY < i.y+64) {\r\n                     target = i;\r\n                     break;\r\n                 }\r\n            }\r\n\r\n            if (target && target !== linkSource && target.addInput(linkSource)) {\r\n                setLinks(props.simulator.getLinks());\r\n                setLinkSource(undefined);\r\n                setCreateByDragPrototype(undefined);\r\n            }\r\n        }\r\n        else if (createByDragPrototype && createByDragPrototype.y < screenLayout.maxSensibleDropY) {\r\n            props.simulator.add(createByDragPrototype);\r\n        }\r\n\r\n        setLinkSource(undefined);\r\n        setCreateByDragPrototype(undefined);\r\n    }\r\n\r\n    function handleMouseMove(e: KonvaEventObject<MouseEvent>): void {\r\n        // console.debug(\"mouseMove: x=\" + e.evt.x + \" pageX=\" + e.evt.pageX + \" clientX=\" + e.evt.clientX + \" offsetX=\" + e.evt.offsetX + \" screenX=\" + e.evt.screenX + \" movementX=\" + e.evt.movementX);\r\n        if (linkSource) {\r\n            setLinkTarget([e.evt.offsetX, e.evt.offsetY]);\r\n        }\r\n        else if (createByDragPrototype) {\r\n            createByDragPrototype.setPosition(e.evt.offsetX, e.evt.offsetY);\r\n        }\r\n    }\r\n\r\n    function handleMouseDown(e: KonvaEventObject<MouseEvent>): void {\r\n        if (!(e.target instanceof ViewModel.Interactable) && selected) {\r\n            setSelected(undefined);\r\n        }\r\n    }\r\n\r\n    function handleNewInteractableDrag(e: IDragNewInteractableDragEventArgs): void {\r\n        setCreateByDragPrototype(e.prototype);\r\n    }\r\n\r\n    function handleMouseLeave(): void {\r\n        setLinkSource(undefined);\r\n        setCreateByDragPrototype(undefined);\r\n    }\r\n\r\n    function handleMoveCompleted(e: ViewModel.IEventArgsInteractable): void {\r\n        const buttonWidth = 64;\r\n        const buttonHeight = 64;\r\n        if (e.model.x < - buttonWidth*.75 || e.model.y < -buttonHeight*.75 || e.model.x > screenLayout.maxSensibleDropX || e.model.y > screenLayout.maxSensibleDropY) {\r\n            props.simulator.remove(e.model);\r\n        }\r\n    }\r\n\r\n    let pointer: Array<JSX.Element> | JSX.Element = [];\r\n\r\n    if (considerResizeOnNextRender) {\r\n        props.simulator.fitToSize(screenLayout.canvasWidth, screenLayout.buttonRowY(0), 20, 20);\r\n        setConsiderResizeOnNextRender(false);\r\n    }\r\n\r\n    if (linkSource) {\r\n        pointer = <Arrow\r\n            x={linkSource.x+32}\r\n            y={linkSource.y+32}\r\n            points={[0,0, linkTargetX!-(linkSource.x+32), linkTargetY!-(linkSource.y+32)]}\r\n            fill='lightgrey'\r\n            stroke='lightgrey'\r\n            strokeWidth={4}\r\n            pointerLength={10}\r\n            pointerWidth={10}/>;\r\n    }\r\n    \r\n    return (\r\n        <Stage\r\n            width={screenLayout.canvasWidth-4}\r\n            height={screenLayout.canvasHeight}\r\n            ref={stageRef}\r\n            onMouseUp={handleMouseUpInStage}\r\n            onMouseMove={handleMouseMove}\r\n            onMouseLeave={handleMouseLeave}\r\n        >\r\n            <Layer>\r\n                <Rect id='background'\r\n                      x={0} y={0}\r\n                      width={screenLayout.canvasWidth}\r\n                      height={screenLayout.canvasHeight - screenLayout.buttonRowHeight}\r\n                      onMouseDown={handleMouseDown}\r\n                      strokeWidth={0}\r\n                      fill='GhostWhite' />\r\n                <TC.TickCounter simulator={props.simulator} right={screenLayout.canvasWidth - 20} top={5} />\r\n                {interactables.map((model: Interactable) =>\r\n                    <ViewModel.Interactable\r\n                    model={model}\r\n                    key={model.id.toString()}\r\n                    isSelected={model === selected}\r\n                    onLinkStart={handleLinkStart}\r\n                    onClick={handleInteractableClicked}\r\n                    onMoveCompleted={handleMoveCompleted}\r\n                />\r\n                )}\r\n                {createByDragPrototype\r\n                    ? <ViewModel.Interactable model={createByDragPrototype} key={createByDragPrototype.id.toString()} isSelected={false}/>\r\n                    : []}\r\n                {pointer}\r\n                {links.map((link: IInteractableLink) => <ViewModel.LinkArrow key={link.source.id.toString()+ \"-\" + link.target.id.toString()} source={link.source} target={link.target}/>)}\r\n            </Layer>\r\n            <Layer>\r\n                <Rect x={0} y={screenLayout.canvasHeight-screenLayout.buttonRowHeight} height={screenLayout.buttonRowHeight} width={screenLayout.canvasWidth} fill='papayawhip' />\r\n                <Line points={[0, screenLayout.canvasHeight-screenLayout.buttonRowHeight, screenLayout.canvasWidth, screenLayout.canvasHeight-screenLayout.buttonRowHeight]} stroke='grey' strokeWidth={3}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(0)} y={screenLayout.buttonRowY(0)} selected={selected} kind='and' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(1)} y={screenLayout.buttonRowY(1)} selected={selected} kind='or' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(2)} y={screenLayout.buttonRowY(2)} selected={selected} kind='xor' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(3)} y={screenLayout.buttonRowY(3)} selected={selected} kind='nand' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(4)} y={screenLayout.buttonRowY(4)} selected={selected} kind='nor' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(5)} y={screenLayout.buttonRowY(5)} selected={selected} kind='xnor' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(6)} y={screenLayout.buttonRowY(6)} selected={selected} kind='input' onBeginDrag={handleNewInteractableDrag}/>\r\n                <LogicGateButton x={screenLayout.buttonRowX(7)} y={screenLayout.buttonRowY(7)} selected={selected} kind='timer' onBeginDrag={handleNewInteractableDrag}/>\r\n                <DeleteButton x={screenLayout.buttonRowX(8)} y={screenLayout.buttonRowY(8)} simulator={props.simulator} selected={selected}/>\r\n                <StartStopButton x={screenLayout.buttonRowX(9)} y={screenLayout.buttonRowY(9)} model={props.simulator}/>\r\n                <SingleStepButton x={screenLayout.buttonRowX(10)} y={screenLayout.buttonRowY(10)} model={props.simulator}/>\r\n                <ReloadButton x={screenLayout.buttonRowX(11)} y={screenLayout.buttonRowY(11)} simulator={props.simulator}/>\r\n                <PaintButton x={screenLayout.buttonRowX(12)} y={screenLayout.buttonRowY(12)} selected={selected}/>\r\n                <PutOnLiftButton x={screenLayout.buttonRowX(13)} y={screenLayout.buttonRowY(13)} simulator={props.simulator}/>\r\n                <TakeOffLiftButton x={screenLayout.buttonRowX(14)} y={screenLayout.buttonRowY(14)} simulator={props.simulator}/>\r\n                <CopyLinkButton x={screenLayout.buttonRowX(15)} y={screenLayout.buttonRowY(15)} simulator={props.simulator}/>\r\n                <LoadFromFileButton x={screenLayout.buttonRowX(16)} y={screenLayout.buttonRowY(16)} simulator={props.simulator}/>\r\n                <SaveToFileButton x={screenLayout.buttonRowX(17)} y={screenLayout.buttonRowY(17)} simulator={props.simulator}/>\r\n            </Layer>\r\n        </Stage>\r\n    );\r\n}\r\n\r\n\r\nexport function makeItSo(): void {\r\n    // TODO - get rid of this.  One way to go would be to find a way to convert all the PNG's to SVG's.\r\n    const queryString: string | undefined = window.location.search;\r\n    let serialized: unknown | undefined = undefined;\r\n    if (queryString) {\r\n        try\r\n        {\r\n            serialized = Simulator.decompressQueryStringFragment(queryString);\r\n        }\r\n        catch {\r\n            alert(\"The query string doesn't seem to be something created by this app - was it perhaps truncated?\");\r\n        }\r\n    }\r\n\r\n    ViewModel.loadAssets(() => {\r\n        let simulator: Simulator | undefined;\r\n        try {\r\n            simulator = new Simulator(serialized);\r\n        }\r\n        catch (err) {\r\n            alert(err);\r\n            simulator = new Simulator();\r\n        }\r\n        render(<App simulator={simulator} />, document.getElementById(\"root\"));\r\n    });\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.css';\r\nimport {makeItSo} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconsole.debug(\"In index\");\r\nmakeItSo();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { EventEmitter } from 'events';\r\nimport pako from 'pako';\r\nimport { hasOwnProperty, Interactable, ISerializedInteractable } from './Model';\r\n\r\n\r\nexport interface IEventArgsSimulator {\r\n    simulator: Simulator;\r\n}\r\n\r\nexport interface IEventArgsTick extends IEventArgsSimulator {\r\n    tick: number;\r\n}\r\n\r\nexport interface IEventArgsInteractableAdded extends IEventArgsSimulator {\r\n    interactable: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractableRemoved extends IEventArgsSimulator {\r\n    interactable: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractablesReset extends IEventArgsSimulator {\r\n    oldInteractables: Array<Interactable>;\r\n}\r\n\r\nexport interface IEventArgsSimulatorRunStateChanged extends IEventArgsSimulator {\r\n    newRunState: boolean;\r\n}\r\n\r\nexport interface IInteractableLink {\r\n    source: Interactable;\r\n    target: Interactable;\r\n}\r\n\r\nexport type ISerializedSimulator = Array<ISerializedInteractable>\r\n\r\nexport class Simulator {\r\n    private _nextTickTimeoutId: NodeJS.Timeout | undefined;\r\n    private _pauseInterval: number;\r\n    private readonly _events: EventEmitter;\r\n\r\n    public currentTick: number; // TODO: make it readonly to outside callers\r\n    public isRunning: boolean; // TODO: make it readonly to outside callers\r\n    public interactables: Array<Interactable>;\r\n\r\n    constructor(serialized?: unknown | undefined) {\r\n        this._events = new EventEmitter();\r\n        this.currentTick = 0;\r\n        this.isRunning = false;\r\n        this._nextTickTimeoutId = undefined;\r\n        this._pauseInterval = 250;\r\n        this.interactables = [];\r\n        if (serialized !== undefined && serialized !== null) {\r\n            this.load(serialized);\r\n        }\r\n    }\r\n\r\n    public serialize(): ISerializedSimulator {\r\n        function buildSerializedWithInputs(interactable: Interactable, allInteractables: Array<Interactable>): ISerializedInteractable {\r\n            const serialized: ISerializedInteractable = interactable.export();\r\n            serialized.inputs = interactable.inputs.map(i => allInteractables.indexOf(i));\r\n            return serialized;\r\n        }\r\n        return this.interactables.map(i => buildSerializedWithInputs(i, this.interactables));\r\n    }\r\n\r\n    public load(serialized: unknown): void {\r\n        if (!Array.isArray(serialized)) {\r\n            throw new Error(\"Bad format - expected an array at the top level\");\r\n        }\r\n\r\n        // interactables that we get here have empty input lists\r\n        const interactables: Array<Interactable> = serialized.map(i => Interactable.validateAndDeserialize(i));\r\n        for (let i = 0; i < interactables.length; ++i) {\r\n            const serializedInteractable:unknown = serialized[i];\r\n            const deserializedInteractable: Interactable = interactables[i];\r\n\r\n            if (typeof(serializedInteractable) !== 'object' || serializedInteractable === null) {\r\n                throw new Error(\"Bad format - expected an array of objects at the top level\");\r\n            }\r\n\r\n            if (!hasOwnProperty(serializedInteractable, 'inputs')) {\r\n                throw new Error(\"Interactable is missing an 'inputs' array\");\r\n            }\r\n\r\n            if (!Array.isArray(serializedInteractable.inputs)) {\r\n                throw new Error(\"Interactable 'inputs' field should be an array of indices\");\r\n            }\r\n\r\n            for (const serializedInputIndex of serializedInteractable.inputs) {\r\n                if (typeof(serializedInputIndex) !== 'number') {\r\n                    throw new Error(\"'inputs' should consist of numbers\");\r\n                }\r\n\r\n                if (serializedInputIndex < 0 || serializedInputIndex >= interactables.length) {\r\n                    throw new Error(\"'inputs' has an index that is out of range\");\r\n                }\r\n\r\n                deserializedInteractable.addInput(interactables[serializedInputIndex]);\r\n            }\r\n        }\r\n\r\n        const oldInteractables = this.interactables;\r\n        this.interactables = interactables;\r\n        this._emitInteractablesReset( { simulator: this, oldInteractables: oldInteractables });\r\n\r\n        this.stopRunning();\r\n    }\r\n\r\n    public fitToSize(width: number, height: number, padX: number, padY: number): void {\r\n        if (this.interactables.every(i => i.x >= 0 && i.x < width-64 && i.y >= 0 && i.y < height-64)) {\r\n            // Seems to fit reasonably well already\r\n            return;\r\n        }\r\n\r\n        const maxX: number = this.interactables.reduce((previousValue, currentValue) => Math.max(previousValue, currentValue.x), 0);\r\n        const maxY: number = this.interactables.reduce((previousValue, currentValue) => Math.max(previousValue, currentValue.y), 0);\r\n        const minX: number = this.interactables.reduce((previousValue, currentValue) => Math.min(previousValue, currentValue.x), 999999);\r\n        const minY: number = this.interactables.reduce((previousValue, currentValue) => Math.min(previousValue, currentValue.y), 999999);\r\n\r\n        for (const i of this.interactables) {\r\n            const newX = padX + (i.x - minX) * (width - 2*padX - 64) / maxX;\r\n            const newY = padY + (i.y - minY) * (height - 2*padY - 64) / maxY;\r\n            i.setPosition(newX, newY);\r\n        }\r\n    }\r\n\r\n    public gameReload(): void {\r\n        for (const i of this.interactables) {\r\n            i.reload();\r\n        }\r\n\r\n        this.currentTick = 0;\r\n        this._emitTick();\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        for (const i of this.interactables) {\r\n            i.putOnLift();\r\n        }\r\n    }\r\n\r\n    public takeOffLift(): void {\r\n        for (const i of this.interactables) {\r\n            i.paint();\r\n        }\r\n    }\r\n\r\n    public serializeToCompressedQueryStringFragment(): string {\r\n        const jsonSerialized: string = JSON.stringify(this.serialize());\r\n        const compressed: Uint8Array = pako.deflate(jsonSerialized);\r\n        const sharableString: string = Buffer.from(compressed).toString('base64');\r\n        return encodeURIComponent(sharableString);\r\n    }\r\n\r\n    public static decompressQueryStringFragment(queryString: string): unknown {\r\n        const base64: string = decodeURIComponent(queryString);\r\n        const compressedData: Uint8Array = Buffer.from(base64, 'base64');\r\n\r\n        const serializedString: string = pako.inflate(compressedData, { to: 'string' });\r\n        return JSON.parse(serializedString);\r\n    }\r\n\r\n    public startRunning(): void {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this._nextTickTimeoutId = setTimeout(this._handleTickTimeout.bind(this), this._pauseInterval);\r\n\r\n        this._events.emit('runStateChanged', { simulator: this, newRunState: this.isRunning });\r\n    }\r\n\r\n    public stopRunning(): void {\r\n        if (!this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this.isRunning = false;\r\n        if (this._nextTickTimeoutId) {\r\n            clearTimeout(this._nextTickTimeoutId);\r\n        }\r\n\r\n        this._nextTickTimeoutId = undefined;\r\n\r\n        this._events.emit('runStateChanged', { simulator: this, newRunState: this.isRunning });\r\n    }\r\n\r\n    public advanceOne(): void {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n\r\n        this._advanceOne();\r\n    }\r\n\r\n    public add(interactable: Interactable): void {\r\n        this.interactables.push(interactable);\r\n        this._events.emit(EventNames.interactableAdded, { simulator: this, interactable: interactable } as IEventArgsInteractableAdded);\r\n    }\r\n\r\n    public remove(interactable: Interactable): boolean {\r\n        let didRemove = false;\r\n        for (let i = this.interactables.length-1; i >= 0; --i) {\r\n            if (this.interactables[i] === interactable) {\r\n                didRemove = true;\r\n                this.interactables.splice(i ,1);\r\n            }\r\n        }\r\n        for (const i of this.interactables) {\r\n            i.removeInput(interactable);\r\n        }\r\n\r\n        if (didRemove)\r\n        {\r\n            this._events.emit(EventNames.interactableRemoved, { simulator: this, interactable: interactable } as IEventArgsInteractableRemoved);\r\n        }\r\n\r\n        return didRemove;\r\n    }\r\n\r\n    public getLinks(): Array<IInteractableLink> {\r\n        return this.interactables\r\n            .map(target => target.inputs\r\n                .map(function(source) {return {source: source, target: target}}))\r\n            .reduce((a,b) => a.concat(b), []);\r\n    }\r\n\r\n    private _advanceOne(): void {\r\n        ++this.currentTick;\r\n        this._emitTick();\r\n\r\n        for (const i of this.interactables) {\r\n            i.apply();\r\n        }\r\n        for (const i of this.interactables) {\r\n            i.calculate();\r\n        }\r\n    }\r\n\r\n    public onTick(handler: (eventArgs: IEventArgsTick) => void): void {\r\n        this._events.on(EventNames.tick, handler);\r\n    }\r\n\r\n    public offTick(handler: (eventArgs: IEventArgsTick) => void): void {\r\n        this._events.off(EventNames.tick, handler);\r\n    }\r\n\r\n    private _emitTick() {\r\n        this._events.emit(EventNames.tick, { simulator: this, tick: this.currentTick } as IEventArgsTick);\r\n    }\r\n\r\n    public onInteractableAdded(handler: (EventTarget: IEventArgsInteractableAdded) => void): void {\r\n        this._events.on(EventNames.interactableAdded, handler);\r\n    }\r\n\r\n    public offInteractableAdded(handler: (EventTarget: IEventArgsInteractableAdded) => void): void {\r\n        this._events.off(EventNames.interactableAdded, handler);\r\n    }\r\n\r\n    public onInteractableRemoved(handler: (EventTarget: IEventArgsInteractableRemoved) => void): void {\r\n        this._events.on(EventNames.interactableRemoved, handler);\r\n    }\r\n\r\n    public offInteractableRemoved(handler: (EventTarget: IEventArgsInteractableRemoved) => void): void {\r\n        this._events.off(EventNames.interactableRemoved, handler);\r\n    }\r\n\r\n    public onRunStateChanged(handler: (EventTarget: IEventArgsSimulatorRunStateChanged) => void): void {\r\n        this._events.on('runStateChanged', handler);\r\n    }\r\n\r\n    public offRunStateChanged(handler: (EventTarget: IEventArgsSimulatorRunStateChanged) => void): void {\r\n        this._events.off('runStateChanged', handler);\r\n    }\r\n\r\n    public onInteractablesReset(handler: (EventTarget: IEventArgsInteractablesReset) => void): void {\r\n        this._events.on('interactablesReset', handler);\r\n    }\r\n\r\n    public offInteractablesReset(handler: (EventTarget: IEventArgsInteractablesReset) => void): void {\r\n        this._events.off('interactablesReset', handler);\r\n    }\r\n\r\n    private _emitInteractablesReset(eventArgs: IEventArgsInteractablesReset )\r\n    {\r\n        this._events.emit('interactablesReset', eventArgs);\r\n    }\r\n\r\n    private _handleTickTimeout(): void {\r\n        this._advanceOne();\r\n        this._nextTickTimeoutId = setTimeout(this._handleTickTimeout.bind(this), this._pauseInterval);\r\n    }\r\n}\r\n\r\nconst EventNames = {\r\n    // This is emitted whenever the clock is actually advanced.  State calculated in\r\n    // 'pretick' should now become the current state.\r\n    tick: 'tick',\r\n\r\n    // A new component has been added to the model (argument is the new item)\r\n    interactableAdded: 'interactableAdded',\r\n\r\n    // A component has been removed from the model (argument is the removed item)\r\n    interactableRemoved: 'interactableRemoved',\r\n};\r\n","import { EventEmitter } from 'events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport function hasOwnProperty<X extends {}, Y extends PropertyKey>\r\n  (obj: X, prop: Y): obj is X & Record<Y, unknown> {\r\n    // source: https://fettblog.eu/typescript-hasownproperty/\r\n    //\r\n    // Seems okay except for having to use the eslint rule on it.\r\n    return obj.hasOwnProperty(prop)\r\n}\r\n\r\n\r\nexport interface ISerializedInteractable {\r\n    x: number;\r\n    y: number;\r\n    kind: LogicGateTypes | 'input' | 'timer';\r\n    inputs: Array<number>;\r\n}\r\n\r\nexport interface IEventArgsInteractable {\r\n    source: Interactable;\r\n}\r\n\r\nexport interface IEventArgsInteractableMoved extends IEventArgsInteractable {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nfunction deserializeInteractable(serialized: Record<string,unknown>, kind: LogicGateTypes | 'input' | 'timer'): ISerializedInteractable {\r\n    if (!hasOwnProperty(serialized, 'x') || typeof(serialized.x) !== 'number') {\r\n        throw new Error(\"Missing 'x' property or 'x' is not a number\");\r\n    }\r\n\r\n    if (!hasOwnProperty(serialized, 'y') || typeof(serialized.y) !== 'number') {\r\n        throw new Error(\"Missing 'x' property or 'x' is not a number\");\r\n    }\r\n\r\n    return {\r\n        kind: kind,\r\n        x: serialized.x,\r\n        y: serialized.y,\r\n        inputs: []\r\n    }\r\n}\r\n\r\nexport class Interactable {\r\n    private _x: number;\r\n    private _y: number;\r\n    private readonly events: EventEmitter;\r\n    private _inputs: Array<Interactable>;\r\n\r\n    private _prevState: boolean;\r\n    private _currentState: boolean;\r\n\r\n    public readonly id: number;\r\n\r\n    static idCounter = 0;\r\n\r\n    constructor(props: Omit<ISerializedInteractable, 'inputs'>) {\r\n        this.events = new EventEmitter();\r\n        this._prevState = false;\r\n        this._currentState = false;\r\n        this._inputs = [];\r\n        this._x = props.x;\r\n        this._y = props.y;\r\n\r\n        this.id = ++Interactable.idCounter;\r\n    }\r\n\r\n    public static validateAndDeserialize(serialized: unknown): Interactable {\r\n        if (typeof(serialized) !== 'object' || serialized === null) {\r\n            throw new Error(\"Bad format - expected an array of objects at the top level\");\r\n        }\r\n\r\n        if (!hasOwnProperty(serialized, 'kind')) {\r\n            throw new Error(\"Interactable is missing an 'inputs' array\");\r\n        }\r\n\r\n        switch (serialized.kind) {\r\n            case 'input':\r\n            case 'input-on':\r\n            case 'input-off':\r\n                return new Input(validateAndNormalizeInput(serialized, serialized.kind));\r\n            case 'timer':\r\n            case 'timer10':\r\n                    return new Timer(validateAndNormalizeTimer(serialized));\r\n            case 'and':\r\n            case 'or':\r\n            case 'xor':\r\n            case 'nand':\r\n            case 'nor':\r\n            case 'xnor':\r\n                return new LogicGate(deserializeLogicGate(serialized, serialized.kind));\r\n            default:\r\n                throw new Error(\"Interactable has unknown 'kind': \" + serialized.kind);\r\n        }\r\n    }\r\n\r\n    public getPosition(): { x: number, y: number } {\r\n        return { x: this._x, y: this._y };\r\n    }\r\n\r\n    public get x(): number { return this._x; }\r\n    public get y(): number { return this._y; }\r\n\r\n    public setPosition(x: number, y: number): void {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._emitMoved(x, y);\r\n    }\r\n\r\n    public get currentState(): boolean { return this._currentState; }\r\n\r\n    protected setCurrentState(newValue: boolean): void {\r\n        if (this._currentState !== newValue) {\r\n            this._currentState = newValue;\r\n            this._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public get prevState(): boolean { return this._prevState; }\r\n    protected setPrevState(newValue: boolean): void {\r\n        if (this._prevState !== newValue) {\r\n            this._prevState = newValue;\r\n            this._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public export(): ISerializedInteractable {\r\n        return {\r\n            x: this._x,\r\n            y: this._y,\r\n            kind: 'input', // base classes will overwrite this.\r\n            inputs: []\r\n        }\r\n    }\r\n\r\n    addInput(newInput: Interactable): boolean {\r\n        if (this.inputLimit === 0) {\r\n            // Can't draw a connection *to* an input.\r\n            return false;\r\n        }\r\n\r\n        const existingIndex: number = this.inputs.indexOf(newInput);\r\n        if (existingIndex >= 0) {\r\n            // if the connection is already there - undo it\r\n            this._inputs.splice(existingIndex, 1);\r\n        } else {\r\n            // If the connection already goes the other way, reverse it (this part just deletes the old arrow)\r\n            const indexInTarget: number = newInput.inputs.indexOf(this);\r\n            if (indexInTarget >= 0) {\r\n                newInput._inputs.splice(indexInTarget, 1);\r\n                newInput.calculate();\r\n            }\r\n\r\n            // If we allow only one input and we already have an input, toss it.\r\n            if (this.inputLimit === 1) {\r\n                this._inputs = [];\r\n            }\r\n\r\n            // Add the new link\r\n            this._inputs.push(newInput);\r\n        }\r\n\r\n        this.calculate();\r\n        this.paint();\r\n        newInput.paint();\r\n        return true;\r\n    }\r\n\r\n    removeInput(deadInput: Interactable): boolean {\r\n        const index: number = this.inputs.indexOf(deadInput);\r\n        if (index < 0) {\r\n            return false;\r\n        } else {\r\n            this._inputs.splice(index, 1);\r\n            this.calculate();\r\n            this.paint();\r\n            return true;\r\n        }\r\n    }\r\n\r\n    get inputs(): Array<Interactable> {\r\n        return [...this._inputs];\r\n    }\r\n\r\n    setInputs(inputs: Array<Interactable>): void {\r\n        this._inputs = [...inputs];\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    twiddle(_direction: -1 | 1): void {\r\n        // No actio for twiddle in a timer.\r\n    }\r\n\r\n    /** Causes the calculated state to become the state that other interactables will see. */\r\n    public apply(): void {\r\n        this.setPrevState(this.currentState);\r\n    }\r\n\r\n    /** Sets currentState based on the previous state of its inputs. */\r\n    public calculate(): void {/* no action */}\r\n\r\n    public reload(): void {/* no action */}\r\n\r\n    public putOnLift(): void {/* no action */}\r\n\r\n    public paint(): void {/* no action */}\r\n\r\n    public onMoved(handler: (eventArgs: IEventArgsInteractableMoved) => void): void {\r\n        this.events.on('moved', handler);\r\n    }\r\n\r\n    public offMoved(handler: (eventArgs: IEventArgsInteractableMoved) => void): void {\r\n        this.events.off('moved', handler);\r\n    }\r\n\r\n    public onStateChanged(handler: (eventArgs: IEventArgsInteractable) => void): void {\r\n        this.events.on('stateChanged', handler);\r\n    }\r\n\r\n    public offStateChanged(handler: (eventArgs: IEventArgsInteractable) => void): void {\r\n        this.events.off('stateChanged', handler);\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 'unlimited';\r\n    }\r\n\r\n    protected _emitMoved(x: number, y: number): void {\r\n        this.events.emit('moved', { source: this, x, y } as IEventArgsInteractableMoved);\r\n    }\r\n\r\n    protected _emitStateChanged(): void {\r\n        this.events.emit('stateChanged', { source: this } as IEventArgsInteractable);\r\n    }\r\n}\r\n\r\nexport interface ISerializedInteractableWithSingleBitSavedState extends ISerializedInteractable {\r\n    savedState: boolean;\r\n}\r\n\r\nfunction validateAndDeserializeInteractableWithSavedState(serialized: Record<string,unknown>, kind: LogicGateTypes | 'input', defaultSavedState: boolean): ISerializedInteractableWithSingleBitSavedState {\r\n    let savedState: boolean = defaultSavedState;\r\n\r\n    if (hasOwnProperty(serialized, 'savedState')) {\r\n        if (typeof(serialized.savedState) !== 'boolean') {\r\n            throw new Error(\"Interactables of kind '\" + kind + \"' should have a 'savedState' property of type boolean\");\r\n        }\r\n        savedState = serialized.savedState;\r\n    }\r\n\r\n    return {\r\n        ...deserializeInteractable(serialized, kind),\r\n        savedState: savedState\r\n    };\r\n}\r\n\r\n\r\nexport class InteractableWithSingleBitSavedState extends Interactable {\r\n    private _savedState: boolean;\r\n\r\n    constructor(props: Omit<ISerializedInteractableWithSingleBitSavedState, 'inputs'>) {\r\n        super(props);\r\n\r\n        this._savedState = props.savedState;\r\n    }\r\n\r\n    public export(): ISerializedInteractableWithSingleBitSavedState {\r\n        return {\r\n            ...super.export(),\r\n            savedState: this._savedState\r\n        };\r\n    }\r\n\r\n    public get savedState(): boolean {\r\n        return this._savedState;\r\n    }\r\n\r\n    public paint(): void {\r\n        if (this._savedState !== this.currentState) {\r\n            this._savedState = this.currentState;\r\n            super._emitStateChanged();\r\n        }\r\n    }\r\n\r\n    public reload(): void {\r\n        this.setCurrentState(this.savedState);\r\n        this.setPrevState(false);\r\n    }\r\n}\r\n\r\nexport type LogicGateTypes = 'and' | 'or' | 'xor' | 'nand' | 'nor' | 'xnor';\r\n\r\nconst LogicGateKindSequence: Array<LogicGateTypes> = ['and', 'or', 'xor', 'nand', 'nor', 'xnor'];\r\n\r\nexport type ISerializedLogicGate = ISerializedInteractableWithSingleBitSavedState\r\n\r\nfunction deserializeLogicGate(serialized: Record<string,unknown>, kind: LogicGateTypes): ISerializedLogicGate {\r\n    return validateAndDeserializeInteractableWithSavedState(serialized, kind, false);\r\n}\r\n\r\nexport class LogicGate extends InteractableWithSingleBitSavedState {\r\n    private _kind: LogicGateTypes;\r\n\r\n    constructor(props: Omit<ISerializedLogicGate, 'inputs'>) {\r\n        super(props);\r\n        if (props.kind === 'timer' || props.kind === 'input') {\r\n            throw new Error(\"Caller should prevent this\");\r\n        }\r\n\r\n        this._kind = props.kind;\r\n    }\r\n\r\n    public get kind(): LogicGateTypes {\r\n        return this._kind;\r\n    }\r\n\r\n    public set kind(newValue: LogicGateTypes) {\r\n        this._kind = newValue;\r\n        this._emitStateChanged();\r\n        this.paint();\r\n    }\r\n\r\n    public twiddle(direction: -1 | 1): void {\r\n        let index = LogicGateKindSequence.indexOf(this._kind);\r\n        index = index + direction;\r\n        if (index < 0) {\r\n            index += LogicGateKindSequence.length;\r\n        }\r\n        else if (index >= LogicGateKindSequence.length) {\r\n            index -= LogicGateKindSequence.length;\r\n        }\r\n\r\n        this.kind = LogicGateKindSequence[index];\r\n        this.calculate();\r\n        this.paint();\r\n    }\r\n\r\n    public calculate(): void {\r\n        // This becomes the sum of all the inputs where the previous state is true\r\n        const numActivatedInputs = this.inputs.reduce((a, b) => a + (b.prevState ? 1 : 0), 0);\r\n        let calculatedState: boolean;\r\n        switch(this.kind) {\r\n            case 'and':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs === this.inputs.length;\r\n                break;\r\n            case 'or':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs > 0;\r\n                break;\r\n            case 'xor':\r\n                calculatedState = numActivatedInputs % 2 === 1;\r\n                break;\r\n            case 'nand':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs !== this.inputs.length;\r\n                break;\r\n            case 'nor':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs === 0;\r\n                break;\r\n            case 'xnor':\r\n                calculatedState = this.inputs.length > 0 && numActivatedInputs % 2 === 0;\r\n                break;\r\n        }\r\n        this.setCurrentState(calculatedState);\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        this.setCurrentState(this.inputs.length > 0 && (this.kind === 'nand' || this.kind === 'nor' || this.kind === 'xnor'));\r\n        this.setPrevState(false);\r\n        this.paint();\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 'unlimited';\r\n    }\r\n\r\n    export(): ISerializedLogicGate {\r\n        return {\r\n            ...super.export(),\r\n            kind: this._kind\r\n        };\r\n    }\r\n}\r\n\r\nexport type ISerializedInput = ISerializedInteractableWithSingleBitSavedState;\r\n\r\nfunction validateAndNormalizeInput(serialized: Record<string,unknown>, kind: 'input' | 'input-on' | 'input-off'): ISerializedLogicGate {\r\n    return validateAndDeserializeInteractableWithSavedState(serialized, 'input', kind === 'input-on');\r\n}\r\n\r\n\r\nexport class Input extends InteractableWithSingleBitSavedState {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    twiddle(_direction: -1 | 1): void {\r\n        this.setCurrentState(!this.currentState);\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 0;\r\n    }\r\n\r\n    public putOnLift(): void {\r\n        this.setCurrentState(false);\r\n        this.setPrevState(false);\r\n        this.paint();\r\n    }\r\n}\r\n\r\nexport interface ISerializedTimer extends ISerializedInteractable {\r\n    tickStorage: Array<boolean>;\r\n}\r\n\r\nfunction validateAndNormalizeTimer(serialized: Record<string,unknown>): ISerializedTimer {\r\n    let rawTickStorage: unknown;\r\n    if (hasOwnProperty(serialized, 'tickStorage')) {\r\n        rawTickStorage = serialized.tickStorage;\r\n    }\r\n\r\n    if (hasOwnProperty(serialized, 'timerTickStorage')) {\r\n        rawTickStorage = serialized.timerTickStorage;\r\n    }\r\n\r\n    if (rawTickStorage === undefined || !Array.isArray(rawTickStorage) || !rawTickStorage.every(i => typeof(i) === 'boolean')) {\r\n        throw new Error(\"Timer interactables should have a boolean array named 'tickStorage'\");\r\n    }\r\n\r\n    return {\r\n        ...deserializeInteractable(serialized, 'timer'),\r\n        tickStorage: rawTickStorage\r\n    };\r\n}\r\n\r\nexport class Timer extends Interactable {\r\n    private readonly _tickStorage: Array<boolean>;\r\n\r\n    public constructor(serialized: Omit<ISerializedTimer, 'inputs'>) {\r\n        super(serialized);\r\n        this._tickStorage = [ ...serialized.tickStorage ];\r\n    }\r\n\r\n    public get tickStorage(): Array<boolean> {\r\n        return [...this._tickStorage];\r\n    }\r\n\r\n    public export(): ISerializedTimer {\r\n        return {\r\n            ...super.export(),\r\n            kind: 'timer',\r\n            tickStorage: this._tickStorage,\r\n        };\r\n    }\r\n\r\n    public calculate(): void {\r\n        this.setCurrentState(this._tickStorage[this._tickStorage.length-1]);\r\n        this._tickStorage[0] = this.inputs.length > 0 && this.inputs[0].prevState;\r\n    }\r\n\r\n    public apply(): void {\r\n        this.setPrevState(this.currentState);\r\n        // Advance everything in the array\r\n        for (let i = 0; i < this._tickStorage.length-1; ++i) {\r\n            this._tickStorage[this._tickStorage.length-1-i] = this._tickStorage[this._tickStorage.length-2-i];\r\n        }\r\n        this.setCurrentState(this._tickStorage[this._tickStorage.length]);\r\n        // tickStorage[0] will be set by calculate - it's not possible to set it here because\r\n        // it has to come from its input, which hasn't finished its apply cycle yet.\r\n    }\r\n\r\n    protected get inputLimit(): 1 | 0 | 'unlimited' {\r\n        return 1;\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}